// Created by Microsoft (R) C/C++ Compiler Version 14.00.24215.1 (9f8d330a).
//
// e:\prgs\project-a\project-a-elec-e8002\gamry-600-reference\src\build-gamryexperimentcontrolandvisualizationclasstestui-desktop_qt_5_8_0_msvc2015_64bit-debug\debug\GamryCom.tli
//
// Wrapper implementations for Win32 type library BD962F0D-A990-4823-9CF5-284D1CDD9C6D
// compiler-generated file created 04/06/17 at 12:53:32 - DO NOT EDIT!

#pragma once

//
// interface IGamryDeviceList wrapper method implementations
//

inline long IGamryDeviceList::Count ( ) {
    long _result = 0;
    HRESULT _hr = raw_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline SAFEARRAY * IGamryDeviceList::EnumSections ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_EnumSections(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline SAFEARRAY * IGamryDeviceList::EnumLabels ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_EnumLabels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IGamryDeviceList::SetIterationMask ( unsigned long Mask ) {
    HRESULT _hr = raw_SetIterationMask(Mask);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline SAFEARRAY * IGamryDeviceList::EnumHandles ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_EnumHandles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IGamryMux wrapper method implementations
//

inline HRESULT IGamryMux::Init ( int MuxNumber ) {
    HRESULT _hr = raw_Init(MuxNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryMux::Open ( VARIANT_BOOL Reset ) {
    HRESULT _hr = raw_Open(Reset);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryMux::Close ( ) {
    HRESULT _hr = raw_Close();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline unsigned short IGamryMux::Version ( ) {
    unsigned short _result = 0;
    HRESULT _hr = raw_Version(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline short IGamryMux::Number ( ) {
    short _result = 0;
    HRESULT _hr = raw_Number(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline short IGamryMux::Cell ( ) {
    short _result = 0;
    HRESULT _hr = raw_Cell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline short IGamryMux::SetCell ( short Channel ) {
    short _result = 0;
    HRESULT _hr = raw_SetCell(Channel, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline short IGamryMux::Aux ( ) {
    short _result = 0;
    HRESULT _hr = raw_Aux(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline short IGamryMux::SetAux ( short Channel ) {
    short _result = 0;
    HRESULT _hr = raw_SetAux(Channel, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum gcMUXCELLSTATE IGamryMux::OffMode ( short Channel ) {
    enum gcMUXCELLSTATE _result;
    HRESULT _hr = raw_OffMode(Channel, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IGamryMux::SetOffMode ( short Channel, enum gcMUXCELLSTATE CellState ) {
    HRESULT _hr = raw_SetOffMode(Channel, CellState);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryMux::SetOffModeMask ( unsigned short Mask, enum gcMUXCELLSTATE CellState ) {
    HRESULT _hr = raw_SetOffModeMask(Mask, CellState);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline float IGamryMux::Dac ( short Channel ) {
    float _result = 0;
    HRESULT _hr = raw_Dac(Channel, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IGamryMux::SetDac ( short Channel, float Voltage ) {
    HRESULT _hr = raw_SetDac(Channel, Voltage);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryMux::SetDacMask ( unsigned short Mask, float Voltage ) {
    HRESULT _hr = raw_SetDacMask(Mask, Voltage);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// dispinterface _IGamryQcmEvents wrapper method implementations
//

inline HRESULT _IGamryQcmEvents::OnDataAvailable ( ) {
    return _com_dispatch_method(this, 0x1, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline HRESULT _IGamryQcmEvents::OnDataDone ( ) {
    return _com_dispatch_method(this, 0x2, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

//
// interface IGamryQcm wrapper method implementations
//

inline HRESULT IGamryQcm::Init ( ) {
    HRESULT _hr = raw_Init();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryQcm::Open ( enum gcQCM_FITMODE Fitmode ) {
    HRESULT _hr = raw_Open(Fitmode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryQcm::Close ( ) {
    HRESULT _hr = raw_Close();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IGamryQcm::SerialNo ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_SerialNo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IGamryQcm::StartScan ( enum gcQCM_SCANMODE Scanmode ) {
    HRESULT _hr = raw_StartScan(Scanmode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryQcm::StopScan ( ) {
    HRESULT _hr = raw_StopScan();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline double IGamryQcm::SetAreaOfOverlap ( double Area ) {
    double _result = 0;
    HRESULT _hr = raw_SetAreaOfOverlap(Area, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IGamryQcm::SetCenterFrequency ( double Hz ) {
    double _result = 0;
    HRESULT _hr = raw_SetCenterFrequency(Hz, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IGamryQcm::SetFrequencyWidth ( double Hz ) {
    double _result = 0;
    HRESULT _hr = raw_SetFrequencyWidth(Hz, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IGamryQcm::SetFrequencyStep ( double Hz ) {
    double _result = 0;
    HRESULT _hr = raw_SetFrequencyStep(Hz, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IGamryQcm::SetCalibration ( double CalibrationFactor ) {
    double _result = 0;
    HRESULT _hr = raw_SetCalibration(CalibrationFactor, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline short IGamryQcm::SetAmplitude ( short Percentage ) {
    short _result = 0;
    HRESULT _hr = raw_SetAmplitude(Percentage, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline short IGamryQcm::SetDamping ( short DampingLevel ) {
    short _result = 0;
    HRESULT _hr = raw_SetDamping(DampingLevel, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IGamryQcm::fs ( ) {
    double _result = 0;
    HRESULT _hr = raw_fs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IGamryQcm::fp ( ) {
    double _result = 0;
    HRESULT _hr = raw_fp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IGamryQcm::AcquisitionTime ( ) {
    double _result = 0;
    HRESULT _hr = raw_AcquisitionTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IGamryQcm::FitTime ( ) {
    double _result = 0;
    HRESULT _hr = raw_FitTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IGamryQcm::FitChiSquared ( ) {
    double _result = 0;
    HRESULT _hr = raw_FitChiSquared(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IGamryQcm::FitAcceptable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_FitAcceptable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IGamryQcm::ScanError ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ScanError(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IGamryQcm::CenterFrequency ( ) {
    double _result = 0;
    HRESULT _hr = raw_CenterFrequency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IGamryQcm::FrequencyWidth ( ) {
    double _result = 0;
    HRESULT _hr = raw_FrequencyWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IGamryQcm::FrequencyStart ( ) {
    double _result = 0;
    HRESULT _hr = raw_FrequencyStart(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IGamryQcm::FrequencyEnd ( ) {
    double _result = 0;
    HRESULT _hr = raw_FrequencyEnd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IGamryQcm::Spectrum ( SAFEARRAY * * Frequency, SAFEARRAY * * Magnitude, SAFEARRAY * * FrequencyFit, SAFEARRAY * * MagnitudeFit ) {
    HRESULT _hr = raw_Spectrum(Frequency, Magnitude, FrequencyFit, MagnitudeFit);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IGamrySignal wrapper method implementations
//

inline long IGamrySignal::_lpSignal ( ) {
    long _result = 0;
    HRESULT _hr = raw__lpSignal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IGamrySignal::SetAcquisitionControl ( enum gcACQUISITIONMODE AcqMode, const _variant_t & AcqBasePeriod, const _variant_t & SampleRate, const _variant_t & DutyCycle ) {
    HRESULT _hr = raw_SetAcquisitionControl(AcqMode, AcqBasePeriod, SampleRate, DutyCycle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// dispinterface _IGamryDeviceListEvents wrapper method implementations
//

inline HRESULT _IGamryDeviceListEvents::OnDeviceListChanged ( ) {
    return _com_dispatch_method(this, 0x1, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

//
// interface IGamryPstat wrapper method implementations
//

inline HRESULT IGamryPstat::Init ( _bstr_t Section ) {
    HRESULT _hr = raw_Init(Section);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IGamryPstat::_lpPstat ( ) {
    long _result = 0;
    HRESULT _hr = raw__lpPstat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IGamryPstat::_lpPstatLicense ( ) {
    long _result = 0;
    HRESULT _hr = raw__lpPstatLicense(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IGamryPstat::Label ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_Label(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline enum gcMODELNO IGamryPstat::ModelNo ( ) {
    enum gcMODELNO _result;
    HRESULT _hr = raw_ModelNo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IGamryPstat::SerialNo ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_SerialNo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IGamryPstat::Open ( ) {
    HRESULT _hr = raw_Open();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryPstat::Close ( VARIANT_BOOL Safe ) {
    HRESULT _hr = raw_Close(Safe);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryPstat::SetSignal ( struct IGamrySignal * Signal ) {
    HRESULT _hr = raw_SetSignal(Signal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryPstat::InitSignal ( ) {
    HRESULT _hr = raw_InitSignal();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryPstat::SetVoltage ( float Voltage ) {
    HRESULT _hr = raw_SetVoltage(Voltage);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline float IGamryPstat::SetBias ( float Voltage ) {
    float _result = 0;
    HRESULT _hr = raw_SetBias(Voltage, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float IGamryPstat::SetScan ( float Voltage ) {
    float _result = 0;
    HRESULT _hr = raw_SetScan(Voltage, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IGamryPstat::SetScanRange ( const _variant_t & ScanRange ) {
    long _result = 0;
    HRESULT _hr = raw_SetScanRange(ScanRange, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IGamryPstat::TestScanRange ( float Voltage1, float Voltage2 ) {
    long _result = 0;
    HRESULT _hr = raw_TestScanRange(Voltage1, Voltage2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float IGamryPstat::GstatRatio ( long IERange ) {
    float _result = 0;
    HRESULT _hr = raw_GstatRatio(IERange, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IGamryPstat::SetIruptMode ( enum gcIRUPTMODE FbMode, enum gcEUCALCMODE EuMode, float Timer, float Eoc, float Gain ) {
    HRESULT _hr = raw_SetIruptMode(FbMode, EuMode, Timer, Eoc, Gain);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IGamryPstat::CalDate ( long CalType ) {
    BSTR _result = 0;
    HRESULT _hr = raw_CalDate(CalType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IGamryPstat::SetCalDate ( long CalType, BSTR * CalDate ) {
    HRESULT _hr = raw_SetCalDate(CalType, CalDate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline enum gcCELLSTATE IGamryPstat::Cell ( ) {
    enum gcCELLSTATE _result;
    HRESULT _hr = raw_Cell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum gcCELLSTATE IGamryPstat::SetCell ( enum gcCELLSTATE CellState ) {
    enum gcCELLSTATE _result;
    HRESULT _hr = raw_SetCell(CellState, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum gcCTRLMODE IGamryPstat::CtrlMode ( ) {
    enum gcCTRLMODE _result;
    HRESULT _hr = raw_CtrlMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum gcCTRLMODE IGamryPstat::SetCtrlMode ( enum gcCTRLMODE CtrlMode ) {
    enum gcCTRLMODE _result;
    HRESULT _hr = raw_SetCtrlMode(CtrlMode, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IGamryPstat::CASpeed ( ) {
    long _result = 0;
    HRESULT _hr = raw_CASpeed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IGamryPstat::SetCASpeed ( const _variant_t & CASpeed ) {
    long _result = 0;
    HRESULT _hr = raw_SetCASpeed(CASpeed, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IGamryPstat::TestCASpeed ( float Frequency ) {
    long _result = 0;
    HRESULT _hr = raw_TestCASpeed(Frequency, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum gcIESTABILITY IGamryPstat::IEStability ( ) {
    enum gcIESTABILITY _result;
    HRESULT _hr = raw_IEStability(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum gcIESTABILITY IGamryPstat::SetIEStability ( enum gcIESTABILITY Stability ) {
    enum gcIESTABILITY _result;
    HRESULT _hr = raw_SetIEStability(Stability, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum gcICONVENTION IGamryPstat::IConvention ( ) {
    enum gcICONVENTION _result;
    HRESULT _hr = raw_IConvention(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum gcICONVENTION IGamryPstat::SetIConvention ( enum gcICONVENTION Convention ) {
    enum gcICONVENTION _result;
    HRESULT _hr = raw_SetIConvention(Convention, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum gcGROUND IGamryPstat::Ground ( ) {
    enum gcGROUND _result;
    HRESULT _hr = raw_Ground(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum gcGROUND IGamryPstat::SetGround ( enum gcGROUND Ground ) {
    enum gcGROUND _result;
    HRESULT _hr = raw_SetGround(Ground, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum gcSENSESPEED IGamryPstat::SenseSpeed ( ) {
    enum gcSENSESPEED _result;
    HRESULT _hr = raw_SenseSpeed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum gcSENSESPEED IGamryPstat::SetSenseSpeed ( enum gcSENSESPEED SenseSpeed ) {
    enum gcSENSESPEED _result;
    HRESULT _hr = raw_SetSenseSpeed(SenseSpeed, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IGamryPstat::SenseSpeedMode ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SenseSpeedMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IGamryPstat::SetSenseSpeedMode ( VARIANT_BOOL SenseSpeedMode ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetSenseSpeedMode(SenseSpeedMode, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IGamryPstat::PosFeedEnable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_PosFeedEnable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IGamryPstat::SetPosFeedEnable ( VARIANT_BOOL PosFeedEnable ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetPosFeedEnable(PosFeedEnable, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float IGamryPstat::PosFeedResistance ( ) {
    float _result = 0;
    HRESULT _hr = raw_PosFeedResistance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float IGamryPstat::SetPosFeedResistance ( float PosFeedResistance ) {
    float _result = 0;
    HRESULT _hr = raw_SetPosFeedResistance(PosFeedResistance, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float IGamryPstat::AnalogOut ( ) {
    float _result = 0;
    HRESULT _hr = raw_AnalogOut(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float IGamryPstat::SetAnalogOut ( float Out ) {
    float _result = 0;
    HRESULT _hr = raw_SetAnalogOut(Out, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline short IGamryPstat::DigitalOut ( ) {
    short _result = 0;
    HRESULT _hr = raw_DigitalOut(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline short IGamryPstat::SetDigitalOut ( short Out, short Mask ) {
    short _result = 0;
    HRESULT _hr = raw_SetDigitalOut(Out, Mask, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline short IGamryPstat::DigitalIn ( ) {
    short _result = 0;
    HRESULT _hr = raw_DigitalIn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IGamryPstat::DDSEnable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_DDSEnable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IGamryPstat::SetDDSEnable ( VARIANT_BOOL DDSEnable ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetDDSEnable(DDSEnable, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float IGamryPstat::DDSAmpl ( ) {
    float _result = 0;
    HRESULT _hr = raw_DDSAmpl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float IGamryPstat::SetDDSAmpl ( float DDSAmpl ) {
    float _result = 0;
    HRESULT _hr = raw_SetDDSAmpl(DDSAmpl, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IGamryPstat::DDSAmplBits ( ) {
    long _result = 0;
    HRESULT _hr = raw_DDSAmplBits(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IGamryPstat::SetDDSAmplBits ( long DDSAmplBits ) {
    long _result = 0;
    HRESULT _hr = raw_SetDDSAmplBits(DDSAmplBits, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IGamryPstat::DDSFreq ( ) {
    double _result = 0;
    HRESULT _hr = raw_DDSFreq(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IGamryPstat::SetDDSFreq ( double DDSFreq ) {
    double _result = 0;
    HRESULT _hr = raw_SetDDSFreq(DDSFreq, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float IGamryPstat::FreqLimitUpper ( ) {
    float _result = 0;
    HRESULT _hr = raw_FreqLimitUpper(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float IGamryPstat::FreqLimitLower ( ) {
    float _result = 0;
    HRESULT _hr = raw_FreqLimitLower(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IGamryPstat::IERange ( ) {
    long _result = 0;
    HRESULT _hr = raw_IERange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IGamryPstat::SetIERange ( const _variant_t & Range ) {
    long _result = 0;
    HRESULT _hr = raw_SetIERange(Range, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IGamryPstat::TestIERange ( float Current ) {
    long _result = 0;
    HRESULT _hr = raw_TestIERange(Current, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IGamryPstat::TestIERangeAC ( float CurrentAC, float VoltageAC, float CurrentDC, float VoltageDC, float Frequency ) {
    long _result = 0;
    HRESULT _hr = raw_TestIERangeAC(CurrentAC, VoltageAC, CurrentDC, VoltageDC, Frequency, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IGamryPstat::IERangeMode ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IERangeMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IGamryPstat::SetIERangeMode ( VARIANT_BOOL RangeMode ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetIERangeMode(RangeMode, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IGamryPstat::IERangeLowerLimit ( ) {
    long _result = 0;
    HRESULT _hr = raw_IERangeLowerLimit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IGamryPstat::SetIERangeLowerLimit ( long RangeLowerLimit ) {
    long _result = 0;
    HRESULT _hr = raw_SetIERangeLowerLimit(RangeLowerLimit, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float IGamryPstat::IEResistor ( long Range ) {
    float _result = 0;
    HRESULT _hr = raw_IEResistor(Range, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IGamryPstat::FindIERange ( ) {
    long _result = 0;
    HRESULT _hr = raw_FindIERange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IGamryPstat::VchRange ( ) {
    long _result = 0;
    HRESULT _hr = raw_VchRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IGamryPstat::SetVchRange ( const _variant_t & Range ) {
    long _result = 0;
    HRESULT _hr = raw_SetVchRange(Range, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IGamryPstat::TestVchRange ( float Voltage ) {
    long _result = 0;
    HRESULT _hr = raw_TestVchRange(Voltage, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IGamryPstat::TestVchRangeAC ( float Voltage, float Frequency ) {
    long _result = 0;
    HRESULT _hr = raw_TestVchRangeAC(Voltage, Frequency, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IGamryPstat::VchRangeMode ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_VchRangeMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IGamryPstat::SetVchRangeMode ( VARIANT_BOOL RangeMode ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetVchRangeMode(RangeMode, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float IGamryPstat::VchOffset ( ) {
    float _result = 0;
    HRESULT _hr = raw_VchOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float IGamryPstat::SetVchOffset ( float Offset ) {
    float _result = 0;
    HRESULT _hr = raw_SetVchOffset(Offset, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IGamryPstat::VchOffsetEnable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_VchOffsetEnable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IGamryPstat::SetVchOffsetEnable ( VARIANT_BOOL OffsetEnable ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetVchOffsetEnable(OffsetEnable, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IGamryPstat::VchFilter ( ) {
    long _result = 0;
    HRESULT _hr = raw_VchFilter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IGamryPstat::SetVchFilter ( const _variant_t & Filter ) {
    long _result = 0;
    HRESULT _hr = raw_SetVchFilter(Filter, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IGamryPstat::TestVchFilter ( float Frequency ) {
    long _result = 0;
    HRESULT _hr = raw_TestVchFilter(Frequency, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IGamryPstat::FindVchRange ( ) {
    long _result = 0;
    HRESULT _hr = raw_FindVchRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float IGamryPstat::MeasureV ( ) {
    float _result = 0;
    HRESULT _hr = raw_MeasureV(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IGamryPstat::IchRange ( ) {
    long _result = 0;
    HRESULT _hr = raw_IchRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IGamryPstat::SetIchRange ( const _variant_t & Range ) {
    long _result = 0;
    HRESULT _hr = raw_SetIchRange(Range, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IGamryPstat::TestIchRange ( float Voltage ) {
    long _result = 0;
    HRESULT _hr = raw_TestIchRange(Voltage, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IGamryPstat::TestIchRangeAC ( float Voltage, float Frequency ) {
    long _result = 0;
    HRESULT _hr = raw_TestIchRangeAC(Voltage, Frequency, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IGamryPstat::IchRangeMode ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IchRangeMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IGamryPstat::SetIchRangeMode ( VARIANT_BOOL RangeMode ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetIchRangeMode(RangeMode, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float IGamryPstat::IchOffset ( ) {
    float _result = 0;
    HRESULT _hr = raw_IchOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float IGamryPstat::SetIchOffset ( float Offset ) {
    float _result = 0;
    HRESULT _hr = raw_SetIchOffset(Offset, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IGamryPstat::IchOffsetEnable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IchOffsetEnable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IGamryPstat::SetIchOffsetEnable ( VARIANT_BOOL OffsetEnable ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetIchOffsetEnable(OffsetEnable, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IGamryPstat::IchFilter ( ) {
    long _result = 0;
    HRESULT _hr = raw_IchFilter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IGamryPstat::SetIchFilter ( const _variant_t & Filter ) {
    long _result = 0;
    HRESULT _hr = raw_SetIchFilter(Filter, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IGamryPstat::TestIchFilter ( float Frequency ) {
    long _result = 0;
    HRESULT _hr = raw_TestIchFilter(Frequency, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IGamryPstat::FindIchRange ( ) {
    long _result = 0;
    HRESULT _hr = raw_FindIchRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float IGamryPstat::MeasureI ( ) {
    float _result = 0;
    HRESULT _hr = raw_MeasureI(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IGamryPstat::AchRange ( ) {
    long _result = 0;
    HRESULT _hr = raw_AchRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IGamryPstat::SetAchRange ( const _variant_t & Range ) {
    long _result = 0;
    HRESULT _hr = raw_SetAchRange(Range, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IGamryPstat::TestAchRange ( float Voltage ) {
    long _result = 0;
    HRESULT _hr = raw_TestAchRange(Voltage, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IGamryPstat::TestAchRangeAC ( float Voltage, float Frequency ) {
    long _result = 0;
    HRESULT _hr = raw_TestAchRangeAC(Voltage, Frequency, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IGamryPstat::AchRangeMode ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AchRangeMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IGamryPstat::SetAchRangeMode ( VARIANT_BOOL RangeMode ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetAchRangeMode(RangeMode, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float IGamryPstat::AchOffset ( ) {
    float _result = 0;
    HRESULT _hr = raw_AchOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float IGamryPstat::SetAchOffset ( float Offset ) {
    float _result = 0;
    HRESULT _hr = raw_SetAchOffset(Offset, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IGamryPstat::AchOffsetEnable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AchOffsetEnable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IGamryPstat::SetAchOffsetEnable ( VARIANT_BOOL OffsetEnable ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetAchOffsetEnable(OffsetEnable, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IGamryPstat::AchFilter ( ) {
    long _result = 0;
    HRESULT _hr = raw_AchFilter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IGamryPstat::SetAchFilter ( const _variant_t & Filter ) {
    long _result = 0;
    HRESULT _hr = raw_SetAchFilter(Filter, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IGamryPstat::TestAchFilter ( float Frequency ) {
    long _result = 0;
    HRESULT _hr = raw_TestAchFilter(Frequency, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IGamryPstat::FindAchRange ( ) {
    long _result = 0;
    HRESULT _hr = raw_FindAchRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float IGamryPstat::MeasureA ( ) {
    float _result = 0;
    HRESULT _hr = raw_MeasureA(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float IGamryPstat::ScanLimitAC ( ) {
    float _result = 0;
    HRESULT _hr = raw_ScanLimitAC(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IGamryPstat::FC350VRange ( ) {
    long _result = 0;
    HRESULT _hr = raw_FC350VRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IGamryPstat::SetFC350VRange ( const _variant_t & Range ) {
    long _result = 0;
    HRESULT _hr = raw_SetFC350VRange(Range, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IGamryPstat::TestFC350VRange ( float Voltage ) {
    long _result = 0;
    HRESULT _hr = raw_TestFC350VRange(Voltage, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float IGamryPstat::FC350VRangeMultiplier ( ) {
    float _result = 0;
    HRESULT _hr = raw_FC350VRangeMultiplier(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum gcFC350IDIVISOR IGamryPstat::FC350IDivisor ( ) {
    enum gcFC350IDIVISOR _result;
    HRESULT _hr = raw_FC350IDivisor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum gcFC350IDIVISOR IGamryPstat::SetFC350IDivisor ( enum gcFC350IDIVISOR Divisor ) {
    enum gcFC350IDIVISOR _result;
    HRESULT _hr = raw_SetFC350IDivisor(Divisor, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IGamryPstat::ExtSrceEnable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ExtSrceEnable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IGamryPstat::SetExtSrceEnable ( VARIANT_BOOL ExtSrceEnable ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetExtSrceEnable(ExtSrceEnable, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IGamryPstat::TestIsOpen ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_TestIsOpen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IGamryPstat::State ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_State(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IGamryPstat::CalibKey ( BSTR * Key, long * Count, SAFEARRAY * * CalibConst ) {
    HRESULT _hr = raw_CalibKey(Key, Count, CalibConst);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryPstat::SetCalibKey ( BSTR * Key, SAFEARRAY * * CalibConst ) {
    HRESULT _hr = raw_SetCalibKey(Key, CalibConst);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryPstat::WriteCalib ( ) {
    HRESULT _hr = raw_WriteCalib();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IGamryPstat::TestIERangeST ( float SampleTime ) {
    long _result = 0;
    HRESULT _hr = raw_TestIERangeST(SampleTime, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IGamryPstat::SetIERangeST ( float SampleTime ) {
    long _result = 0;
    HRESULT _hr = raw_SetIERangeST(SampleTime, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum gcACHSELECT IGamryPstat::SetAchSelect ( enum gcACHSELECT Input ) {
    enum gcACHSELECT _result;
    HRESULT _hr = raw_SetAchSelect(Input, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum gcACHSELECT IGamryPstat::AchSelect ( ) {
    enum gcACHSELECT _result;
    HRESULT _hr = raw_AchSelect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IGamryPstat::Has ( BSTR * Capability ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Has(Capability, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IGamryPstat::CableId ( enum gcCABLEIDSELECT CableIdSelect ) {
    long _result = 0;
    HRESULT _hr = raw_CableId(CableIdSelect, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum gcCOMPLIANCEVOLTAGE IGamryPstat::SetComplianceVoltage ( enum gcCOMPLIANCEVOLTAGE ComplianceSelect ) {
    enum gcCOMPLIANCEVOLTAGE _result;
    HRESULT _hr = raw_SetComplianceVoltage(ComplianceSelect, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum gcCOMPLIANCEVOLTAGE IGamryPstat::ComplianceVoltage ( ) {
    enum gcCOMPLIANCEVOLTAGE _result;
    HRESULT _hr = raw_ComplianceVoltage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum gcELECTROMETER IGamryPstat::SetElectrometer ( enum gcELECTROMETER ElectrometerSelect ) {
    enum gcELECTROMETER _result;
    HRESULT _hr = raw_SetElectrometer(ElectrometerSelect, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum gcELECTROMETER IGamryPstat::Electrometer ( ) {
    enum gcELECTROMETER _result;
    HRESULT _hr = raw_Electrometer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IGamryPstat::SetMasterSerfEnable ( VARIANT_BOOL Enable ) {
    HRESULT _hr = raw_SetMasterSerfEnable(Enable);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline enum gcTHERMOSELECT IGamryPstat::SetThermoSelect ( enum gcTHERMOSELECT Setting ) {
    enum gcTHERMOSELECT _result;
    HRESULT _hr = raw_SetThermoSelect(Setting, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum gcTHERMOSELECT IGamryPstat::ThermoSelect ( ) {
    enum gcTHERMOSELECT _result;
    HRESULT _hr = raw_ThermoSelect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// dispinterface _IGamryPstatEvents wrapper method implementations
//

inline HRESULT _IGamryPstatEvents::OnPstatUnavailable ( ) {
    return _com_dispatch_method(this, 0x1, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline HRESULT _IGamryPstatEvents::OnPstatClosed ( ) {
    return _com_dispatch_method(this, 0x2, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

//
// interface IGamryAe wrapper method implementations
//

inline HRESULT IGamryAe::Init ( struct IGamryPstat * PSTAT ) {
    HRESULT _hr = raw_Init(PSTAT);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IGamryAe::RangeMode ( long Channel ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_RangeMode(Channel, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IGamryAe::SetRangeMode ( long Channel, VARIANT_BOOL RangeMode ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetRangeMode(Channel, RangeMode, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IGamryAe::Filter ( ) {
    long _result = 0;
    HRESULT _hr = raw_Filter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IGamryAe::SetFilter ( const _variant_t & Filter ) {
    long _result = 0;
    HRESULT _hr = raw_SetFilter(Filter, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IGamryAe::SetRange ( long Channel, const _variant_t & Range ) {
    long _result = 0;
    HRESULT _hr = raw_SetRange(Channel, Range, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IGamryAe::Range ( long Channel ) {
    long _result = 0;
    HRESULT _hr = raw_Range(Channel, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float IGamryAe::SetOffset ( long Channel, float Offset ) {
    float _result = 0;
    HRESULT _hr = raw_SetOffset(Channel, Offset, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float IGamryAe::Offset ( long Channel ) {
    float _result = 0;
    HRESULT _hr = raw_Offset(Channel, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float IGamryAe::FreqLimitUpper ( ) {
    float _result = 0;
    HRESULT _hr = raw_FreqLimitUpper(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float IGamryAe::FreqLimitLower ( ) {
    float _result = 0;
    HRESULT _hr = raw_FreqLimitLower(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IGamryDtaq wrapper method implementations
//

inline HRESULT IGamryDtaq::Stop ( ) {
    HRESULT _hr = raw_Stop();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaq::Run ( VARIANT_BOOL AutoRun ) {
    HRESULT _hr = raw_Run(AutoRun);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaq::Cook ( long * NumPoints, SAFEARRAY * * Data ) {
    HRESULT _hr = raw_Cook(NumPoints, Data);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaq::ManualPoint ( ) {
    HRESULT _hr = raw_ManualPoint();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaq::Pause ( ) {
    HRESULT _hr = raw_Pause();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaq::Continue ( ) {
    HRESULT _hr = raw_Continue();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// dispinterface _IGamryDtaqEvents wrapper method implementations
//

inline HRESULT _IGamryDtaqEvents::OnDataAvailable ( ) {
    return _com_dispatch_method(this, 0x1, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline HRESULT _IGamryDtaqEvents::OnDataDone ( ) {
    return _com_dispatch_method(this, 0x2, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

//
// interface IGamryDtaqUniv wrapper method implementations
//

inline HRESULT IGamryDtaqUniv::Init ( struct IGamryPstat * PSTAT ) {
    HRESULT _hr = raw_Init(PSTAT);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IGamryDtaqIv wrapper method implementations
//

inline HRESULT IGamryDtaqIv::Init ( struct IGamryPstat * PSTAT ) {
    HRESULT _hr = raw_Init(PSTAT);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IGamryDtaqEis wrapper method implementations
//

inline HRESULT IGamryDtaqEis::Init ( struct IGamryPstat * PSTAT, float Frequency, float Amplitude, float Precision ) {
    HRESULT _hr = raw_Init(PSTAT, Frequency, Amplitude, Precision);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqEis::SetCycleMin ( long CycleMin ) {
    HRESULT _hr = raw_SetCycleMin(CycleMin);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqEis::SetCycleMax ( long CycleMax ) {
    HRESULT _hr = raw_SetCycleMax(CycleMax);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqEis::SetFilterOverride ( VARIANT_BOOL FilterOverride ) {
    HRESULT _hr = raw_SetFilterOverride(FilterOverride);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline float IGamryDtaqEis::Vreal ( ) {
    float _result = 0;
    HRESULT _hr = raw_Vreal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float IGamryDtaqEis::Vimag ( ) {
    float _result = 0;
    HRESULT _hr = raw_Vimag(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float IGamryDtaqEis::Vsig ( ) {
    float _result = 0;
    HRESULT _hr = raw_Vsig(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float IGamryDtaqEis::Vdc ( ) {
    float _result = 0;
    HRESULT _hr = raw_Vdc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float IGamryDtaqEis::Ireal ( ) {
    float _result = 0;
    HRESULT _hr = raw_Ireal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float IGamryDtaqEis::Iimag ( ) {
    float _result = 0;
    HRESULT _hr = raw_Iimag(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float IGamryDtaqEis::Isig ( ) {
    float _result = 0;
    HRESULT _hr = raw_Isig(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float IGamryDtaqEis::Idc ( ) {
    float _result = 0;
    HRESULT _hr = raw_Idc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float IGamryDtaqEis::Zreal ( ) {
    float _result = 0;
    HRESULT _hr = raw_Zreal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float IGamryDtaqEis::Zimag ( ) {
    float _result = 0;
    HRESULT _hr = raw_Zimag(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float IGamryDtaqEis::Zsig ( ) {
    float _result = 0;
    HRESULT _hr = raw_Zsig(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float IGamryDtaqEis::Zfreq ( ) {
    float _result = 0;
    HRESULT _hr = raw_Zfreq(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IGamryDtaqEis::SetCycleLim ( long Min, long Max ) {
    HRESULT _hr = raw_SetCycleLim(Min, Max);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline float IGamryDtaqEis::Imod ( ) {
    float _result = 0;
    HRESULT _hr = raw_Imod(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float IGamryDtaqEis::Iphz ( ) {
    float _result = 0;
    HRESULT _hr = raw_Iphz(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float IGamryDtaqEis::Vmod ( ) {
    float _result = 0;
    HRESULT _hr = raw_Vmod(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float IGamryDtaqEis::Vphz ( ) {
    float _result = 0;
    HRESULT _hr = raw_Vphz(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float IGamryDtaqEis::Zmod ( ) {
    float _result = 0;
    HRESULT _hr = raw_Zmod(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float IGamryDtaqEis::Zphz ( ) {
    float _result = 0;
    HRESULT _hr = raw_Zphz(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline short IGamryDtaqEis::Result ( ) {
    short _result = 0;
    HRESULT _hr = raw_Result(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IGamryDtaqEis::OverIac ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_OverIac(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IGamryDtaqEis::OverIdc ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_OverIdc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IGamryDtaqEis::OverVac ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_OverVac(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IGamryDtaqEis::OverVdc ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_OverVdc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IGamryDtaqEisAe wrapper method implementations
//

inline HRESULT IGamryDtaqEisAe::Init ( struct IGamryPstat * PSTAT, float Frequency, float Amplitude, float Precision, long OnChannels ) {
    HRESULT _hr = raw_Init(PSTAT, Frequency, Amplitude, Precision, OnChannels);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqEisAe::SetCycleMin ( long CycleMin ) {
    HRESULT _hr = raw_SetCycleMin(CycleMin);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqEisAe::SetCycleMax ( long CycleMax ) {
    HRESULT _hr = raw_SetCycleMax(CycleMax);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqEisAe::SetFilterOverride ( VARIANT_BOOL FilterOverride ) {
    HRESULT _hr = raw_SetFilterOverride(FilterOverride);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline float IGamryDtaqEisAe::Vreal ( long Channel ) {
    float _result = 0;
    HRESULT _hr = raw_Vreal(Channel, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float IGamryDtaqEisAe::Vimag ( long Channel ) {
    float _result = 0;
    HRESULT _hr = raw_Vimag(Channel, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float IGamryDtaqEisAe::Vsig ( long Channel ) {
    float _result = 0;
    HRESULT _hr = raw_Vsig(Channel, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float IGamryDtaqEisAe::Vdc ( long Channel ) {
    float _result = 0;
    HRESULT _hr = raw_Vdc(Channel, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float IGamryDtaqEisAe::Ireal ( long Channel ) {
    float _result = 0;
    HRESULT _hr = raw_Ireal(Channel, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float IGamryDtaqEisAe::Iimag ( long Channel ) {
    float _result = 0;
    HRESULT _hr = raw_Iimag(Channel, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float IGamryDtaqEisAe::Isig ( long Channel ) {
    float _result = 0;
    HRESULT _hr = raw_Isig(Channel, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float IGamryDtaqEisAe::Idc ( long Channel ) {
    float _result = 0;
    HRESULT _hr = raw_Idc(Channel, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float IGamryDtaqEisAe::Zreal ( long Channel ) {
    float _result = 0;
    HRESULT _hr = raw_Zreal(Channel, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float IGamryDtaqEisAe::Zimag ( long Channel ) {
    float _result = 0;
    HRESULT _hr = raw_Zimag(Channel, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float IGamryDtaqEisAe::Zsig ( long Channel ) {
    float _result = 0;
    HRESULT _hr = raw_Zsig(Channel, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float IGamryDtaqEisAe::Zfreq ( ) {
    float _result = 0;
    HRESULT _hr = raw_Zfreq(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IGamryDtaqEisAe::SetCycleLim ( long Min, long Max ) {
    HRESULT _hr = raw_SetCycleLim(Min, Max);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline float IGamryDtaqEisAe::Imod ( long Channel ) {
    float _result = 0;
    HRESULT _hr = raw_Imod(Channel, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float IGamryDtaqEisAe::Iphz ( long Channel ) {
    float _result = 0;
    HRESULT _hr = raw_Iphz(Channel, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float IGamryDtaqEisAe::Vmod ( long Channel ) {
    float _result = 0;
    HRESULT _hr = raw_Vmod(Channel, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float IGamryDtaqEisAe::Vphz ( long Channel ) {
    float _result = 0;
    HRESULT _hr = raw_Vphz(Channel, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float IGamryDtaqEisAe::Zmod ( long Channel ) {
    float _result = 0;
    HRESULT _hr = raw_Zmod(Channel, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float IGamryDtaqEisAe::Zphz ( long Channel ) {
    float _result = 0;
    HRESULT _hr = raw_Zphz(Channel, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline short IGamryDtaqEisAe::Result ( long Channel ) {
    short _result = 0;
    HRESULT _hr = raw_Result(Channel, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IGamryDtaqEisAe::OverIac ( long Channel ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_OverIac(Channel, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IGamryDtaqEisAe::OverIdc ( long Channel ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_OverIdc(Channel, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IGamryDtaqEisAe::OverVac ( long Channel ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_OverVac(Channel, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IGamryDtaqEisAe::OverVdc ( long Channel ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_OverVdc(Channel, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IGamryDtaqCpiv wrapper method implementations
//

inline HRESULT IGamryDtaqCpiv::Init ( struct IGamryPstat * PSTAT ) {
    HRESULT _hr = raw_Init(PSTAT);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqCpiv::SetThreshIMin ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetThreshIMin(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqCpiv::SetThreshIMax ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetThreshIMax(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqCpiv::SetThreshVMin ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetThreshVMin(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqCpiv::SetThreshVMax ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetThreshVMax(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqCpiv::SetThreshTMin ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetThreshTMin(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqCpiv::SetThreshTMax ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetThreshTMax(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqCpiv::SetStopIMin ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopIMin(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqCpiv::SetStopIMax ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopIMax(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqCpiv::SetStopDIMin ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopDIMin(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqCpiv::SetStopDIMax ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopDIMax(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqCpiv::SetStopADIMin ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopADIMin(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqCpiv::SetStopADIMax ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopADIMax(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqCpiv::SetStopAtDelayIMin ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayIMin(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqCpiv::SetStopAtDelayIMax ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayIMax(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqCpiv::SetStopAtDelayDIMin ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayDIMin(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqCpiv::SetStopAtDelayDIMax ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayDIMax(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqCpiv::SetStopAtDelayADIMin ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayADIMin(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqCpiv::SetStopAtDelayADIMax ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayADIMax(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IGamryDtaqCpivAe wrapper method implementations
//

inline HRESULT IGamryDtaqCpivAe::Init ( struct IGamryPstat * PSTAT ) {
    HRESULT _hr = raw_Init(PSTAT);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqCpivAe::SetThreshIMin ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetThreshIMin(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqCpivAe::SetThreshIMax ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetThreshIMax(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqCpivAe::SetThreshVMin ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetThreshVMin(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqCpivAe::SetThreshVMax ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetThreshVMax(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqCpivAe::SetThreshTMin ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetThreshTMin(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqCpivAe::SetThreshTMax ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetThreshTMax(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqCpivAe::SetStopIMin ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopIMin(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqCpivAe::SetStopIMax ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopIMax(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqCpivAe::SetStopDIMin ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopDIMin(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqCpivAe::SetStopDIMax ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopDIMax(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqCpivAe::SetStopADIMin ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopADIMin(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqCpivAe::SetStopADIMax ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopADIMax(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqCpivAe::SetStopAtDelayIMin ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayIMin(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqCpivAe::SetStopAtDelayIMax ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayIMax(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqCpivAe::SetStopAtDelayDIMin ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayDIMin(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqCpivAe::SetStopAtDelayDIMax ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayDIMax(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqCpivAe::SetStopAtDelayADIMin ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayADIMin(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqCpivAe::SetStopAtDelayADIMax ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayADIMax(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqCpivAe::AeSetThreshIMin ( long Channel, VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_AeSetThreshIMin(Channel, Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqCpivAe::AeSetThreshIMax ( long Channel, VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_AeSetThreshIMax(Channel, Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqCpivAe::AeSetThreshVMin ( long Channel, VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_AeSetThreshVMin(Channel, Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqCpivAe::AeSetThreshVMax ( long Channel, VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_AeSetThreshVMax(Channel, Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqCpivAe::AeSetThreshTMin ( long Channel, VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_AeSetThreshTMin(Channel, Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqCpivAe::AeSetThreshTMax ( long Channel, VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_AeSetThreshTMax(Channel, Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqCpivAe::AeSetStopVMin ( long Channel, VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_AeSetStopVMin(Channel, Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqCpivAe::AeSetStopVMax ( long Channel, VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_AeSetStopVMax(Channel, Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqCpivAe::AeSetStopDVMin ( long Channel, VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_AeSetStopDVMin(Channel, Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqCpivAe::AeSetStopDVMax ( long Channel, VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_AeSetStopDVMax(Channel, Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqCpivAe::AeSetStopADVMin ( long Channel, VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_AeSetStopADVMin(Channel, Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqCpivAe::AeSetStopADVMax ( long Channel, VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_AeSetStopADVMax(Channel, Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqCpivAe::AeSetStopAtDelayVMin ( long Channel, long Value ) {
    HRESULT _hr = raw_AeSetStopAtDelayVMin(Channel, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqCpivAe::AeSetStopAtDelayVMax ( long Channel, long Value ) {
    HRESULT _hr = raw_AeSetStopAtDelayVMax(Channel, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqCpivAe::AeSetStopAtDelayDVMin ( long Channel, long Value ) {
    HRESULT _hr = raw_AeSetStopAtDelayDVMin(Channel, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqCpivAe::AeSetStopAtDelayDVMax ( long Channel, long Value ) {
    HRESULT _hr = raw_AeSetStopAtDelayDVMax(Channel, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqCpivAe::AeSetStopAtDelayADVMin ( long Channel, long Value ) {
    HRESULT _hr = raw_AeSetStopAtDelayADVMin(Channel, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqCpivAe::AeSetStopAtDelayADVMax ( long Channel, long Value ) {
    HRESULT _hr = raw_AeSetStopAtDelayADVMax(Channel, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IGamrySignalUniv wrapper method implementations
//

inline HRESULT IGamrySignalUniv::Init ( struct IGamryPstat * PSTAT, float Vo, long Cycles, float SampleRate, long SamplesPerCycle, long Sections, SAFEARRAY * * SignalArray, SAFEARRAY * * SectionsArray, SAFEARRAY * * StepsArray, SAFEARRAY * * RLEArray, enum gcCTRLMODE CtrlMode ) {
    HRESULT _hr = raw_Init(PSTAT, Vo, Cycles, SampleRate, SamplesPerCycle, Sections, SignalArray, SectionsArray, StepsArray, RLEArray, CtrlMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamrySignalUniv::Tweak ( float Vo, long Cycles, float SampleRate, long SamplesPerCycle, long Sections, SAFEARRAY * * SignalArray, SAFEARRAY * * SectionsArray, SAFEARRAY * * StepsArray, SAFEARRAY * * RLEArray ) {
    HRESULT _hr = raw_Tweak(Vo, Cycles, SampleRate, SamplesPerCycle, Sections, SignalArray, SectionsArray, StepsArray, RLEArray);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamrySignalUniv::InitEx ( struct IGamryPstat * PSTAT, float Vo, long Cycles, float SampleRate, long SamplesPerCycle, long Sections, SAFEARRAY * * SignalArray, SAFEARRAY * * SectionsArray, SAFEARRAY * * StepsArray, SAFEARRAY * * RLEArray, SAFEARRAY * * SectionCyclesArray, enum gcCTRLMODE CtrlMode ) {
    HRESULT _hr = raw_InitEx(PSTAT, Vo, Cycles, SampleRate, SamplesPerCycle, Sections, SignalArray, SectionsArray, StepsArray, RLEArray, SectionCyclesArray, CtrlMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamrySignalUniv::TweakEx ( float Vo, long Cycles, float SampleRate, long SamplesPerCycle, long Sections, SAFEARRAY * * SignalArray, SAFEARRAY * * SectionsArray, SAFEARRAY * * StepsArray, SAFEARRAY * * RLEArray, SAFEARRAY * * SectionCyclesArray ) {
    HRESULT _hr = raw_TweakEx(Vo, Cycles, SampleRate, SamplesPerCycle, Sections, SignalArray, SectionsArray, StepsArray, RLEArray, SectionCyclesArray);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IGamrySignalArray wrapper method implementations
//

inline HRESULT IGamrySignalArray::Init ( struct IGamryPstat * PSTAT, long Cycles, float SampleRate, long SamplesPerCycle, SAFEARRAY * * SignalArray, enum gcCTRLMODE CtrlMode ) {
    HRESULT _hr = raw_Init(PSTAT, Cycles, SampleRate, SamplesPerCycle, SignalArray, CtrlMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamrySignalArray::Tweak ( long Cycles, float SampleRate, long SamplesPerCycle, SAFEARRAY * * SignalArray, enum gcSIGTWEAKSTYLE Style ) {
    HRESULT _hr = raw_Tweak(Cycles, SampleRate, SamplesPerCycle, SignalArray, Style);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IGamrySignalArray2 wrapper method implementations
//

inline HRESULT IGamrySignalArray2::Init ( struct IGamryPstat * PSTAT, float Bias, long Cycles, float SampleRate, long LevelsPerCycle, SAFEARRAY * * SignalArray, SAFEARRAY * * RepeatArray, enum gcBIASMODE BiasMode, enum gcCTRLMODE CtrlMode ) {
    HRESULT _hr = raw_Init(PSTAT, Bias, Cycles, SampleRate, LevelsPerCycle, SignalArray, RepeatArray, BiasMode, CtrlMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamrySignalArray2::Tweak ( float Bias, long Cycles, float SampleRate, long LevelsPerCycle, SAFEARRAY * * SignalArray, SAFEARRAY * * RepeatArray, enum gcBIASMODE BiasMode, enum gcSIGTWEAKSTYLE Style ) {
    HRESULT _hr = raw_Tweak(Bias, Cycles, SampleRate, LevelsPerCycle, SignalArray, RepeatArray, BiasMode, Style);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IGamryDtaqCiiv wrapper method implementations
//

inline HRESULT IGamryDtaqCiiv::Init ( struct IGamryPstat * PSTAT ) {
    HRESULT _hr = raw_Init(PSTAT);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqCiiv::SetThreshIMin ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetThreshIMin(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqCiiv::SetThreshIMax ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetThreshIMax(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqCiiv::SetThreshVMin ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetThreshVMin(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqCiiv::SetThreshVMax ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetThreshVMax(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqCiiv::SetThreshTMin ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetThreshTMin(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqCiiv::SetThreshTMax ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetThreshTMax(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqCiiv::SetStopVMin ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopVMin(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqCiiv::SetStopVMax ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopVMax(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqCiiv::SetStopDVMin ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopDVMin(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqCiiv::SetStopDVMax ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopDVMax(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqCiiv::SetStopADVMin ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopADVMin(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqCiiv::SetStopADVMax ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopADVMax(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqCiiv::SetStopAtDelayVMin ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayVMin(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqCiiv::SetStopAtDelayVMax ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayVMax(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqCiiv::SetStopAtDelayDVMin ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayDVMin(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqCiiv::SetStopAtDelayDVMax ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayDVMax(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqCiiv::SetStopAtDelayADVMin ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayADVMin(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqCiiv::SetStopAtDelayADVMax ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayADVMax(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IGamryDtaqCiivAe wrapper method implementations
//

inline HRESULT IGamryDtaqCiivAe::Init ( struct IGamryPstat * PSTAT ) {
    HRESULT _hr = raw_Init(PSTAT);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqCiivAe::SetThreshIMin ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetThreshIMin(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqCiivAe::SetThreshIMax ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetThreshIMax(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqCiivAe::SetThreshVMin ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetThreshVMin(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqCiivAe::SetThreshVMax ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetThreshVMax(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqCiivAe::SetThreshTMin ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetThreshTMin(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqCiivAe::SetThreshTMax ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetThreshTMax(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqCiivAe::SetStopVMin ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopVMin(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqCiivAe::SetStopVMax ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopVMax(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqCiivAe::SetStopDVMin ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopDVMin(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqCiivAe::SetStopDVMax ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopDVMax(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqCiivAe::SetStopADVMin ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopADVMin(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqCiivAe::SetStopADVMax ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopADVMax(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqCiivAe::SetStopAtDelayVMin ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayVMin(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqCiivAe::SetStopAtDelayVMax ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayVMax(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqCiivAe::SetStopAtDelayDVMin ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayDVMin(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqCiivAe::SetStopAtDelayDVMax ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayDVMax(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqCiivAe::SetStopAtDelayADVMin ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayADVMin(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqCiivAe::SetStopAtDelayADVMax ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayADVMax(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqCiivAe::AeSetThreshIMin ( long Channel, VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_AeSetThreshIMin(Channel, Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqCiivAe::AeSetThreshIMax ( long Channel, VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_AeSetThreshIMax(Channel, Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqCiivAe::AeSetThreshVMin ( long Channel, VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_AeSetThreshVMin(Channel, Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqCiivAe::AeSetThreshVMax ( long Channel, VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_AeSetThreshVMax(Channel, Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqCiivAe::AeSetThreshTMin ( long Channel, VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_AeSetThreshTMin(Channel, Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqCiivAe::AeSetThreshTMax ( long Channel, VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_AeSetThreshTMax(Channel, Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqCiivAe::AeSetStopVMin ( long Channel, VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_AeSetStopVMin(Channel, Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqCiivAe::AeSetStopVMax ( long Channel, VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_AeSetStopVMax(Channel, Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqCiivAe::AeSetStopDVMin ( long Channel, VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_AeSetStopDVMin(Channel, Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqCiivAe::AeSetStopDVMax ( long Channel, VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_AeSetStopDVMax(Channel, Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqCiivAe::AeSetStopADVMin ( long Channel, VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_AeSetStopADVMin(Channel, Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqCiivAe::AeSetStopADVMax ( long Channel, VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_AeSetStopADVMax(Channel, Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqCiivAe::AeSetStopAtDelayVMin ( long Channel, long Value ) {
    HRESULT _hr = raw_AeSetStopAtDelayVMin(Channel, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqCiivAe::AeSetStopAtDelayVMax ( long Channel, long Value ) {
    HRESULT _hr = raw_AeSetStopAtDelayVMax(Channel, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqCiivAe::AeSetStopAtDelayDVMin ( long Channel, long Value ) {
    HRESULT _hr = raw_AeSetStopAtDelayDVMin(Channel, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqCiivAe::AeSetStopAtDelayDVMax ( long Channel, long Value ) {
    HRESULT _hr = raw_AeSetStopAtDelayDVMax(Channel, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqCiivAe::AeSetStopAtDelayADVMin ( long Channel, long Value ) {
    HRESULT _hr = raw_AeSetStopAtDelayADVMin(Channel, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqCiivAe::AeSetStopAtDelayADVMax ( long Channel, long Value ) {
    HRESULT _hr = raw_AeSetStopAtDelayADVMax(Channel, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IGamryDtaqChrono wrapper method implementations
//

inline HRESULT IGamryDtaqChrono::Init ( struct IGamryPstat * PSTAT, enum gcDTAQCHRONO_TYPE Type ) {
    HRESULT _hr = raw_Init(PSTAT, Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqChrono::SetThreshIMin ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetThreshIMin(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqChrono::SetThreshIMax ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetThreshIMax(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqChrono::SetThreshVMin ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetThreshVMin(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqChrono::SetThreshVMax ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetThreshVMax(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqChrono::SetThreshTMin ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetThreshTMin(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqChrono::SetThreshTMax ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetThreshTMax(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqChrono::SetStopXMin ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopXMin(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqChrono::SetStopXMax ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopXMax(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqChrono::SetStopAtDelayXMin ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayXMin(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqChrono::SetStopAtDelayXMax ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayXMax(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqChrono::SetDecimation ( VARIANT_BOOL Enable, long PreStepPts, long UndecStepPts ) {
    HRESULT _hr = raw_SetDecimation(Enable, PreStepPts, UndecStepPts);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IGamryDtaqIvt wrapper method implementations
//

inline HRESULT IGamryDtaqIvt::Init ( struct IGamryPstat * PSTAT ) {
    HRESULT _hr = raw_Init(PSTAT);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqIvt::SetThreshIMin ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetThreshIMin(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqIvt::SetThreshIMax ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetThreshIMax(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqIvt::SetThreshVMin ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetThreshVMin(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqIvt::SetThreshVMax ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetThreshVMax(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqIvt::SetThreshAMin ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetThreshAMin(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqIvt::SetThreshAMax ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetThreshAMax(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqIvt::SetStopIMin ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopIMin(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqIvt::SetStopIMax ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopIMax(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqIvt::SetStopVMin ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopVMin(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqIvt::SetStopVMax ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopVMax(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqIvt::SetStopAMin ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopAMin(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqIvt::SetStopAMax ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopAMax(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqIvt::SetStopAtDelayIMin ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayIMin(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqIvt::SetStopAtDelayIMax ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayIMax(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqIvt::SetStopAtDelayVMin ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayVMin(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqIvt::SetStopAtDelayVMax ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayVMax(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqIvt::SetStopAtDelayAMin ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayAMin(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqIvt::SetStopAtDelayAMax ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayAMax(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IGamryDtaqIvtAe wrapper method implementations
//

inline HRESULT IGamryDtaqIvtAe::Init ( struct IGamryPstat * PSTAT ) {
    HRESULT _hr = raw_Init(PSTAT);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqIvtAe::SetThreshIMin ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetThreshIMin(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqIvtAe::SetThreshIMax ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetThreshIMax(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqIvtAe::SetThreshVMin ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetThreshVMin(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqIvtAe::SetThreshVMax ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetThreshVMax(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqIvtAe::SetThreshAMin ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetThreshAMin(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqIvtAe::SetThreshAMax ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetThreshAMax(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqIvtAe::SetStopIMin ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopIMin(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqIvtAe::SetStopIMax ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopIMax(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqIvtAe::SetStopVMin ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopVMin(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqIvtAe::SetStopVMax ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopVMax(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqIvtAe::SetStopAMin ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopAMin(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqIvtAe::SetStopAMax ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopAMax(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqIvtAe::SetStopAtDelayIMin ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayIMin(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqIvtAe::SetStopAtDelayIMax ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayIMax(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqIvtAe::SetStopAtDelayVMin ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayVMin(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqIvtAe::SetStopAtDelayVMax ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayVMax(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqIvtAe::SetStopAtDelayAMin ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayAMin(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqIvtAe::SetStopAtDelayAMax ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayAMax(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqIvtAe::AeSetThreshIMin ( long Channel, VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_AeSetThreshIMin(Channel, Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqIvtAe::AeSetThreshIMax ( long Channel, VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_AeSetThreshIMax(Channel, Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqIvtAe::AeSetThreshVMin ( long Channel, VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_AeSetThreshVMin(Channel, Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqIvtAe::AeSetThreshVMax ( long Channel, VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_AeSetThreshVMax(Channel, Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqIvtAe::AeSetThreshTMin ( long Channel, VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_AeSetThreshTMin(Channel, Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqIvtAe::AeSetThreshTMax ( long Channel, VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_AeSetThreshTMax(Channel, Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqIvtAe::AeSetStopVMin ( long Channel, VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_AeSetStopVMin(Channel, Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqIvtAe::AeSetStopVMax ( long Channel, VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_AeSetStopVMax(Channel, Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqIvtAe::AeSetStopDVMin ( long Channel, VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_AeSetStopDVMin(Channel, Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqIvtAe::AeSetStopDVMax ( long Channel, VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_AeSetStopDVMax(Channel, Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqIvtAe::AeSetStopADVMin ( long Channel, VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_AeSetStopADVMin(Channel, Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqIvtAe::AeSetStopADVMax ( long Channel, VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_AeSetStopADVMax(Channel, Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqIvtAe::AeSetStopAtDelayVMin ( long Channel, long Value ) {
    HRESULT _hr = raw_AeSetStopAtDelayVMin(Channel, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqIvtAe::AeSetStopAtDelayVMax ( long Channel, long Value ) {
    HRESULT _hr = raw_AeSetStopAtDelayVMax(Channel, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqIvtAe::AeSetStopAtDelayDVMin ( long Channel, long Value ) {
    HRESULT _hr = raw_AeSetStopAtDelayDVMin(Channel, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqIvtAe::AeSetStopAtDelayDVMax ( long Channel, long Value ) {
    HRESULT _hr = raw_AeSetStopAtDelayDVMax(Channel, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqIvtAe::AeSetStopAtDelayADVMin ( long Channel, long Value ) {
    HRESULT _hr = raw_AeSetStopAtDelayADVMin(Channel, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqIvtAe::AeSetStopAtDelayADVMax ( long Channel, long Value ) {
    HRESULT _hr = raw_AeSetStopAtDelayADVMax(Channel, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IGamryDtaqOcv wrapper method implementations
//

inline HRESULT IGamryDtaqOcv::Init ( struct IGamryPstat * PSTAT ) {
    HRESULT _hr = raw_Init(PSTAT);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqOcv::SetStopADVMin ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopADVMin(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqOcv::SetStopADVMax ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopADVMax(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IGamryDtaqOcvAe wrapper method implementations
//

inline HRESULT IGamryDtaqOcvAe::Init ( struct IGamryPstat * PSTAT ) {
    HRESULT _hr = raw_Init(PSTAT);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqOcvAe::SetStopADVMin ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopADVMin(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqOcvAe::SetStopADVMax ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopADVMax(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqOcvAe::AeSetStopADVMin ( long Channel, VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_AeSetStopADVMin(Channel, Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqOcvAe::AeSetStopADVMax ( long Channel, VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_AeSetStopADVMax(Channel, Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqOcvAe::AeSetStopAtDelayADVMin ( long Channel, long Value ) {
    HRESULT _hr = raw_AeSetStopAtDelayADVMin(Channel, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqOcvAe::AeSetStopAtDelayADVMax ( long Channel, long Value ) {
    HRESULT _hr = raw_AeSetStopAtDelayADVMax(Channel, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IGamryDtaqPv wrapper method implementations
//

inline HRESULT IGamryDtaqPv::Init ( struct IGamryPstat * PSTAT ) {
    HRESULT _hr = raw_Init(PSTAT);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPv::SetThreshIMin ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetThreshIMin(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPv::SetThreshIMax ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetThreshIMax(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPv::SetThreshVMin ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetThreshVMin(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPv::SetThreshVMax ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetThreshVMax(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPv::SetThreshTMin ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetThreshTMin(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPv::SetThreshTMax ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetThreshTMax(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPv::SetStopIMin ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopIMin(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPv::SetStopIMax ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopIMax(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPv::SetStopVMin ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopVMin(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPv::SetStopVMax ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopVMax(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPv::SetStopAtDelayIMin ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayIMin(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPv::SetStopAtDelayIMax ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayIMax(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPv::SetStopAtDelayVMin ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayVMin(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPv::SetStopAtDelayVMax ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayVMax(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPv::SetReverseDifference ( VARIANT_BOOL Reverse ) {
    HRESULT _hr = raw_SetReverseDifference(Reverse);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IGamryDtaqRcv wrapper method implementations
//

inline HRESULT IGamryDtaqRcv::Init ( struct IGamryPstat * PSTAT ) {
    HRESULT _hr = raw_Init(PSTAT);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqRcv::SetThreshIMin ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetThreshIMin(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqRcv::SetThreshIMax ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetThreshIMax(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqRcv::SetThreshVMin ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetThreshVMin(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqRcv::SetThreshVMax ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetThreshVMax(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqRcv::SetThreshTMin ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetThreshTMin(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqRcv::SetThreshTMax ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetThreshTMax(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqRcv::SetStopIMin ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopIMin(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqRcv::SetStopIMax ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopIMax(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqRcv::SetStopAtDelayIMin ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayIMin(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqRcv::SetStopAtDelayIMax ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayIMax(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IGamryDtaqRcvAe wrapper method implementations
//

inline HRESULT IGamryDtaqRcvAe::Init ( struct IGamryPstat * PSTAT ) {
    HRESULT _hr = raw_Init(PSTAT);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqRcvAe::SetThreshIMin ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetThreshIMin(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqRcvAe::SetThreshIMax ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetThreshIMax(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqRcvAe::SetThreshVMin ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetThreshVMin(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqRcvAe::SetThreshVMax ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetThreshVMax(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqRcvAe::SetThreshTMin ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetThreshTMin(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqRcvAe::SetThreshTMax ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetThreshTMax(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqRcvAe::SetStopIMin ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopIMin(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqRcvAe::SetStopIMax ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopIMax(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqRcvAe::SetStopAtDelayIMin ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayIMin(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqRcvAe::SetStopAtDelayIMax ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayIMax(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqRcvAe::AeSetThreshIMin ( long Channel, VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_AeSetThreshIMin(Channel, Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqRcvAe::AeSetThreshIMax ( long Channel, VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_AeSetThreshIMax(Channel, Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqRcvAe::AeSetThreshVMin ( long Channel, VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_AeSetThreshVMin(Channel, Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqRcvAe::AeSetThreshVMax ( long Channel, VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_AeSetThreshVMax(Channel, Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqRcvAe::AeSetThreshTMin ( long Channel, VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_AeSetThreshTMin(Channel, Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqRcvAe::AeSetThreshTMax ( long Channel, VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_AeSetThreshTMax(Channel, Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqRcvAe::AeSetStopVMin ( long Channel, VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_AeSetStopVMin(Channel, Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqRcvAe::AeSetStopVMax ( long Channel, VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_AeSetStopVMax(Channel, Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqRcvAe::AeSetStopDVMin ( long Channel, VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_AeSetStopDVMin(Channel, Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqRcvAe::AeSetStopDVMax ( long Channel, VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_AeSetStopDVMax(Channel, Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqRcvAe::AeSetStopADVMin ( long Channel, VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_AeSetStopADVMin(Channel, Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqRcvAe::AeSetStopADVMax ( long Channel, VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_AeSetStopADVMax(Channel, Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqRcvAe::AeSetStopAtDelayVMin ( long Channel, long Value ) {
    HRESULT _hr = raw_AeSetStopAtDelayVMin(Channel, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqRcvAe::AeSetStopAtDelayVMax ( long Channel, long Value ) {
    HRESULT _hr = raw_AeSetStopAtDelayVMax(Channel, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqRcvAe::AeSetStopAtDelayDVMin ( long Channel, long Value ) {
    HRESULT _hr = raw_AeSetStopAtDelayDVMin(Channel, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqRcvAe::AeSetStopAtDelayDVMax ( long Channel, long Value ) {
    HRESULT _hr = raw_AeSetStopAtDelayDVMax(Channel, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqRcvAe::AeSetStopAtDelayADVMin ( long Channel, long Value ) {
    HRESULT _hr = raw_AeSetStopAtDelayADVMin(Channel, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqRcvAe::AeSetStopAtDelayADVMax ( long Channel, long Value ) {
    HRESULT _hr = raw_AeSetStopAtDelayADVMax(Channel, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IGamryDtaqSqwv wrapper method implementations
//

inline HRESULT IGamryDtaqSqwv::Init ( struct IGamryPstat * PSTAT ) {
    HRESULT _hr = raw_Init(PSTAT);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqSqwv::SetThreshIMin ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetThreshIMin(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqSqwv::SetThreshIMax ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetThreshIMax(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqSqwv::SetThreshVMin ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetThreshVMin(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqSqwv::SetThreshVMax ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetThreshVMax(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqSqwv::SetThreshTMin ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetThreshTMin(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqSqwv::SetThreshTMax ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetThreshTMax(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqSqwv::SetStopIMin ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopIMin(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqSqwv::SetStopIMax ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopIMax(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqSqwv::SetStopVMin ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopVMin(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqSqwv::SetStopVMax ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopVMax(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqSqwv::SetStopAtDelayIMin ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayIMin(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqSqwv::SetStopAtDelayIMax ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayIMax(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqSqwv::SetStopAtDelayVMin ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayVMin(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqSqwv::SetStopAtDelayVMax ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayVMax(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqSqwv::SetReverseDifference ( VARIANT_BOOL Reverse ) {
    HRESULT _hr = raw_SetReverseDifference(Reverse);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IGamryDtaqPwr wrapper method implementations
//

inline HRESULT IGamryDtaqPwr::Init ( struct IGamryPstat * PSTAT ) {
    HRESULT _hr = raw_Init(PSTAT);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwr::SetStopVMin ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopVMin(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwr::SetStopAVMin ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopAVMin(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwr::SetStopDVMin ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopDVMin(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwr::SetStopADVMin ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopADVMin(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwr::SetStopVMax ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopVMax(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwr::SetStopAVMax ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopAVMax(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwr::SetStopDVMax ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopDVMax(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwr::SetStopADVMax ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopADVMax(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwr::SetStopIMin ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopIMin(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwr::SetStopAIMin ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopAIMin(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwr::SetStopDIMin ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopDIMin(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwr::SetStopADIMin ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopADIMin(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwr::SetStopIMax ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopIMax(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwr::SetStopAIMax ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopAIMax(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwr::SetStopDIMax ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopDIMax(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwr::SetStopADIMax ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopADIMax(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwr::SetStopAMin ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopAMin(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwr::SetStopAAMin ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopAAMin(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwr::SetStopDAMin ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopDAMin(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwr::SetStopADAMin ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopADAMin(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwr::SetStopAMax ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopAMax(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwr::SetStopAAMax ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopAAMax(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwr::SetStopDAMax ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopDAMax(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwr::SetStopADAMax ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopADAMax(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwr::SetStopPMin ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopPMin(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwr::SetStopAPMin ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopAPMin(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwr::SetStopDPMin ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopDPMin(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwr::SetStopADPMin ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopADPMin(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwr::SetStopPMax ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopPMax(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwr::SetStopAPMax ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopAPMax(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwr::SetStopDPMax ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopDPMax(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwr::SetStopADPMax ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopADPMax(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwr::SetStopQMin ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopQMin(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwr::SetStopAQMin ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopAQMin(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwr::SetStopQMax ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopQMax(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwr::SetStopAQMax ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopAQMax(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwr::SetStopEMin ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopEMin(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwr::SetStopAEMin ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopAEMin(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwr::SetStopEMax ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopEMax(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwr::SetStopAEMax ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopAEMax(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwr::SetStopTempMax ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopTempMax(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwr::SetStopDTempMax ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopDTempMax(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwr::SetStopADTempMax ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopADTempMax(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwr::SetStopAtDelayVMin ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayVMin(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwr::SetStopAtDelayAVMin ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayAVMin(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwr::SetStopAtDelayDVMin ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayDVMin(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwr::SetStopAtDelayADVMin ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayADVMin(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwr::SetStopAtDelayVMax ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayVMax(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwr::SetStopAtDelayAVMax ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayAVMax(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwr::SetStopAtDelayDVMax ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayDVMax(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwr::SetStopAtDelayADVMax ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayADVMax(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwr::SetStopAtDelayIMin ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayIMin(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwr::SetStopAtDelayAIMin ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayAIMin(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwr::SetStopAtDelayDIMin ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayDIMin(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwr::SetStopAtDelayADIMin ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayADIMin(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwr::SetStopAtDelayIMax ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayIMax(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwr::SetStopAtDelayAIMax ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayAIMax(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwr::SetStopAtDelayDIMax ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayDIMax(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwr::SetStopAtDelayADIMax ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayADIMax(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwr::SetStopAtDelayAMin ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayAMin(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwr::SetStopAtDelayAAMin ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayAAMin(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwr::SetStopAtDelayDAMin ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayDAMin(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwr::SetStopAtDelayADAMin ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayADAMin(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwr::SetStopAtDelayAMax ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayAMax(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwr::SetStopAtDelayAAMax ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayAAMax(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwr::SetStopAtDelayDAMax ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayDAMax(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwr::SetStopAtDelayADAMax ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayADAMax(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwr::SetStopAtDelayPMin ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayPMin(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwr::SetStopAtDelayAPMin ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayAPMin(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwr::SetStopAtDelayDPMin ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayDPMin(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwr::SetStopAtDelayADPMin ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayADPMin(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwr::SetStopAtDelayPMax ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayPMax(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwr::SetStopAtDelayAPMax ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayAPMax(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwr::SetStopAtDelayDPMax ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayDPMax(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwr::SetStopAtDelayADPMax ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayADPMax(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwr::SetStopAtDelayQMin ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayQMin(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwr::SetStopAtDelayAQMin ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayAQMin(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwr::SetStopAtDelayQMax ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayQMax(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwr::SetStopAtDelayAQMax ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayAQMax(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwr::SetStopAtDelayEMin ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayEMin(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwr::SetStopAtDelayAEMin ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayAEMin(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwr::SetStopAtDelayEMax ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayEMax(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwr::SetStopAtDelayAEMax ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayAEMax(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwr::SetStopAtDelayTempMax ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayTempMax(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwr::SetStopAtDelayDTempMax ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayDTempMax(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwr::SetStopAtDelayADTempMax ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayADTempMax(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwr::SetThreshVMin ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetThreshVMin(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwr::SetThreshVMax ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetThreshVMax(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwr::SetThreshIMin ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetThreshIMin(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwr::SetThreshIMax ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetThreshIMax(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwr::SetThreshTMin ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetThreshTMin(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwr::SetThreshTMax ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetThreshTMax(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwr::SetThreshAMin ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetThreshAMin(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwr::SetThreshAMax ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetThreshAMax(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwr::SetThreshPMin ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetThreshPMin(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwr::SetThreshPMax ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetThreshPMax(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwr::SetThreshEMin ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetThreshEMin(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwr::SetThreshEMax ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetThreshEMax(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwr::SetThreshTempMin ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetThreshTempMin(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwr::SetThreshTempMax ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetThreshTempMax(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IGamryDtaqPwrAe wrapper method implementations
//

inline HRESULT IGamryDtaqPwrAe::Init ( struct IGamryPstat * PSTAT ) {
    HRESULT _hr = raw_Init(PSTAT);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwrAe::SetStopVMin ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopVMin(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwrAe::SetStopAVMin ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopAVMin(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwrAe::SetStopDVMin ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopDVMin(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwrAe::SetStopADVMin ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopADVMin(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwrAe::SetStopVMax ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopVMax(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwrAe::SetStopAVMax ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopAVMax(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwrAe::SetStopDVMax ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopDVMax(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwrAe::SetStopADVMax ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopADVMax(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwrAe::SetStopIMin ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopIMin(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwrAe::SetStopAIMin ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopAIMin(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwrAe::SetStopDIMin ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopDIMin(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwrAe::SetStopADIMin ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopADIMin(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwrAe::SetStopIMax ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopIMax(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwrAe::SetStopAIMax ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopAIMax(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwrAe::SetStopDIMax ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopDIMax(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwrAe::SetStopADIMax ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopADIMax(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwrAe::SetStopAMin ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopAMin(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwrAe::SetStopAAMin ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopAAMin(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwrAe::SetStopDAMin ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopDAMin(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwrAe::SetStopADAMin ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopADAMin(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwrAe::SetStopAMax ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopAMax(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwrAe::SetStopAAMax ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopAAMax(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwrAe::SetStopDAMax ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopDAMax(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwrAe::SetStopADAMax ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopADAMax(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwrAe::SetStopPMin ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopPMin(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwrAe::SetStopAPMin ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopAPMin(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwrAe::SetStopDPMin ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopDPMin(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwrAe::SetStopADPMin ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopADPMin(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwrAe::SetStopPMax ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopPMax(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwrAe::SetStopAPMax ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopAPMax(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwrAe::SetStopDPMax ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopDPMax(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwrAe::SetStopADPMax ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopADPMax(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwrAe::SetStopQMin ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopQMin(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwrAe::SetStopAQMin ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopAQMin(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwrAe::SetStopQMax ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopQMax(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwrAe::SetStopAQMax ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopAQMax(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwrAe::SetStopEMin ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopEMin(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwrAe::SetStopAEMin ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopAEMin(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwrAe::SetStopEMax ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopEMax(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwrAe::SetStopAEMax ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopAEMax(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwrAe::SetStopTempMax ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopTempMax(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwrAe::SetStopDTempMax ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopDTempMax(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwrAe::SetStopADTempMax ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetStopADTempMax(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwrAe::SetStopAtDelayVMin ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayVMin(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwrAe::SetStopAtDelayAVMin ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayAVMin(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwrAe::SetStopAtDelayDVMin ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayDVMin(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwrAe::SetStopAtDelayADVMin ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayADVMin(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwrAe::SetStopAtDelayVMax ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayVMax(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwrAe::SetStopAtDelayAVMax ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayAVMax(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwrAe::SetStopAtDelayDVMax ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayDVMax(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwrAe::SetStopAtDelayADVMax ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayADVMax(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwrAe::SetStopAtDelayIMin ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayIMin(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwrAe::SetStopAtDelayAIMin ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayAIMin(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwrAe::SetStopAtDelayDIMin ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayDIMin(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwrAe::SetStopAtDelayADIMin ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayADIMin(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwrAe::SetStopAtDelayIMax ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayIMax(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwrAe::SetStopAtDelayAIMax ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayAIMax(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwrAe::SetStopAtDelayDIMax ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayDIMax(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwrAe::SetStopAtDelayADIMax ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayADIMax(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwrAe::SetStopAtDelayAMin ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayAMin(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwrAe::SetStopAtDelayAAMin ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayAAMin(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwrAe::SetStopAtDelayDAMin ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayDAMin(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwrAe::SetStopAtDelayADAMin ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayADAMin(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwrAe::SetStopAtDelayAMax ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayAMax(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwrAe::SetStopAtDelayAAMax ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayAAMax(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwrAe::SetStopAtDelayDAMax ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayDAMax(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwrAe::SetStopAtDelayADAMax ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayADAMax(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwrAe::SetStopAtDelayPMin ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayPMin(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwrAe::SetStopAtDelayAPMin ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayAPMin(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwrAe::SetStopAtDelayDPMin ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayDPMin(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwrAe::SetStopAtDelayADPMin ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayADPMin(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwrAe::SetStopAtDelayPMax ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayPMax(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwrAe::SetStopAtDelayAPMax ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayAPMax(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwrAe::SetStopAtDelayDPMax ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayDPMax(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwrAe::SetStopAtDelayADPMax ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayADPMax(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwrAe::SetStopAtDelayQMin ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayQMin(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwrAe::SetStopAtDelayAQMin ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayAQMin(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwrAe::SetStopAtDelayQMax ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayQMax(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwrAe::SetStopAtDelayAQMax ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayAQMax(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwrAe::SetStopAtDelayEMin ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayEMin(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwrAe::SetStopAtDelayAEMin ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayAEMin(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwrAe::SetStopAtDelayEMax ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayEMax(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwrAe::SetStopAtDelayAEMax ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayAEMax(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwrAe::SetStopAtDelayTempMax ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayTempMax(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwrAe::SetStopAtDelayDTempMax ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayDTempMax(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwrAe::SetStopAtDelayADTempMax ( long Value ) {
    HRESULT _hr = raw_SetStopAtDelayADTempMax(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwrAe::SetThreshVMin ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetThreshVMin(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwrAe::SetThreshVMax ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetThreshVMax(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwrAe::SetThreshIMin ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetThreshIMin(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwrAe::SetThreshIMax ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetThreshIMax(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwrAe::SetThreshTMin ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetThreshTMin(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwrAe::SetThreshTMax ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetThreshTMax(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwrAe::SetThreshAMin ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetThreshAMin(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwrAe::SetThreshAMax ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetThreshAMax(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwrAe::SetThreshPMin ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetThreshPMin(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwrAe::SetThreshPMax ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetThreshPMax(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwrAe::SetThreshEMin ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetThreshEMin(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwrAe::SetThreshEMax ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetThreshEMax(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwrAe::SetThreshTempMin ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetThreshTempMin(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwrAe::SetThreshTempMax ( VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_SetThreshTempMax(Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwrAe::AeSetThreshIMin ( long Channel, VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_AeSetThreshIMin(Channel, Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwrAe::AeSetThreshIMax ( long Channel, VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_AeSetThreshIMax(Channel, Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwrAe::AeSetThreshVMin ( long Channel, VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_AeSetThreshVMin(Channel, Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwrAe::AeSetThreshVMax ( long Channel, VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_AeSetThreshVMax(Channel, Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwrAe::AeSetThreshTMin ( long Channel, VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_AeSetThreshTMin(Channel, Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwrAe::AeSetThreshTMax ( long Channel, VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_AeSetThreshTMax(Channel, Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwrAe::AeSetStopVMin ( long Channel, VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_AeSetStopVMin(Channel, Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwrAe::AeSetStopVMax ( long Channel, VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_AeSetStopVMax(Channel, Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwrAe::AeSetStopDVMin ( long Channel, VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_AeSetStopDVMin(Channel, Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwrAe::AeSetStopDVMax ( long Channel, VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_AeSetStopDVMax(Channel, Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwrAe::AeSetStopADVMin ( long Channel, VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_AeSetStopADVMin(Channel, Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwrAe::AeSetStopADVMax ( long Channel, VARIANT_BOOL Enable, float Value ) {
    HRESULT _hr = raw_AeSetStopADVMax(Channel, Enable, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwrAe::AeSetStopAtDelayVMin ( long Channel, long Value ) {
    HRESULT _hr = raw_AeSetStopAtDelayVMin(Channel, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwrAe::AeSetStopAtDelayVMax ( long Channel, long Value ) {
    HRESULT _hr = raw_AeSetStopAtDelayVMax(Channel, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwrAe::AeSetStopAtDelayDVMin ( long Channel, long Value ) {
    HRESULT _hr = raw_AeSetStopAtDelayDVMin(Channel, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwrAe::AeSetStopAtDelayDVMax ( long Channel, long Value ) {
    HRESULT _hr = raw_AeSetStopAtDelayDVMax(Channel, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwrAe::AeSetStopAtDelayADVMin ( long Channel, long Value ) {
    HRESULT _hr = raw_AeSetStopAtDelayADVMin(Channel, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqPwrAe::AeSetStopAtDelayADVMax ( long Channel, long Value ) {
    HRESULT _hr = raw_AeSetStopAtDelayADVMax(Channel, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IGamryDtaqEsa2 wrapper method implementations
//

inline HRESULT IGamryDtaqEsa2::Init ( struct IGamryPstat * PSTAT, float FreqSample, float FreqOut, VARIANT_BOOL AcqFilterEnable, enum gcESA2FILTERTYPE FilterType ) {
    HRESULT _hr = raw_Init(PSTAT, FreqSample, FreqOut, AcqFilterEnable, FilterType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline float IGamryDtaqEsa2::FilterDelay ( ) {
    float _result = 0;
    HRESULT _hr = raw_FilterDelay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IGamryDtaqEsa2::SetVfInterpolateEnable ( int Count ) {
    HRESULT _hr = raw_SetVfInterpolateEnable(Count);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqEsa2::SetImInterpolateEnable ( int Count ) {
    HRESULT _hr = raw_SetImInterpolateEnable(Count);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqEsa2::SetLookbackLength ( int Length ) {
    HRESULT _hr = raw_SetLookbackLength(Length);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDtaqEsa2::SetHistoryDecay ( float Decay ) {
    HRESULT _hr = raw_SetHistoryDecay(Decay);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IGamryDtaqEfm wrapper method implementations
//

inline HRESULT IGamryDtaqEfm::Init ( struct IGamryPstat * PSTAT, float BaseFrequency, long Harmonic1, long Harmonic2, float Amplitude, long SampPerCycle, long NumCycles ) {
    HRESULT _hr = raw_Init(PSTAT, BaseFrequency, Harmonic1, Harmonic2, Amplitude, SampPerCycle, NumCycles);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IGamrySignalConst wrapper method implementations
//

inline HRESULT IGamrySignalConst::Init ( struct IGamryPstat * PSTAT, float Voltage, float TotalTime, float SampleRate, enum gcCTRLMODE CtrlMode ) {
    HRESULT _hr = raw_Init(PSTAT, Voltage, TotalTime, SampleRate, CtrlMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IGamrySignalPwrConst wrapper method implementations
//

inline HRESULT IGamrySignalPwrConst::Init ( struct IGamryPstat * PSTAT, float Value, float LimitValue, float Gain, float MinDif, float MaxStep, float TotalTime, float SamplePeriod, float PerturbationRate, float PerturbationPulseWidth, float TimerRes, enum gcPWRSIGNALMODE Mode, VARIANT_BOOL WorkingPositive ) {
    HRESULT _hr = raw_Init(PSTAT, Value, LimitValue, Gain, MinDif, MaxStep, TotalTime, SamplePeriod, PerturbationRate, PerturbationPulseWidth, TimerRes, Mode, WorkingPositive);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IGamrySignalStep wrapper method implementations
//

inline HRESULT IGamrySignalStep::Init ( struct IGamryPstat * PSTAT, float Vinit, float Tinit, float Vfinal, float Tfinal, float SampleRate, enum gcCTRLMODE CtrlMode ) {
    HRESULT _hr = raw_Init(PSTAT, Vinit, Tinit, Vfinal, Tfinal, SampleRate, CtrlMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IGamrySignalPwrStep wrapper method implementations
//

inline HRESULT IGamrySignalPwrStep::Init ( struct IGamryPstat * PSTAT, SAFEARRAY * * ValueArray, SAFEARRAY * * LimitValueArray, float Gain, float MinDif, float MaxStep, SAFEARRAY * * TimeArray, float SamplePeriod, float PerturbationRate, float PerturbationPulseWidth, float TimerRes, SAFEARRAY * * ModeArray, VARIANT_BOOL WorkingPositive ) {
    HRESULT _hr = raw_Init(PSTAT, ValueArray, LimitValueArray, Gain, MinDif, MaxStep, TimeArray, SamplePeriod, PerturbationRate, PerturbationPulseWidth, TimerRes, ModeArray, WorkingPositive);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IGamrySignalRamp wrapper method implementations
//

inline HRESULT IGamrySignalRamp::Init ( struct IGamryPstat * PSTAT, float Vinit, float Vfinal, float ScanRate, float SampleRate, enum gcCTRLMODE CtrlMode ) {
    HRESULT _hr = raw_Init(PSTAT, Vinit, Vfinal, ScanRate, SampleRate, CtrlMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IGamrySignalPwrRamp wrapper method implementations
//

inline HRESULT IGamrySignalPwrRamp::Init ( struct IGamryPstat * PSTAT, float ValueInit, float ValueFinal, float ScanRate, float LimitValue, float Gain, float MinDif, float MaxStep, float SamplePeriod, float PerturbationRate, float PerturbationPulseWidth, float TimerRes, enum gcPWRSIGNALMODE Mode, VARIANT_BOOL WorkingPositive ) {
    HRESULT _hr = raw_Init(PSTAT, ValueInit, ValueFinal, ScanRate, LimitValue, Gain, MinDif, MaxStep, SamplePeriod, PerturbationRate, PerturbationPulseWidth, TimerRes, Mode, WorkingPositive);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IGamrySignalDstep wrapper method implementations
//

inline HRESULT IGamrySignalDstep::Init ( struct IGamryPstat * PSTAT, float Vinit, float Tinit, float Vstep1, float Tstep1, float Vstep2, float Tstep2, float SampleRate, enum gcCTRLMODE CtrlMode ) {
    HRESULT _hr = raw_Init(PSTAT, Vinit, Tinit, Vstep1, Tstep1, Vstep2, Tstep2, SampleRate, CtrlMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IGamrySignalMstep wrapper method implementations
//

inline HRESULT IGamrySignalMstep::Init ( struct IGamryPstat * PSTAT, float Vinit, float Vstep, float Tinit, float Tstep, long Nstep, float SampleRate, enum gcCTRLMODE CtrlMode ) {
    HRESULT _hr = raw_Init(PSTAT, Vinit, Vstep, Tinit, Tstep, Nstep, SampleRate, CtrlMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IGamrySignalPv wrapper method implementations
//

inline HRESULT IGamrySignalPv::Init ( struct IGamryPstat * PSTAT, float Vinit, float Vpv, float Vpulse, VARIANT_BOOL EnableOverrideA, float VOverrideA, VARIANT_BOOL EnableOverrideB, float VOverrideB, long MaxCycles, float TimerRes, float PulseTime, float CycleTime, float IntPeriod, VARIANT_BOOL DropKnockSignalEnable, float DropKnockSignalDuration, VARIANT_BOOL DropKnockSignalPolarity, enum gcCTRLMODE CtrlMode ) {
    HRESULT _hr = raw_Init(PSTAT, Vinit, Vpv, Vpulse, EnableOverrideA, VOverrideA, EnableOverrideB, VOverrideB, MaxCycles, TimerRes, PulseTime, CycleTime, IntPeriod, DropKnockSignalEnable, DropKnockSignalDuration, DropKnockSignalPolarity, CtrlMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IGamrySignalRupdn wrapper method implementations
//

inline HRESULT IGamrySignalRupdn::Init ( struct IGamryPstat * PSTAT, float Vinit, float Vapex1, float Vapex2, float Vfinal, float ScanInit, float ScanApex, float ScanFinal, float HoldTime0, float HoldTime1, float HoldTime2, float SampleRate, long Cycles, enum gcCTRLMODE CtrlMode ) {
    HRESULT _hr = raw_Init(PSTAT, Vinit, Vapex1, Vapex2, Vfinal, ScanInit, ScanApex, ScanFinal, HoldTime0, HoldTime1, HoldTime2, SampleRate, Cycles, CtrlMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IGamrySignalUpdn wrapper method implementations
//

inline HRESULT IGamrySignalUpdn::Init ( struct IGamryPstat * PSTAT, float Vinit, float Vapex, float Vfinal, float ScanRateFwd, float ScanRateRev, float SampleRate, enum gcCTRLMODE CtrlMode ) {
    HRESULT _hr = raw_Init(PSTAT, Vinit, Vapex, Vfinal, ScanRateFwd, ScanRateRev, SampleRate, CtrlMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IGamrySignalSqwv wrapper method implementations
//

inline HRESULT IGamrySignalSqwv::Init ( struct IGamryPstat * PSTAT, float Vinit, float Vfinal, float Vstep, float Vpulse, float Tstep, enum gcCTRLMODE CtrlMode ) {
    HRESULT _hr = raw_Init(PSTAT, Vinit, Vfinal, Vstep, Vpulse, Tstep, CtrlMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IGamryReadZ wrapper method implementations
//

inline HRESULT IGamryReadZ::Init ( struct IGamryPstat * PSTAT ) {
    HRESULT _hr = raw_Init(PSTAT);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryReadZ::Measure ( float Frequency, float Amplitude ) {
    HRESULT _hr = raw_Measure(Frequency, Amplitude);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryReadZ::Cook ( long * NumPoints, SAFEARRAY * * Data ) {
    HRESULT _hr = raw_Cook(NumPoints, Data);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryReadZ::SetSpeed ( enum gcREADZSPEED Speed ) {
    HRESULT _hr = raw_SetSpeed(Speed);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryReadZ::SetCycleLim ( long Min, long Max ) {
    HRESULT _hr = raw_SetCycleLim(Min, Max);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryReadZ::SetZmod ( float Zmod ) {
    HRESULT _hr = raw_SetZmod(Zmod);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline float IGamryReadZ::Vreal ( ) {
    float _result = 0;
    HRESULT _hr = raw_Vreal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float IGamryReadZ::Vimag ( ) {
    float _result = 0;
    HRESULT _hr = raw_Vimag(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float IGamryReadZ::Vsig ( ) {
    float _result = 0;
    HRESULT _hr = raw_Vsig(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float IGamryReadZ::Vdc ( ) {
    float _result = 0;
    HRESULT _hr = raw_Vdc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float IGamryReadZ::Ireal ( ) {
    float _result = 0;
    HRESULT _hr = raw_Ireal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float IGamryReadZ::Iimag ( ) {
    float _result = 0;
    HRESULT _hr = raw_Iimag(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float IGamryReadZ::Isig ( ) {
    float _result = 0;
    HRESULT _hr = raw_Isig(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float IGamryReadZ::Idc ( ) {
    float _result = 0;
    HRESULT _hr = raw_Idc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float IGamryReadZ::Zreal ( ) {
    float _result = 0;
    HRESULT _hr = raw_Zreal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float IGamryReadZ::Zimag ( ) {
    float _result = 0;
    HRESULT _hr = raw_Zimag(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float IGamryReadZ::Zsig ( ) {
    float _result = 0;
    HRESULT _hr = raw_Zsig(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float IGamryReadZ::Zfreq ( ) {
    float _result = 0;
    HRESULT _hr = raw_Zfreq(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float IGamryReadZ::Imod ( ) {
    float _result = 0;
    HRESULT _hr = raw_Imod(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float IGamryReadZ::Iphz ( ) {
    float _result = 0;
    HRESULT _hr = raw_Iphz(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float IGamryReadZ::Vmod ( ) {
    float _result = 0;
    HRESULT _hr = raw_Vmod(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float IGamryReadZ::Vphz ( ) {
    float _result = 0;
    HRESULT _hr = raw_Vphz(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float IGamryReadZ::Zmod ( ) {
    float _result = 0;
    HRESULT _hr = raw_Zmod(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float IGamryReadZ::Zphz ( ) {
    float _result = 0;
    HRESULT _hr = raw_Zphz(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float IGamryReadZ::Gain ( ) {
    float _result = 0;
    HRESULT _hr = raw_Gain(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float IGamryReadZ::VNoise ( ) {
    float _result = 0;
    HRESULT _hr = raw_VNoise(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float IGamryReadZ::INoise ( ) {
    float _result = 0;
    HRESULT _hr = raw_INoise(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float IGamryReadZ::IENoise ( ) {
    float _result = 0;
    HRESULT _hr = raw_IENoise(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IGamryReadZ::IERange ( ) {
    long _result = 0;
    HRESULT _hr = raw_IERange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IGamryReadZ::SetGain ( float Gain ) {
    HRESULT _hr = raw_SetGain(Gain);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryReadZ::SetVNoise ( float VNoise ) {
    HRESULT _hr = raw_SetVNoise(VNoise);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryReadZ::SetINoise ( float INoise ) {
    HRESULT _hr = raw_SetINoise(INoise);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryReadZ::SetIENoise ( float IENoise ) {
    HRESULT _hr = raw_SetIENoise(IENoise);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryReadZ::SetIdc ( float Idc ) {
    HRESULT _hr = raw_SetIdc(Idc);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IGamryReadZ::StatusMessage ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_StatusMessage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IGamryReadZ::Stop ( ) {
    HRESULT _hr = raw_Stop();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IGamryReadZAe wrapper method implementations
//

inline HRESULT IGamryReadZAe::Init ( struct IGamryPC5Pstat * PSTAT ) {
    HRESULT _hr = raw_Init(PSTAT);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryReadZAe::Measure ( float Frequency, float Amplitude, long OnChannels ) {
    HRESULT _hr = raw_Measure(Frequency, Amplitude, OnChannels);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryReadZAe::Cook ( long * NumPoints, SAFEARRAY * * Data ) {
    HRESULT _hr = raw_Cook(NumPoints, Data);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryReadZAe::SetSpeed ( enum gcREADZSPEED Speed ) {
    HRESULT _hr = raw_SetSpeed(Speed);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryReadZAe::SetCycleLim ( long Min, long Max ) {
    HRESULT _hr = raw_SetCycleLim(Min, Max);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryReadZAe::SetZmod ( long Channel, float Zmod ) {
    HRESULT _hr = raw_SetZmod(Channel, Zmod);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline float IGamryReadZAe::Vreal ( long Channel ) {
    float _result = 0;
    HRESULT _hr = raw_Vreal(Channel, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float IGamryReadZAe::Vimag ( long Channel ) {
    float _result = 0;
    HRESULT _hr = raw_Vimag(Channel, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float IGamryReadZAe::Vsig ( long Channel ) {
    float _result = 0;
    HRESULT _hr = raw_Vsig(Channel, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float IGamryReadZAe::Vdc ( long Channel ) {
    float _result = 0;
    HRESULT _hr = raw_Vdc(Channel, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float IGamryReadZAe::Ireal ( long Channel ) {
    float _result = 0;
    HRESULT _hr = raw_Ireal(Channel, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float IGamryReadZAe::Iimag ( long Channel ) {
    float _result = 0;
    HRESULT _hr = raw_Iimag(Channel, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float IGamryReadZAe::Isig ( long Channel ) {
    float _result = 0;
    HRESULT _hr = raw_Isig(Channel, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float IGamryReadZAe::Idc ( long Channel ) {
    float _result = 0;
    HRESULT _hr = raw_Idc(Channel, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float IGamryReadZAe::Zreal ( long Channel ) {
    float _result = 0;
    HRESULT _hr = raw_Zreal(Channel, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float IGamryReadZAe::Zimag ( long Channel ) {
    float _result = 0;
    HRESULT _hr = raw_Zimag(Channel, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float IGamryReadZAe::Zsig ( long Channel ) {
    float _result = 0;
    HRESULT _hr = raw_Zsig(Channel, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float IGamryReadZAe::Zfreq ( ) {
    float _result = 0;
    HRESULT _hr = raw_Zfreq(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float IGamryReadZAe::Imod ( long Channel ) {
    float _result = 0;
    HRESULT _hr = raw_Imod(Channel, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float IGamryReadZAe::Iphz ( long Channel ) {
    float _result = 0;
    HRESULT _hr = raw_Iphz(Channel, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float IGamryReadZAe::Vmod ( long Channel ) {
    float _result = 0;
    HRESULT _hr = raw_Vmod(Channel, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float IGamryReadZAe::Vphz ( long Channel ) {
    float _result = 0;
    HRESULT _hr = raw_Vphz(Channel, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float IGamryReadZAe::Zmod ( long Channel ) {
    float _result = 0;
    HRESULT _hr = raw_Zmod(Channel, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float IGamryReadZAe::Zphz ( long Channel ) {
    float _result = 0;
    HRESULT _hr = raw_Zphz(Channel, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float IGamryReadZAe::Gain ( ) {
    float _result = 0;
    HRESULT _hr = raw_Gain(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float IGamryReadZAe::VNoise ( ) {
    float _result = 0;
    HRESULT _hr = raw_VNoise(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float IGamryReadZAe::INoise ( ) {
    float _result = 0;
    HRESULT _hr = raw_INoise(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float IGamryReadZAe::IENoise ( ) {
    float _result = 0;
    HRESULT _hr = raw_IENoise(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IGamryReadZAe::IERange ( ) {
    long _result = 0;
    HRESULT _hr = raw_IERange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IGamryReadZAe::SetGain ( float Gain ) {
    HRESULT _hr = raw_SetGain(Gain);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryReadZAe::SetVNoise ( float VNoise ) {
    HRESULT _hr = raw_SetVNoise(VNoise);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryReadZAe::SetINoise ( float INoise ) {
    HRESULT _hr = raw_SetINoise(INoise);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryReadZAe::SetIENoise ( float IENoise ) {
    HRESULT _hr = raw_SetIENoise(IENoise);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryReadZAe::SetIdc ( long Channel, float Idc ) {
    HRESULT _hr = raw_SetIdc(Channel, Idc);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IGamryReadZAe::StatusMessage ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_StatusMessage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IGamryReadZAe::Stop ( ) {
    HRESULT _hr = raw_Stop();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IGamryFC350Load wrapper method implementations
//

inline HRESULT IGamryFC350Load::Init ( struct IGamryPstat * PSTAT ) {
    HRESULT _hr = raw_Init(PSTAT);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IGamryDiagnostic wrapper method implementations
//

inline HRESULT IGamryDiagnostic::Init ( struct IGamryPstat * PSTAT ) {
    HRESULT _hr = raw_Init(PSTAT);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDiagnostic::PokeDword ( long Address, long Value ) {
    HRESULT _hr = raw_PokeDword(Address, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IGamryDiagnostic::PeekDword ( long Address ) {
    long _result = 0;
    HRESULT _hr = raw_PeekDword(Address, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IGamryDiagnostic::PokeWord ( long Address, short Value ) {
    HRESULT _hr = raw_PokeWord(Address, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline short IGamryDiagnostic::PeekWord ( long Address ) {
    short _result = 0;
    HRESULT _hr = raw_PeekWord(Address, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IGamryDiagnostic::PokeByte ( long Address, unsigned char Value ) {
    HRESULT _hr = raw_PokeByte(Address, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline unsigned char IGamryDiagnostic::PeekByte ( long Address ) {
    unsigned char _result = 0;
    HRESULT _hr = raw_PeekByte(Address, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IGamryDiagnostic::TestModeSampling ( long NumberOfSamples, long SampleInterval, long SignalInterval, long Control, float Start, float Stop, long NumberOfCycles, long StartStop, SAFEARRAY * * lplpI_ADCSafeArray, SAFEARRAY * * lplpE_ADCSafeArray, SAFEARRAY * * lplpA_ADCSafeArray, SAFEARRAY * * lplpSignalSafeArray, SAFEARRAY * * lplpTimeCountSafeArray ) {
    HRESULT _hr = raw_TestModeSampling(NumberOfSamples, SampleInterval, SignalInterval, Control, Start, Stop, NumberOfCycles, StartStop, lplpI_ADCSafeArray, lplpE_ADCSafeArray, lplpA_ADCSafeArray, lplpSignalSafeArray, lplpTimeCountSafeArray);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDiagnostic::ReadSystemIdentity ( long Subsystem, unsigned short * ModelNo, int * Family, unsigned char * RevisionNumber, unsigned char * AssemblyNumber, unsigned short * SecurityCode, BSTR * SerialNo, BSTR * Version, BSTR * ModelName ) {
    HRESULT _hr = raw_ReadSystemIdentity(Subsystem, ModelNo, Family, RevisionNumber, AssemblyNumber, SecurityCode, SerialNo, Version, ModelName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDiagnostic::WriteSystemIdentity ( long Subsystem, unsigned short ModelNo, int Family, unsigned char RevisionNumber, unsigned char AssemblyNumber, unsigned short SecurityCode, BSTR * SerialNo, BSTR * Version, BSTR * ModelName ) {
    HRESULT _hr = raw_WriteSystemIdentity(Subsystem, ModelNo, Family, RevisionNumber, AssemblyNumber, SecurityCode, SerialNo, Version, ModelName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDiagnostic::FirmwareUpdate ( LPSTR File, int UpdateType, long IsTestFramework ) {
    HRESULT _hr = raw_FirmwareUpdate(File, UpdateType, IsTestFramework);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDiagnostic::InitializeNvmCalib ( ) {
    HRESULT _hr = raw_InitializeNvmCalib();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDiagnostic::ReadFirmwareVersion ( long Subsystem, BSTR * Version ) {
    HRESULT _hr = raw_ReadFirmwareVersion(Subsystem, Version);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDiagnostic::ReadInstrumentLabel ( BSTR * InstrumentLabel ) {
    HRESULT _hr = raw_ReadInstrumentLabel(InstrumentLabel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDiagnostic::WriteInstrumentLabel ( BSTR * InstrumentLabel ) {
    HRESULT _hr = raw_WriteInstrumentLabel(InstrumentLabel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGamryDiagnostic::InitByHandle ( long Handle ) {
    HRESULT _hr = raw_InitByHandle(Handle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// dispinterface _IGamryReadZEvents wrapper method implementations
//

inline HRESULT _IGamryReadZEvents::OnDataAvailable ( ) {
    return _com_dispatch_method(this, 0x1, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline HRESULT _IGamryReadZEvents::OnDataDone ( enum gcREADZSTATUS Status ) {
    return _com_dispatch_method(this, 0x2, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003", Status);
}
