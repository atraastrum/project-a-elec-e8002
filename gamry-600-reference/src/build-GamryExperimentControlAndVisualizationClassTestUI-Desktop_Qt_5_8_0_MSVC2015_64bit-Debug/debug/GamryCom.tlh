// Created by Microsoft (R) C/C++ Compiler Version 14.00.24215.1 (9f8d330a).
//
// e:\prgs\project-a\project-a-elec-e8002\gamry-600-reference\src\build-gamryexperimentcontrolandvisualizationclasstestui-desktop_qt_5_8_0_msvc2015_64bit-debug\debug\GamryCom.tlh
//
// C++ source equivalent of Win32 type library BD962F0D-A990-4823-9CF5-284D1CDD9C6D
// compiler-generated file created 04/06/17 at 12:53:32 - DO NOT EDIT!

#pragma once
#pragma pack(push, 8)

#include <comdef.h>

//
// Forward references and typedefs
//

struct __declspec(uuid("bd962f0d-a990-4823-9cf5-284d1cdd9c6d"))
/* LIBID */ __GAMRYCOMLib;
enum gcCELLSTATE;
enum gcCTRLMODE;
enum gcGROUND;
enum gcSENSESPEED;
enum gcIRUPTMODE;
enum gcEUCALCMODE;
enum gcMODELNO;
enum gcIESTABILITY;
enum gcDTAQCHRONO_TYPE;
enum gcDTAQEISSTATUS;
enum gcREADZSTATUS;
enum gcREADZSPEED;
enum gcFC350IDIVISOR;
enum gcACQUISITIONMODE;
enum gcSAMPLINGMODE;
enum gcESA2FILTERTYPE;
enum gcCABLEIDSELECT;
enum gcCOMPLIANCEVOLTAGE;
enum gcPWRSIGNALMODE;
struct __declspec(uuid("0eed3bcb-8d9d-433d-972f-8ee99cd7a2be"))
/* dual interface */ IGamryDeviceList;
struct __declspec(uuid("96594f51-edf6-4861-9363-47bbe955c56b"))
/* dual interface */ IGamryMux;
enum gcMUXCELLSTATE;
struct __declspec(uuid("5261d0e5-8497-44ed-bf36-fde075f295d0"))
/* dispinterface */ _IGamryQcmEvents;
struct __declspec(uuid("a4b99fc1-bed5-475e-88d6-a1df9b1f3e78"))
/* dual interface */ IGamryQcm;
enum gcQCM_FITMODE;
enum gcQCM_SCANMODE;
struct __declspec(uuid("2e5819da-9bd1-4c92-8795-ef972e10adf8"))
/* dual interface */ IGamrySignal;
struct __declspec(uuid("378405e9-1105-4980-9feb-12f5e96c6b84"))
/* dispinterface */ _IGamryDeviceListEvents;
struct __declspec(uuid("d609cf91-3461-41e4-abe8-e0cb864a26b5"))
/* dual interface */ IGamryPstat;
enum gcICONVENTION;
enum gcACHSELECT;
enum gcELECTROMETER;
enum gcTHERMOSELECT;
struct __declspec(uuid("5f7dbe67-b3d8-424a-907d-6a81cd6ab66f"))
/* dispinterface */ _IGamryPstatEvents;
struct __declspec(uuid("0b70e778-3610-46ac-9804-14e730a6bbbd"))
/* dual interface */ IGamryPC5Pstat;
struct __declspec(uuid("670b7cce-3b46-4048-be0a-572437777c91"))
/* dual interface */ IGamryPC6Pstat;
struct __declspec(uuid("4e013a33-5dfa-403c-9abf-a39ce5d4fcf5"))
/* dual interface */ IGamryAe;
struct __declspec(uuid("f7095f44-69cb-4079-a58e-fa0805ef1e4f"))
/* interface */ IGamryDtaq;
struct __declspec(uuid("b06696d9-67f3-4bbc-a2fa-41080e742568"))
/* dispinterface */ _IGamryDtaqEvents;
struct __declspec(uuid("689cd0f4-4d2e-4bea-9fb1-0bbcbf6e1d41"))
/* dual interface */ IGamryDtaqUniv;
struct __declspec(uuid("ef7c1bff-02bc-48da-af06-f56518bfb417"))
/* dual interface */ IGamryDtaqIv;
struct __declspec(uuid("c6162665-5603-424b-b876-0f820e6f2b81"))
/* dual interface */ IGamryDtaqEis;
struct __declspec(uuid("cfc8d703-550c-40b7-bd12-9cc5f0962116"))
/* dual interface */ IGamryDtaqEisAe;
struct __declspec(uuid("32a87391-8e52-4528-aa4b-a501b63054e5"))
/* dual interface */ IGamryDtaqCpiv;
struct __declspec(uuid("9623c29c-2e90-40b8-8223-4cb7f351c09d"))
/* dual interface */ IGamryDtaqCpivAe;
struct __declspec(uuid("fab4f573-60aa-40e2-8143-e447fdca97bc"))
/* dual interface */ IGamrySignalUniv;
struct __declspec(uuid("b720e20a-7e1e-4563-b9d0-39136be748f2"))
/* dual interface */ IGamrySignalArray;
enum gcSIGTWEAKSTYLE;
struct __declspec(uuid("30df174b-5b20-4433-a98b-9a195d4a98c6"))
/* dual interface */ IGamrySignalArray2;
enum gcBIASMODE;
struct __declspec(uuid("41f18fb2-95f8-4638-b357-3103d56e1d3f"))
/* dual interface */ IGamryDtaqCiiv;
struct __declspec(uuid("0e842696-2ad1-4f7b-8981-7fc06c2fdbe6"))
/* dual interface */ IGamryDtaqCiivAe;
struct __declspec(uuid("96fc1359-e472-4b70-b519-0b46fad3c0f0"))
/* dual interface */ IGamryDtaqChrono;
struct __declspec(uuid("a8ae4c12-95e5-45a7-be50-d72e7043e57e"))
/* dual interface */ IGamryDtaqIvt;
struct __declspec(uuid("cff4e15b-dbb7-430e-9cb1-7f47527b2e13"))
/* dual interface */ IGamryDtaqIvtAe;
struct __declspec(uuid("a8afe9ac-851d-42fe-8698-9d23462d3d22"))
/* dual interface */ IGamryDtaqOcv;
struct __declspec(uuid("a6972b7e-35d3-40da-9892-a51e2771e970"))
/* dual interface */ IGamryDtaqOcvAe;
struct __declspec(uuid("b5b07c83-e274-4f2a-a827-d95e9952e51b"))
/* dual interface */ IGamryDtaqPv;
struct __declspec(uuid("aa68f37f-9cb4-4eb1-b23e-ee964ac9cf8d"))
/* dual interface */ IGamryDtaqRcv;
struct __declspec(uuid("f41b101a-4cef-4d7f-b39a-85af386d3262"))
/* dual interface */ IGamryDtaqRcvAe;
struct __declspec(uuid("5fc64222-df54-4132-9f17-49b77c94cf93"))
/* dual interface */ IGamryDtaqSqwv;
struct __declspec(uuid("9c06be51-0b68-4e51-9518-49f8a2a35755"))
/* dual interface */ IGamryDtaqPwr;
struct __declspec(uuid("db71d3d1-6de6-432c-946d-8c46594618b3"))
/* dual interface */ IGamryDtaqPwrAe;
struct __declspec(uuid("2cf63b4b-6446-41c2-84f4-dcb844c208d5"))
/* dual interface */ IGamryDtaqEsa2;
struct __declspec(uuid("1f7e3fb3-742c-4459-a2b1-8c934d638353"))
/* dual interface */ IGamryDtaqEfm;
struct __declspec(uuid("dab47c04-df55-4391-9574-9d181985dfd2"))
/* dual interface */ IGamrySignalConst;
struct __declspec(uuid("0e7ae82c-0436-4167-9ede-effb8f0a2950"))
/* dual interface */ IGamrySignalPwrConst;
struct __declspec(uuid("24e0d554-a2a8-4741-bc27-e58bb3af1e20"))
/* dual interface */ IGamrySignalStep;
struct __declspec(uuid("1791f4d6-a0df-4246-aff1-afb428074fa9"))
/* dual interface */ IGamrySignalPwrStep;
struct __declspec(uuid("4a47f9c5-39cd-4bb6-adc9-0d8961a15e54"))
/* dual interface */ IGamrySignalRamp;
struct __declspec(uuid("5c0fdd79-713a-49d1-be41-0bd90b98482f"))
/* dual interface */ IGamrySignalPwrRamp;
struct __declspec(uuid("16b5330d-0bad-4c34-ada4-d942a64d6583"))
/* dual interface */ IGamrySignalDstep;
struct __declspec(uuid("70cf56eb-7bc3-465f-80bb-0dc402c740ee"))
/* dual interface */ IGamrySignalMstep;
struct __declspec(uuid("22c2cd75-5cb2-4736-a9e2-df3e12dc4388"))
/* dual interface */ IGamrySignalPv;
struct __declspec(uuid("68dfb1f2-43cb-41c8-b5e6-ae73554bfa7d"))
/* dual interface */ IGamrySignalRupdn;
struct __declspec(uuid("11051d1f-02bf-4b64-9d01-b5332ce2246f"))
/* dual interface */ IGamrySignalUpdn;
struct __declspec(uuid("c6d6c5e1-1871-491d-a019-1a61ec7bb363"))
/* dual interface */ IGamrySignalSqwv;
struct __declspec(uuid("47790267-164b-4bf1-8353-1f5416d02a89"))
/* dual interface */ IGamryReadZ;
struct __declspec(uuid("001b39ca-5b0a-42c2-9bff-eae53283ba08"))
/* dual interface */ IGamryReadZAe;
struct __declspec(uuid("f4fb0845-1054-490a-ad28-152f858156d8"))
/* dual interface */ IGamryFC350Load;
struct __declspec(uuid("e157287c-93f5-4b5f-a4cc-8d5f51e9b79c"))
/* dual interface */ IGamryDiagnostic;
struct /* coclass */ GamryDeviceList;
struct /* coclass */ GamryPstat;
struct /* coclass */ GamryPC5Pstat;
struct /* coclass */ GamryPC6Pstat;
struct /* coclass */ GamryAe;
struct /* coclass */ GamryDtaqUniv;
struct /* coclass */ GamryDtaqIv;
struct /* coclass */ GamryDtaqCpiv;
struct /* coclass */ GamryDtaqCpivAe;
struct /* coclass */ GamrySignalUniv;
struct /* coclass */ GamrySignalArray;
struct /* coclass */ GamrySignalArray2;
struct /* coclass */ GamryDtaqEis;
struct /* coclass */ GamryDtaqEisAe;
struct /* coclass */ GamryDtaqCiiv;
struct /* coclass */ GamryDtaqCiivAe;
struct /* coclass */ GamryDtaqChrono;
struct /* coclass */ GamryDtaqIvt;
struct /* coclass */ GamryDtaqIvtAe;
struct /* coclass */ GamryDtaqOcv;
struct /* coclass */ GamryDtaqOcvAe;
struct /* coclass */ GamryDtaqPv;
struct /* coclass */ GamryDtaqRcv;
struct /* coclass */ GamryDtaqRcvAe;
struct /* coclass */ GamryDtaqSqwv;
struct /* coclass */ GamryDtaqPwr;
struct /* coclass */ GamryDtaqPwrAe;
struct /* coclass */ GamrySignalConst;
struct /* coclass */ GamrySignalPwrConst;
struct /* coclass */ GamrySignalStep;
struct /* coclass */ GamrySignalPwrStep;
struct /* coclass */ GamrySignalRamp;
struct /* coclass */ GamrySignalPwrRamp;
struct /* coclass */ GamrySignalDstep;
struct /* coclass */ GamrySignalMstep;
struct /* coclass */ GamrySignalPv;
struct /* coclass */ GamrySignalRupdn;
struct /* coclass */ GamrySignalUpdn;
struct /* coclass */ GamrySignalSqwv;
struct __declspec(uuid("0a9f9158-61b8-40b4-854b-dd328089f7e3"))
/* dispinterface */ _IGamryReadZEvents;
struct /* coclass */ GamryReadZ;
struct /* coclass */ GamryReadZAe;
struct /* coclass */ GamryFC350Load;
struct /* coclass */ GamryDtaqEsa2;
struct /* coclass */ GamryDtaqEfm;
struct /* coclass */ GamryMux;
struct /* coclass */ GamryDiagnostic;
struct /* coclass */ GamryQcm;

//
// Smart pointer typedef declarations
//

_COM_SMARTPTR_TYPEDEF(IGamryDeviceList, __uuidof(IGamryDeviceList));
_COM_SMARTPTR_TYPEDEF(IGamryMux, __uuidof(IGamryMux));
_COM_SMARTPTR_TYPEDEF(_IGamryQcmEvents, __uuidof(_IGamryQcmEvents));
_COM_SMARTPTR_TYPEDEF(IGamryQcm, __uuidof(IGamryQcm));
_COM_SMARTPTR_TYPEDEF(IGamrySignal, __uuidof(IGamrySignal));
_COM_SMARTPTR_TYPEDEF(_IGamryDeviceListEvents, __uuidof(_IGamryDeviceListEvents));
_COM_SMARTPTR_TYPEDEF(IGamryPstat, __uuidof(IGamryPstat));
_COM_SMARTPTR_TYPEDEF(_IGamryPstatEvents, __uuidof(_IGamryPstatEvents));
_COM_SMARTPTR_TYPEDEF(IGamryPC5Pstat, __uuidof(IGamryPC5Pstat));
_COM_SMARTPTR_TYPEDEF(IGamryPC6Pstat, __uuidof(IGamryPC6Pstat));
_COM_SMARTPTR_TYPEDEF(IGamryAe, __uuidof(IGamryAe));
_COM_SMARTPTR_TYPEDEF(IGamryDtaq, __uuidof(IGamryDtaq));
_COM_SMARTPTR_TYPEDEF(_IGamryDtaqEvents, __uuidof(_IGamryDtaqEvents));
_COM_SMARTPTR_TYPEDEF(IGamryDtaqUniv, __uuidof(IGamryDtaqUniv));
_COM_SMARTPTR_TYPEDEF(IGamryDtaqIv, __uuidof(IGamryDtaqIv));
_COM_SMARTPTR_TYPEDEF(IGamryDtaqEis, __uuidof(IGamryDtaqEis));
_COM_SMARTPTR_TYPEDEF(IGamryDtaqEisAe, __uuidof(IGamryDtaqEisAe));
_COM_SMARTPTR_TYPEDEF(IGamryDtaqCpiv, __uuidof(IGamryDtaqCpiv));
_COM_SMARTPTR_TYPEDEF(IGamryDtaqCpivAe, __uuidof(IGamryDtaqCpivAe));
_COM_SMARTPTR_TYPEDEF(IGamrySignalUniv, __uuidof(IGamrySignalUniv));
_COM_SMARTPTR_TYPEDEF(IGamrySignalArray, __uuidof(IGamrySignalArray));
_COM_SMARTPTR_TYPEDEF(IGamrySignalArray2, __uuidof(IGamrySignalArray2));
_COM_SMARTPTR_TYPEDEF(IGamryDtaqCiiv, __uuidof(IGamryDtaqCiiv));
_COM_SMARTPTR_TYPEDEF(IGamryDtaqCiivAe, __uuidof(IGamryDtaqCiivAe));
_COM_SMARTPTR_TYPEDEF(IGamryDtaqChrono, __uuidof(IGamryDtaqChrono));
_COM_SMARTPTR_TYPEDEF(IGamryDtaqIvt, __uuidof(IGamryDtaqIvt));
_COM_SMARTPTR_TYPEDEF(IGamryDtaqIvtAe, __uuidof(IGamryDtaqIvtAe));
_COM_SMARTPTR_TYPEDEF(IGamryDtaqOcv, __uuidof(IGamryDtaqOcv));
_COM_SMARTPTR_TYPEDEF(IGamryDtaqOcvAe, __uuidof(IGamryDtaqOcvAe));
_COM_SMARTPTR_TYPEDEF(IGamryDtaqPv, __uuidof(IGamryDtaqPv));
_COM_SMARTPTR_TYPEDEF(IGamryDtaqRcv, __uuidof(IGamryDtaqRcv));
_COM_SMARTPTR_TYPEDEF(IGamryDtaqRcvAe, __uuidof(IGamryDtaqRcvAe));
_COM_SMARTPTR_TYPEDEF(IGamryDtaqSqwv, __uuidof(IGamryDtaqSqwv));
_COM_SMARTPTR_TYPEDEF(IGamryDtaqPwr, __uuidof(IGamryDtaqPwr));
_COM_SMARTPTR_TYPEDEF(IGamryDtaqPwrAe, __uuidof(IGamryDtaqPwrAe));
_COM_SMARTPTR_TYPEDEF(IGamryDtaqEsa2, __uuidof(IGamryDtaqEsa2));
_COM_SMARTPTR_TYPEDEF(IGamryDtaqEfm, __uuidof(IGamryDtaqEfm));
_COM_SMARTPTR_TYPEDEF(IGamrySignalConst, __uuidof(IGamrySignalConst));
_COM_SMARTPTR_TYPEDEF(IGamrySignalPwrConst, __uuidof(IGamrySignalPwrConst));
_COM_SMARTPTR_TYPEDEF(IGamrySignalStep, __uuidof(IGamrySignalStep));
_COM_SMARTPTR_TYPEDEF(IGamrySignalPwrStep, __uuidof(IGamrySignalPwrStep));
_COM_SMARTPTR_TYPEDEF(IGamrySignalRamp, __uuidof(IGamrySignalRamp));
_COM_SMARTPTR_TYPEDEF(IGamrySignalPwrRamp, __uuidof(IGamrySignalPwrRamp));
_COM_SMARTPTR_TYPEDEF(IGamrySignalDstep, __uuidof(IGamrySignalDstep));
_COM_SMARTPTR_TYPEDEF(IGamrySignalMstep, __uuidof(IGamrySignalMstep));
_COM_SMARTPTR_TYPEDEF(IGamrySignalPv, __uuidof(IGamrySignalPv));
_COM_SMARTPTR_TYPEDEF(IGamrySignalRupdn, __uuidof(IGamrySignalRupdn));
_COM_SMARTPTR_TYPEDEF(IGamrySignalUpdn, __uuidof(IGamrySignalUpdn));
_COM_SMARTPTR_TYPEDEF(IGamrySignalSqwv, __uuidof(IGamrySignalSqwv));
_COM_SMARTPTR_TYPEDEF(IGamryReadZ, __uuidof(IGamryReadZ));
_COM_SMARTPTR_TYPEDEF(IGamryReadZAe, __uuidof(IGamryReadZAe));
_COM_SMARTPTR_TYPEDEF(IGamryFC350Load, __uuidof(IGamryFC350Load));
_COM_SMARTPTR_TYPEDEF(IGamryDiagnostic, __uuidof(IGamryDiagnostic));
_COM_SMARTPTR_TYPEDEF(_IGamryReadZEvents, __uuidof(_IGamryReadZEvents));

//
// Type library items
//

enum gcCELLSTATE
{
    CellOff = 0,
    CellOn = 1,
    CellMon = 2,
    CellRelay = 3
};

enum gcCTRLMODE
{
    GstatMode = 0,
    PstatMode = 1,
    ZRAMode = 2,
    FRAMode = 3
};

enum gcGROUND
{
    Float = 0,
    Earth = 1
};

enum gcSENSESPEED
{
    SenseFast = 0,
    SenseSlow = 1
};

enum gcIRUPTMODE
{
    IruptOff = 0,
    IruptNorm = 1,
    IruptClfg = 2
};

enum gcEUCALCMODE
{
    EuNone = 0,
    EuExtrap = 1,
    EuAverage = 2
};

enum gcMODELNO
{
    PC4300 = 32,
    PC4750 = 33,
    PCI4300 = 34,
    PCI4750 = 35,
    FAS1 = 16,
    FC350 = 17,
    FAS2 = 18,
    FCI350 = 19,
    PC5600 = 4,
    PCI4G300 = 36,
    PCI4G750 = 37,
    FCIG350 = 21,
    REF3000 = 5,
    REF30K = 6,
    PC61000 = 48
};

enum gcIESTABILITY
{
    StabilityFast = 0,
    StabilityMedFast = 1,
    StabilityNorm = 2,
    StabilitySlow = 3
};

enum gcDTAQCHRONO_TYPE
{
    ChronoAmp = 1,
    ChronoCoul = 2,
    ChronoPot = 3
};

enum gcDTAQEISSTATUS
{
    DtaqEISStatusInvalid = 0,
    DtaqEISStatusDelay = 1,
    DtaqEISStatusMeasuring = 2,
    DtaqEISStatusMeasOk = 3,
    DtaqEISStatusCommErr = 4,
    DtaqEISStatusTimeout = 5,
    DtaqEISStatusCycleLim = 6,
    DtaqEISStatusControl = 7,
    DtaqEISStatusOverrun = 8,
    DtaqEISStatusOverrange = 9,
    DtaqEISStatusOverrunQ = 10,
    DtaqEISStatusRetry = 11
};

enum gcREADZSTATUS
{
    ReadZStatusOk = 0,
    ReadZStatusRetry = 1,
    ReadZStatusError = 2
};

enum gcREADZSPEED
{
    ReadZSpeedFast = 0,
    ReadZSpeedNorm = 1,
    ReadZSpeedLow = 2
};

enum gcFC350IDIVISOR
{
    FC350IDivisor1 = 0,
    FC350IDivisor10 = 1,
    FC350IDivisor100 = 2
};

enum gcACQUISITIONMODE
{
    AcqModeFast = 0,
    AcqModeDSP = 1
};

enum gcSAMPLINGMODE
{
    SamplingModeFast = 0,
    SamplingModeNoiseReject = 1,
    SamplingModeSurface = 2
};

enum gcESA2FILTERTYPE
{
    Esa2_FILTNONE = -1,
    Esa2_FIR20 = 0,
    Esa2_FIR40 = 1,
    Esa2_FIR60 = 2,
    Esa2_KAISER2 = 3,
    Esa2_KAISER5 = 4,
    Esa2_KAISER10 = 5
};

enum gcCABLEIDSELECT
{
    CableIdSelectMain = 0,
    CableIdSelectPwr = 1,
    CableIdSelectAe = 2
};

enum gcCOMPLIANCEVOLTAGE
{
    ComplianceLow = 0,
    ComplianceHigh = 1
};

enum gcPWRSIGNALMODE
{
    CurrentDischarge = 0,
    Resistance = 1,
    Power = 2,
    Voltage = 3,
    CurrentCharge = 4
};

struct __declspec(uuid("0eed3bcb-8d9d-433d-972f-8ee99cd7a2be"))
IGamryDeviceList : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    long Count ( );
    SAFEARRAY * EnumSections ( );
    SAFEARRAY * EnumLabels ( );
    HRESULT SetIterationMask (
        unsigned long Mask );
    SAFEARRAY * EnumHandles ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall raw_EnumSections (
        /*[out,retval]*/ SAFEARRAY * * Sections ) = 0;
      virtual HRESULT __stdcall raw_EnumLabels (
        /*[out,retval]*/ SAFEARRAY * * Labels ) = 0;
      virtual HRESULT __stdcall raw_SetIterationMask (
        /*[in]*/ unsigned long Mask ) = 0;
      virtual HRESULT __stdcall raw_EnumHandles (
        /*[out,retval]*/ SAFEARRAY * * Handles ) = 0;
};

enum __declspec(uuid("fdc890d8-b73a-4bcf-b851-0048f878810e"))
gcMUXCELLSTATE
{
    MuxCellOpen = 0,
    MuxCellLocal = 1,
    MuxCellShort = 2
};

struct __declspec(uuid("96594f51-edf6-4861-9363-47bbe955c56b"))
IGamryMux : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT Init (
        int MuxNumber );
    HRESULT Open (
        VARIANT_BOOL Reset );
    HRESULT Close ( );
    unsigned short Version ( );
    short Number ( );
    short Cell ( );
    short SetCell (
        short Channel );
    short Aux ( );
    short SetAux (
        short Channel );
    enum gcMUXCELLSTATE OffMode (
        short Channel );
    HRESULT SetOffMode (
        short Channel,
        enum gcMUXCELLSTATE CellState );
    HRESULT SetOffModeMask (
        unsigned short Mask,
        enum gcMUXCELLSTATE CellState );
    float Dac (
        short Channel );
    HRESULT SetDac (
        short Channel,
        float Voltage );
    HRESULT SetDacMask (
        unsigned short Mask,
        float Voltage );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Init (
        /*[in]*/ int MuxNumber ) = 0;
      virtual HRESULT __stdcall raw_Open (
        /*[in]*/ VARIANT_BOOL Reset ) = 0;
      virtual HRESULT __stdcall raw_Close ( ) = 0;
      virtual HRESULT __stdcall raw_Version (
        /*[out,retval]*/ unsigned short * Version ) = 0;
      virtual HRESULT __stdcall raw_Number (
        /*[out,retval]*/ short * Number ) = 0;
      virtual HRESULT __stdcall raw_Cell (
        /*[out,retval]*/ short * Channel ) = 0;
      virtual HRESULT __stdcall raw_SetCell (
        /*[in]*/ short Channel,
        /*[out,retval]*/ short * ChannelSet ) = 0;
      virtual HRESULT __stdcall raw_Aux (
        /*[out,retval]*/ short * Channel ) = 0;
      virtual HRESULT __stdcall raw_SetAux (
        /*[in]*/ short Channel,
        /*[out,retval]*/ short * ChannelSet ) = 0;
      virtual HRESULT __stdcall raw_OffMode (
        /*[in]*/ short Channel,
        /*[out,retval]*/ enum gcMUXCELLSTATE * CellStateOut ) = 0;
      virtual HRESULT __stdcall raw_SetOffMode (
        /*[in]*/ short Channel,
        /*[in]*/ enum gcMUXCELLSTATE CellState ) = 0;
      virtual HRESULT __stdcall raw_SetOffModeMask (
        /*[in]*/ unsigned short Mask,
        /*[in]*/ enum gcMUXCELLSTATE CellState ) = 0;
      virtual HRESULT __stdcall raw_Dac (
        /*[in]*/ short Channel,
        /*[out,retval]*/ float * Voltage ) = 0;
      virtual HRESULT __stdcall raw_SetDac (
        /*[in]*/ short Channel,
        /*[in]*/ float Voltage ) = 0;
      virtual HRESULT __stdcall raw_SetDacMask (
        /*[in]*/ unsigned short Mask,
        /*[in]*/ float Voltage ) = 0;
};

struct __declspec(uuid("5261d0e5-8497-44ed-bf36-fde075f295d0"))
_IGamryQcmEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT OnDataAvailable ( );
    HRESULT OnDataDone ( );
};

enum __declspec(uuid("3d7b3b82-d720-49e2-833c-dbfd8ff578f8"))
gcQCM_FITMODE
{
    QcmFitModeSolution = 0,
    QcmFitModeAir = 1
};

enum __declspec(uuid("faa2eecd-6514-49a6-a646-0b47471a219a"))
gcQCM_SCANMODE
{
    QcmModeIdle = 0,
    QcmModeFastScan = 11,
    QcmModeSingleScan = 12
};

struct __declspec(uuid("a4b99fc1-bed5-475e-88d6-a1df9b1f3e78"))
IGamryQcm : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT Init ( );
    HRESULT Open (
        enum gcQCM_FITMODE Fitmode );
    HRESULT Close ( );
    _bstr_t SerialNo ( );
    HRESULT StartScan (
        enum gcQCM_SCANMODE Scanmode );
    HRESULT StopScan ( );
    double SetAreaOfOverlap (
        double Area );
    double SetCenterFrequency (
        double Hz );
    double SetFrequencyWidth (
        double Hz );
    double SetFrequencyStep (
        double Hz );
    double SetCalibration (
        double CalibrationFactor );
    short SetAmplitude (
        short Percentage );
    short SetDamping (
        short DampingLevel );
    double fs ( );
    double fp ( );
    double AcquisitionTime ( );
    double FitTime ( );
    double FitChiSquared ( );
    VARIANT_BOOL FitAcceptable ( );
    VARIANT_BOOL ScanError ( );
    double CenterFrequency ( );
    double FrequencyWidth ( );
    double FrequencyStart ( );
    double FrequencyEnd ( );
    HRESULT Spectrum (
        SAFEARRAY * * Frequency,
        SAFEARRAY * * Magnitude,
        SAFEARRAY * * FrequencyFit,
        SAFEARRAY * * MagnitudeFit );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Init ( ) = 0;
      virtual HRESULT __stdcall raw_Open (
        /*[in]*/ enum gcQCM_FITMODE Fitmode ) = 0;
      virtual HRESULT __stdcall raw_Close ( ) = 0;
      virtual HRESULT __stdcall raw_SerialNo (
        /*[out,retval]*/ BSTR * SerialNo ) = 0;
      virtual HRESULT __stdcall raw_StartScan (
        /*[in]*/ enum gcQCM_SCANMODE Scanmode ) = 0;
      virtual HRESULT __stdcall raw_StopScan ( ) = 0;
      virtual HRESULT __stdcall raw_SetAreaOfOverlap (
        /*[in]*/ double Area,
        /*[out,retval]*/ double * AreaSet ) = 0;
      virtual HRESULT __stdcall raw_SetCenterFrequency (
        /*[in]*/ double Hz,
        /*[out,retval]*/ double * HzSet ) = 0;
      virtual HRESULT __stdcall raw_SetFrequencyWidth (
        /*[in]*/ double Hz,
        /*[out,retval]*/ double * HzSet ) = 0;
      virtual HRESULT __stdcall raw_SetFrequencyStep (
        /*[in]*/ double Hz,
        /*[out,retval]*/ double * HzSet ) = 0;
      virtual HRESULT __stdcall raw_SetCalibration (
        /*[in]*/ double CalibrationFactor,
        /*[out,retval]*/ double * CalibrationFactorSet ) = 0;
      virtual HRESULT __stdcall raw_SetAmplitude (
        /*[in]*/ short Percentage,
        /*[out,retval]*/ short * PercentageSet ) = 0;
      virtual HRESULT __stdcall raw_SetDamping (
        /*[in]*/ short DampingLevel,
        /*[out,retval]*/ short * DampingLevelSet ) = 0;
      virtual HRESULT __stdcall raw_fs (
        /*[out,retval]*/ double * MHz ) = 0;
      virtual HRESULT __stdcall raw_fp (
        /*[out,retval]*/ double * MHz ) = 0;
      virtual HRESULT __stdcall raw_AcquisitionTime (
        /*[out,retval]*/ double * Seconds ) = 0;
      virtual HRESULT __stdcall raw_FitTime (
        /*[out,retval]*/ double * Seconds ) = 0;
      virtual HRESULT __stdcall raw_FitChiSquared (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall raw_FitAcceptable (
        /*[out,retval]*/ VARIANT_BOOL * isAcceptable ) = 0;
      virtual HRESULT __stdcall raw_ScanError (
        /*[out,retval]*/ VARIANT_BOOL * errorOccurred ) = 0;
      virtual HRESULT __stdcall raw_CenterFrequency (
        /*[out,retval]*/ double * Hz ) = 0;
      virtual HRESULT __stdcall raw_FrequencyWidth (
        /*[out,retval]*/ double * Hz ) = 0;
      virtual HRESULT __stdcall raw_FrequencyStart (
        /*[out,retval]*/ double * Hz ) = 0;
      virtual HRESULT __stdcall raw_FrequencyEnd (
        /*[out,retval]*/ double * Hz ) = 0;
      virtual HRESULT __stdcall raw_Spectrum (
        /*[out]*/ SAFEARRAY * * Frequency,
        /*[out]*/ SAFEARRAY * * Magnitude,
        /*[out]*/ SAFEARRAY * * FrequencyFit,
        /*[out]*/ SAFEARRAY * * MagnitudeFit ) = 0;
};

struct __declspec(uuid("2e5819da-9bd1-4c92-8795-ef972e10adf8"))
IGamrySignal : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    long _lpSignal ( );
    HRESULT SetAcquisitionControl (
        enum gcACQUISITIONMODE AcqMode,
        const _variant_t & AcqBasePeriod,
        const _variant_t & SampleRate,
        const _variant_t & DutyCycle );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw__lpSignal (
        /*[out,retval]*/ long * lpSignal ) = 0;
      virtual HRESULT __stdcall raw_SetAcquisitionControl (
        /*[in]*/ enum gcACQUISITIONMODE AcqMode,
        /*[in]*/ VARIANT AcqBasePeriod,
        /*[in]*/ VARIANT SampleRate,
        /*[in]*/ VARIANT DutyCycle ) = 0;
};

struct __declspec(uuid("378405e9-1105-4980-9feb-12f5e96c6b84"))
_IGamryDeviceListEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT OnDeviceListChanged ( );
};

enum __declspec(uuid("5fae8fa0-cc5a-4fb8-b972-caa447dfd946"))
gcICONVENTION
{
    Cathodic = 0,
    Anodic = 1
};

enum __declspec(uuid("6347db76-5be7-45c9-a96c-2fb9435d1306"))
gcACHSELECT
{
    BNC = 0,
    PSTAT = 1,
    CAPSTAT = 2,
    THERMO = 3,
    GND = 4
};

enum __declspec(uuid("f9aea373-b60e-479d-82ec-2ea4e94645cc"))
gcELECTROMETER
{
    ElectrometerNormal = 0,
    ElectrometerHighV = 1
};

enum __declspec(uuid("19aa83d3-085f-43b0-8064-f92867a89648"))
gcTHERMOSELECT
{
    ThermoVoltage = 0,
    ThermoDegreesC = 1
};

struct __declspec(uuid("d609cf91-3461-41e4-abe8-e0cb864a26b5"))
IGamryPstat : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT Init (
        _bstr_t Section );
    long _lpPstat ( );
    long _lpPstatLicense ( );
    _bstr_t Label ( );
    enum gcMODELNO ModelNo ( );
    _bstr_t SerialNo ( );
    HRESULT Open ( );
    HRESULT Close (
        VARIANT_BOOL Safe );
    HRESULT SetSignal (
        struct IGamrySignal * Signal );
    HRESULT InitSignal ( );
    HRESULT SetVoltage (
        float Voltage );
    float SetBias (
        float Voltage );
    float SetScan (
        float Voltage );
    long SetScanRange (
        const _variant_t & ScanRange );
    long TestScanRange (
        float Voltage1,
        float Voltage2 );
    float GstatRatio (
        long IERange );
    HRESULT SetIruptMode (
        enum gcIRUPTMODE FbMode,
        enum gcEUCALCMODE EuMode,
        float Timer,
        float Eoc,
        float Gain );
    _bstr_t CalDate (
        long CalType );
    HRESULT SetCalDate (
        long CalType,
        BSTR * CalDate );
    enum gcCELLSTATE Cell ( );
    enum gcCELLSTATE SetCell (
        enum gcCELLSTATE CellState );
    enum gcCTRLMODE CtrlMode ( );
    enum gcCTRLMODE SetCtrlMode (
        enum gcCTRLMODE CtrlMode );
    long CASpeed ( );
    long SetCASpeed (
        const _variant_t & CASpeed );
    long TestCASpeed (
        float Frequency );
    enum gcIESTABILITY IEStability ( );
    enum gcIESTABILITY SetIEStability (
        enum gcIESTABILITY Stability );
    enum gcICONVENTION IConvention ( );
    enum gcICONVENTION SetIConvention (
        enum gcICONVENTION Convention );
    enum gcGROUND Ground ( );
    enum gcGROUND SetGround (
        enum gcGROUND Ground );
    enum gcSENSESPEED SenseSpeed ( );
    enum gcSENSESPEED SetSenseSpeed (
        enum gcSENSESPEED SenseSpeed );
    VARIANT_BOOL SenseSpeedMode ( );
    VARIANT_BOOL SetSenseSpeedMode (
        VARIANT_BOOL SenseSpeedMode );
    VARIANT_BOOL PosFeedEnable ( );
    VARIANT_BOOL SetPosFeedEnable (
        VARIANT_BOOL PosFeedEnable );
    float PosFeedResistance ( );
    float SetPosFeedResistance (
        float PosFeedResistance );
    float AnalogOut ( );
    float SetAnalogOut (
        float Out );
    short DigitalOut ( );
    short SetDigitalOut (
        short Out,
        short Mask );
    short DigitalIn ( );
    VARIANT_BOOL DDSEnable ( );
    VARIANT_BOOL SetDDSEnable (
        VARIANT_BOOL DDSEnable );
    float DDSAmpl ( );
    float SetDDSAmpl (
        float DDSAmpl );
    long DDSAmplBits ( );
    long SetDDSAmplBits (
        long DDSAmplBits );
    double DDSFreq ( );
    double SetDDSFreq (
        double DDSFreq );
    float FreqLimitUpper ( );
    float FreqLimitLower ( );
    long IERange ( );
    long SetIERange (
        const _variant_t & Range );
    long TestIERange (
        float Current );
    long TestIERangeAC (
        float CurrentAC,
        float VoltageAC,
        float CurrentDC,
        float VoltageDC,
        float Frequency );
    VARIANT_BOOL IERangeMode ( );
    VARIANT_BOOL SetIERangeMode (
        VARIANT_BOOL RangeMode );
    long IERangeLowerLimit ( );
    long SetIERangeLowerLimit (
        long RangeLowerLimit );
    float IEResistor (
        long Range );
    long FindIERange ( );
    long VchRange ( );
    long SetVchRange (
        const _variant_t & Range );
    long TestVchRange (
        float Voltage );
    long TestVchRangeAC (
        float Voltage,
        float Frequency );
    VARIANT_BOOL VchRangeMode ( );
    VARIANT_BOOL SetVchRangeMode (
        VARIANT_BOOL RangeMode );
    float VchOffset ( );
    float SetVchOffset (
        float Offset );
    VARIANT_BOOL VchOffsetEnable ( );
    VARIANT_BOOL SetVchOffsetEnable (
        VARIANT_BOOL OffsetEnable );
    long VchFilter ( );
    long SetVchFilter (
        const _variant_t & Filter );
    long TestVchFilter (
        float Frequency );
    long FindVchRange ( );
    float MeasureV ( );
    long IchRange ( );
    long SetIchRange (
        const _variant_t & Range );
    long TestIchRange (
        float Voltage );
    long TestIchRangeAC (
        float Voltage,
        float Frequency );
    VARIANT_BOOL IchRangeMode ( );
    VARIANT_BOOL SetIchRangeMode (
        VARIANT_BOOL RangeMode );
    float IchOffset ( );
    float SetIchOffset (
        float Offset );
    VARIANT_BOOL IchOffsetEnable ( );
    VARIANT_BOOL SetIchOffsetEnable (
        VARIANT_BOOL OffsetEnable );
    long IchFilter ( );
    long SetIchFilter (
        const _variant_t & Filter );
    long TestIchFilter (
        float Frequency );
    long FindIchRange ( );
    float MeasureI ( );
    long AchRange ( );
    long SetAchRange (
        const _variant_t & Range );
    long TestAchRange (
        float Voltage );
    long TestAchRangeAC (
        float Voltage,
        float Frequency );
    VARIANT_BOOL AchRangeMode ( );
    VARIANT_BOOL SetAchRangeMode (
        VARIANT_BOOL RangeMode );
    float AchOffset ( );
    float SetAchOffset (
        float Offset );
    VARIANT_BOOL AchOffsetEnable ( );
    VARIANT_BOOL SetAchOffsetEnable (
        VARIANT_BOOL OffsetEnable );
    long AchFilter ( );
    long SetAchFilter (
        const _variant_t & Filter );
    long TestAchFilter (
        float Frequency );
    long FindAchRange ( );
    float MeasureA ( );
    float ScanLimitAC ( );
    long FC350VRange ( );
    long SetFC350VRange (
        const _variant_t & Range );
    long TestFC350VRange (
        float Voltage );
    float FC350VRangeMultiplier ( );
    enum gcFC350IDIVISOR FC350IDivisor ( );
    enum gcFC350IDIVISOR SetFC350IDivisor (
        enum gcFC350IDIVISOR Divisor );
    VARIANT_BOOL ExtSrceEnable ( );
    VARIANT_BOOL SetExtSrceEnable (
        VARIANT_BOOL ExtSrceEnable );
    VARIANT_BOOL TestIsOpen ( );
    _bstr_t State ( );
    HRESULT CalibKey (
        BSTR * Key,
        long * Count,
        SAFEARRAY * * CalibConst );
    HRESULT SetCalibKey (
        BSTR * Key,
        SAFEARRAY * * CalibConst );
    HRESULT WriteCalib ( );
    long TestIERangeST (
        float SampleTime );
    long SetIERangeST (
        float SampleTime );
    enum gcACHSELECT SetAchSelect (
        enum gcACHSELECT Input );
    enum gcACHSELECT AchSelect ( );
    VARIANT_BOOL Has (
        BSTR * Capability );
    long CableId (
        enum gcCABLEIDSELECT CableIdSelect );
    enum gcCOMPLIANCEVOLTAGE SetComplianceVoltage (
        enum gcCOMPLIANCEVOLTAGE ComplianceSelect );
    enum gcCOMPLIANCEVOLTAGE ComplianceVoltage ( );
    enum gcELECTROMETER SetElectrometer (
        enum gcELECTROMETER ElectrometerSelect );
    enum gcELECTROMETER Electrometer ( );
    HRESULT SetMasterSerfEnable (
        VARIANT_BOOL Enable );
    enum gcTHERMOSELECT SetThermoSelect (
        enum gcTHERMOSELECT Setting );
    enum gcTHERMOSELECT ThermoSelect ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Init (
        /*[in]*/ BSTR Section ) = 0;
      virtual HRESULT __stdcall raw__lpPstat (
        /*[out,retval]*/ long * lpPstat ) = 0;
      virtual HRESULT __stdcall raw__lpPstatLicense (
        /*[out,retval]*/ long * lpPstatLicense ) = 0;
      virtual HRESULT __stdcall raw_Label (
        /*[out,retval]*/ BSTR * Label ) = 0;
      virtual HRESULT __stdcall raw_ModelNo (
        /*[out,retval]*/ enum gcMODELNO * ModelNo ) = 0;
      virtual HRESULT __stdcall raw_SerialNo (
        /*[out,retval]*/ BSTR * SerialNo ) = 0;
      virtual HRESULT __stdcall raw_Open ( ) = 0;
      virtual HRESULT __stdcall raw_Close (
        /*[in]*/ VARIANT_BOOL Safe ) = 0;
      virtual HRESULT __stdcall raw_SetSignal (
        /*[in]*/ struct IGamrySignal * Signal ) = 0;
      virtual HRESULT __stdcall raw_InitSignal ( ) = 0;
      virtual HRESULT __stdcall raw_SetVoltage (
        /*[in]*/ float Voltage ) = 0;
      virtual HRESULT __stdcall raw_SetBias (
        /*[in]*/ float Voltage,
        /*[out,retval]*/ float * BiasSet ) = 0;
      virtual HRESULT __stdcall raw_SetScan (
        /*[in]*/ float Voltage,
        /*[out,retval]*/ float * VoltageSet ) = 0;
      virtual HRESULT __stdcall raw_SetScanRange (
        /*[in]*/ VARIANT ScanRange,
        /*[out,retval]*/ long * ScanRangeSet ) = 0;
      virtual HRESULT __stdcall raw_TestScanRange (
        /*[in]*/ float Voltage1,
        /*[in]*/ float Voltage2,
        /*[out,retval]*/ long * ScanRange ) = 0;
      virtual HRESULT __stdcall raw_GstatRatio (
        /*[in]*/ long IERange,
        /*[out,retval]*/ float * Ratio ) = 0;
      virtual HRESULT __stdcall raw_SetIruptMode (
        /*[in]*/ enum gcIRUPTMODE FbMode,
        /*[in]*/ enum gcEUCALCMODE EuMode,
        /*[in]*/ float Timer,
        /*[in]*/ float Eoc,
        /*[in]*/ float Gain ) = 0;
      virtual HRESULT __stdcall raw_CalDate (
        /*[in]*/ long CalType,
        /*[out,retval]*/ BSTR * CalDate ) = 0;
      virtual HRESULT __stdcall raw_SetCalDate (
        /*[in]*/ long CalType,
        /*[in]*/ BSTR * CalDate ) = 0;
      virtual HRESULT __stdcall raw_Cell (
        /*[out,retval]*/ enum gcCELLSTATE * CellState ) = 0;
      virtual HRESULT __stdcall raw_SetCell (
        /*[in]*/ enum gcCELLSTATE CellState,
        /*[out,retval]*/ enum gcCELLSTATE * CellStateSet ) = 0;
      virtual HRESULT __stdcall raw_CtrlMode (
        /*[out,retval]*/ enum gcCTRLMODE * CtrlMode ) = 0;
      virtual HRESULT __stdcall raw_SetCtrlMode (
        /*[in]*/ enum gcCTRLMODE CtrlMode,
        /*[out,retval]*/ enum gcCTRLMODE * CtrlModeSet ) = 0;
      virtual HRESULT __stdcall raw_CASpeed (
        /*[out,retval]*/ long * CASpeed ) = 0;
      virtual HRESULT __stdcall raw_SetCASpeed (
        /*[in]*/ VARIANT CASpeed,
        /*[out,retval]*/ long * CASpeedSet ) = 0;
      virtual HRESULT __stdcall raw_TestCASpeed (
        /*[in]*/ float Frequency,
        /*[out,retval]*/ long * CASpeed ) = 0;
      virtual HRESULT __stdcall raw_IEStability (
        /*[out,retval]*/ enum gcIESTABILITY * Stability ) = 0;
      virtual HRESULT __stdcall raw_SetIEStability (
        /*[in]*/ enum gcIESTABILITY Stability,
        /*[out,retval]*/ enum gcIESTABILITY * StabilitySet ) = 0;
      virtual HRESULT __stdcall raw_IConvention (
        /*[out,retval]*/ enum gcICONVENTION * Convention ) = 0;
      virtual HRESULT __stdcall raw_SetIConvention (
        /*[in]*/ enum gcICONVENTION Convention,
        /*[out,retval]*/ enum gcICONVENTION * ConventionSet ) = 0;
      virtual HRESULT __stdcall raw_Ground (
        /*[out,retval]*/ enum gcGROUND * Ground ) = 0;
      virtual HRESULT __stdcall raw_SetGround (
        /*[in]*/ enum gcGROUND Ground,
        /*[out,retval]*/ enum gcGROUND * GroundSet ) = 0;
      virtual HRESULT __stdcall raw_SenseSpeed (
        /*[out,retval]*/ enum gcSENSESPEED * SenseSpeed ) = 0;
      virtual HRESULT __stdcall raw_SetSenseSpeed (
        /*[in]*/ enum gcSENSESPEED SenseSpeed,
        /*[out,retval]*/ enum gcSENSESPEED * SenseSpeedSet ) = 0;
      virtual HRESULT __stdcall raw_SenseSpeedMode (
        /*[out,retval]*/ VARIANT_BOOL * SenseSpeedMode ) = 0;
      virtual HRESULT __stdcall raw_SetSenseSpeedMode (
        /*[in]*/ VARIANT_BOOL SenseSpeedMode,
        /*[out,retval]*/ VARIANT_BOOL * SenseSpeedModeSet ) = 0;
      virtual HRESULT __stdcall raw_PosFeedEnable (
        /*[out,retval]*/ VARIANT_BOOL * PosFeedEnable ) = 0;
      virtual HRESULT __stdcall raw_SetPosFeedEnable (
        /*[in]*/ VARIANT_BOOL PosFeedEnable,
        /*[out,retval]*/ VARIANT_BOOL * PosFeedEnableSet ) = 0;
      virtual HRESULT __stdcall raw_PosFeedResistance (
        /*[out,retval]*/ float * PosFeedResistance ) = 0;
      virtual HRESULT __stdcall raw_SetPosFeedResistance (
        /*[in]*/ float PosFeedResistance,
        /*[out,retval]*/ float * PosFeedResistanceSet ) = 0;
      virtual HRESULT __stdcall raw_AnalogOut (
        /*[out,retval]*/ float * Out ) = 0;
      virtual HRESULT __stdcall raw_SetAnalogOut (
        /*[in]*/ float Out,
        /*[out,retval]*/ float * OutSet ) = 0;
      virtual HRESULT __stdcall raw_DigitalOut (
        /*[out,retval]*/ short * Out ) = 0;
      virtual HRESULT __stdcall raw_SetDigitalOut (
        /*[in]*/ short Out,
        /*[in]*/ short Mask,
        /*[out,retval]*/ short * OutSet ) = 0;
      virtual HRESULT __stdcall raw_DigitalIn (
        /*[out,retval]*/ short * In ) = 0;
      virtual HRESULT __stdcall raw_DDSEnable (
        /*[out,retval]*/ VARIANT_BOOL * DDSEnable ) = 0;
      virtual HRESULT __stdcall raw_SetDDSEnable (
        /*[in]*/ VARIANT_BOOL DDSEnable,
        /*[out,retval]*/ VARIANT_BOOL * DDSEnableSet ) = 0;
      virtual HRESULT __stdcall raw_DDSAmpl (
        /*[out,retval]*/ float * DDSAmpl ) = 0;
      virtual HRESULT __stdcall raw_SetDDSAmpl (
        /*[in]*/ float DDSAmpl,
        /*[out,retval]*/ float * DDSAmplSet ) = 0;
      virtual HRESULT __stdcall raw_DDSAmplBits (
        /*[out,retval]*/ long * DDSAmplBits ) = 0;
      virtual HRESULT __stdcall raw_SetDDSAmplBits (
        /*[in]*/ long DDSAmplBits,
        /*[out,retval]*/ long * DDSAmplBitsSet ) = 0;
      virtual HRESULT __stdcall raw_DDSFreq (
        /*[out,retval]*/ double * DDSFreq ) = 0;
      virtual HRESULT __stdcall raw_SetDDSFreq (
        /*[in]*/ double DDSFreq,
        /*[out,retval]*/ double * DDSFreqSet ) = 0;
      virtual HRESULT __stdcall raw_FreqLimitUpper (
        /*[out,retval]*/ float * FreqLimitUpper ) = 0;
      virtual HRESULT __stdcall raw_FreqLimitLower (
        /*[out,retval]*/ float * FreqLimitLower ) = 0;
      virtual HRESULT __stdcall raw_IERange (
        /*[out,retval]*/ long * Range ) = 0;
      virtual HRESULT __stdcall raw_SetIERange (
        /*[in]*/ VARIANT Range,
        /*[out,retval]*/ long * RangeSet ) = 0;
      virtual HRESULT __stdcall raw_TestIERange (
        /*[in]*/ float Current,
        /*[out,retval]*/ long * Range ) = 0;
      virtual HRESULT __stdcall raw_TestIERangeAC (
        /*[in]*/ float CurrentAC,
        /*[in]*/ float VoltageAC,
        /*[in]*/ float CurrentDC,
        /*[in]*/ float VoltageDC,
        /*[in]*/ float Frequency,
        /*[out,retval]*/ long * Range ) = 0;
      virtual HRESULT __stdcall raw_IERangeMode (
        /*[out,retval]*/ VARIANT_BOOL * RangeMode ) = 0;
      virtual HRESULT __stdcall raw_SetIERangeMode (
        /*[in]*/ VARIANT_BOOL RangeMode,
        /*[out,retval]*/ VARIANT_BOOL * RangeModeSet ) = 0;
      virtual HRESULT __stdcall raw_IERangeLowerLimit (
        /*[out,retval]*/ long * RangeLowerLimit ) = 0;
      virtual HRESULT __stdcall raw_SetIERangeLowerLimit (
        /*[in]*/ long RangeLowerLimit,
        /*[out,retval]*/ long * RangeLowerLimitSet ) = 0;
      virtual HRESULT __stdcall raw_IEResistor (
        /*[in]*/ long Range,
        /*[out,retval]*/ float * Resistor ) = 0;
      virtual HRESULT __stdcall raw_FindIERange (
        /*[out,retval]*/ long * IERange ) = 0;
      virtual HRESULT __stdcall raw_VchRange (
        /*[out,retval]*/ long * Range ) = 0;
      virtual HRESULT __stdcall raw_SetVchRange (
        /*[in]*/ VARIANT Range,
        /*[out,retval]*/ long * RangeSet ) = 0;
      virtual HRESULT __stdcall raw_TestVchRange (
        /*[in]*/ float Voltage,
        /*[out,retval]*/ long * Range ) = 0;
      virtual HRESULT __stdcall raw_TestVchRangeAC (
        /*[in]*/ float Voltage,
        /*[in]*/ float Frequency,
        /*[out,retval]*/ long * Range ) = 0;
      virtual HRESULT __stdcall raw_VchRangeMode (
        /*[out,retval]*/ VARIANT_BOOL * RangeMode ) = 0;
      virtual HRESULT __stdcall raw_SetVchRangeMode (
        /*[in]*/ VARIANT_BOOL RangeMode,
        /*[out,retval]*/ VARIANT_BOOL * RangeModeSet ) = 0;
      virtual HRESULT __stdcall raw_VchOffset (
        /*[out,retval]*/ float * OffsetSet ) = 0;
      virtual HRESULT __stdcall raw_SetVchOffset (
        /*[in]*/ float Offset,
        /*[out,retval]*/ float * OffsetSet ) = 0;
      virtual HRESULT __stdcall raw_VchOffsetEnable (
        /*[out,retval]*/ VARIANT_BOOL * OffsetEnable ) = 0;
      virtual HRESULT __stdcall raw_SetVchOffsetEnable (
        /*[in]*/ VARIANT_BOOL OffsetEnable,
        /*[out,retval]*/ VARIANT_BOOL * OffsetEnableSet ) = 0;
      virtual HRESULT __stdcall raw_VchFilter (
        /*[out,retval]*/ long * Filter ) = 0;
      virtual HRESULT __stdcall raw_SetVchFilter (
        /*[in]*/ VARIANT Filter,
        /*[out,retval]*/ long * FilterSet ) = 0;
      virtual HRESULT __stdcall raw_TestVchFilter (
        /*[in]*/ float Frequency,
        /*[out,retval]*/ long * Filter ) = 0;
      virtual HRESULT __stdcall raw_FindVchRange (
        /*[out,retval]*/ long * VchRange ) = 0;
      virtual HRESULT __stdcall raw_MeasureV (
        /*[out,retval]*/ float * Voltage ) = 0;
      virtual HRESULT __stdcall raw_IchRange (
        /*[out,retval]*/ long * Range ) = 0;
      virtual HRESULT __stdcall raw_SetIchRange (
        /*[in]*/ VARIANT Range,
        /*[out,retval]*/ long * RangeSet ) = 0;
      virtual HRESULT __stdcall raw_TestIchRange (
        /*[in]*/ float Voltage,
        /*[out,retval]*/ long * Range ) = 0;
      virtual HRESULT __stdcall raw_TestIchRangeAC (
        /*[in]*/ float Voltage,
        /*[in]*/ float Frequency,
        /*[out,retval]*/ long * Range ) = 0;
      virtual HRESULT __stdcall raw_IchRangeMode (
        /*[out,retval]*/ VARIANT_BOOL * RangeMode ) = 0;
      virtual HRESULT __stdcall raw_SetIchRangeMode (
        /*[in]*/ VARIANT_BOOL RangeMode,
        /*[out,retval]*/ VARIANT_BOOL * RangeModeSet ) = 0;
      virtual HRESULT __stdcall raw_IchOffset (
        /*[out,retval]*/ float * OffsetSet ) = 0;
      virtual HRESULT __stdcall raw_SetIchOffset (
        /*[in]*/ float Offset,
        /*[out,retval]*/ float * OffsetSet ) = 0;
      virtual HRESULT __stdcall raw_IchOffsetEnable (
        /*[out,retval]*/ VARIANT_BOOL * OffsetEnable ) = 0;
      virtual HRESULT __stdcall raw_SetIchOffsetEnable (
        /*[in]*/ VARIANT_BOOL OffsetEnable,
        /*[out,retval]*/ VARIANT_BOOL * OffsetEnableSet ) = 0;
      virtual HRESULT __stdcall raw_IchFilter (
        /*[out,retval]*/ long * Filter ) = 0;
      virtual HRESULT __stdcall raw_SetIchFilter (
        /*[in]*/ VARIANT Filter,
        /*[out,retval]*/ long * FilterSet ) = 0;
      virtual HRESULT __stdcall raw_TestIchFilter (
        /*[in]*/ float Frequency,
        /*[out,retval]*/ long * Filter ) = 0;
      virtual HRESULT __stdcall raw_FindIchRange (
        /*[out,retval]*/ long * IchRange ) = 0;
      virtual HRESULT __stdcall raw_MeasureI (
        /*[out,retval]*/ float * Current ) = 0;
      virtual HRESULT __stdcall raw_AchRange (
        /*[out,retval]*/ long * Range ) = 0;
      virtual HRESULT __stdcall raw_SetAchRange (
        /*[in]*/ VARIANT Range,
        /*[out,retval]*/ long * RangeSet ) = 0;
      virtual HRESULT __stdcall raw_TestAchRange (
        /*[in]*/ float Voltage,
        /*[out,retval]*/ long * Range ) = 0;
      virtual HRESULT __stdcall raw_TestAchRangeAC (
        /*[in]*/ float Voltage,
        /*[in]*/ float Frequency,
        /*[out,retval]*/ long * Range ) = 0;
      virtual HRESULT __stdcall raw_AchRangeMode (
        /*[out,retval]*/ VARIANT_BOOL * RangeMode ) = 0;
      virtual HRESULT __stdcall raw_SetAchRangeMode (
        /*[in]*/ VARIANT_BOOL RangeMode,
        /*[out,retval]*/ VARIANT_BOOL * RangeModeSet ) = 0;
      virtual HRESULT __stdcall raw_AchOffset (
        /*[out,retval]*/ float * OffsetSet ) = 0;
      virtual HRESULT __stdcall raw_SetAchOffset (
        /*[in]*/ float Offset,
        /*[out,retval]*/ float * OffsetSet ) = 0;
      virtual HRESULT __stdcall raw_AchOffsetEnable (
        /*[out,retval]*/ VARIANT_BOOL * OffsetEnable ) = 0;
      virtual HRESULT __stdcall raw_SetAchOffsetEnable (
        /*[in]*/ VARIANT_BOOL OffsetEnable,
        /*[out,retval]*/ VARIANT_BOOL * OffsetEnableSet ) = 0;
      virtual HRESULT __stdcall raw_AchFilter (
        /*[out,retval]*/ long * Filter ) = 0;
      virtual HRESULT __stdcall raw_SetAchFilter (
        /*[in]*/ VARIANT Filter,
        /*[out,retval]*/ long * FilterSet ) = 0;
      virtual HRESULT __stdcall raw_TestAchFilter (
        /*[in]*/ float Frequency,
        /*[out,retval]*/ long * Filter ) = 0;
      virtual HRESULT __stdcall raw_FindAchRange (
        /*[out,retval]*/ long * AchRange ) = 0;
      virtual HRESULT __stdcall raw_MeasureA (
        /*[out,retval]*/ float * Voltage ) = 0;
      virtual HRESULT __stdcall raw_ScanLimitAC (
        /*[out,retval]*/ float * Limit ) = 0;
      virtual HRESULT __stdcall raw_FC350VRange (
        /*[out,retval]*/ long * Range ) = 0;
      virtual HRESULT __stdcall raw_SetFC350VRange (
        /*[in]*/ VARIANT Range,
        /*[out,retval]*/ long * RangeSet ) = 0;
      virtual HRESULT __stdcall raw_TestFC350VRange (
        /*[in]*/ float Voltage,
        /*[out,retval]*/ long * Range ) = 0;
      virtual HRESULT __stdcall raw_FC350VRangeMultiplier (
        /*[out,retval]*/ float * Multiplier ) = 0;
      virtual HRESULT __stdcall raw_FC350IDivisor (
        /*[out,retval]*/ enum gcFC350IDIVISOR * Divisor ) = 0;
      virtual HRESULT __stdcall raw_SetFC350IDivisor (
        /*[in]*/ enum gcFC350IDIVISOR Divisor,
        /*[out,retval]*/ enum gcFC350IDIVISOR * DivisorSet ) = 0;
      virtual HRESULT __stdcall raw_ExtSrceEnable (
        /*[out,retval]*/ VARIANT_BOOL * ExtSrceEnable ) = 0;
      virtual HRESULT __stdcall raw_SetExtSrceEnable (
        /*[in]*/ VARIANT_BOOL ExtSrceEnable,
        /*[out,retval]*/ VARIANT_BOOL * ExtSrceEnableSet ) = 0;
      virtual HRESULT __stdcall raw_TestIsOpen (
        /*[out,retval]*/ VARIANT_BOOL * Open ) = 0;
      virtual HRESULT __stdcall raw_State (
        /*[out,retval]*/ BSTR * State ) = 0;
      virtual HRESULT __stdcall raw_CalibKey (
        /*[in]*/ BSTR * Key,
        /*[in]*/ long * Count,
        /*[out]*/ SAFEARRAY * * CalibConst ) = 0;
      virtual HRESULT __stdcall raw_SetCalibKey (
        /*[in]*/ BSTR * Key,
        /*[in]*/ SAFEARRAY * * CalibConst ) = 0;
      virtual HRESULT __stdcall raw_WriteCalib ( ) = 0;
      virtual HRESULT __stdcall raw_TestIERangeST (
        /*[in]*/ float SampleTime,
        /*[out,retval]*/ long * Range ) = 0;
      virtual HRESULT __stdcall raw_SetIERangeST (
        /*[in]*/ float SampleTime,
        /*[out,retval]*/ long * RangeSet ) = 0;
      virtual HRESULT __stdcall raw_SetAchSelect (
        /*[in]*/ enum gcACHSELECT Input,
        /*[out,retval]*/ enum gcACHSELECT * InputSelected ) = 0;
      virtual HRESULT __stdcall raw_AchSelect (
        /*[out,retval]*/ enum gcACHSELECT * InputSelected ) = 0;
      virtual HRESULT __stdcall raw_Has (
        /*[in]*/ BSTR * Capability,
        /*[out,retval]*/ VARIANT_BOOL * HasValue ) = 0;
      virtual HRESULT __stdcall raw_CableId (
        /*[in]*/ enum gcCABLEIDSELECT CableIdSelect,
        /*[out,retval]*/ long * CableId ) = 0;
      virtual HRESULT __stdcall raw_SetComplianceVoltage (
        /*[in]*/ enum gcCOMPLIANCEVOLTAGE ComplianceSelect,
        /*[out,retval]*/ enum gcCOMPLIANCEVOLTAGE * ComplianceSet ) = 0;
      virtual HRESULT __stdcall raw_ComplianceVoltage (
        /*[out,retval]*/ enum gcCOMPLIANCEVOLTAGE * Compliance ) = 0;
      virtual HRESULT __stdcall raw_SetElectrometer (
        /*[in]*/ enum gcELECTROMETER ElectrometerSelect,
        /*[out,retval]*/ enum gcELECTROMETER * ElectrometerSet ) = 0;
      virtual HRESULT __stdcall raw_Electrometer (
        /*[out,retval]*/ enum gcELECTROMETER * Electrometer ) = 0;
      virtual HRESULT __stdcall raw_SetMasterSerfEnable (
        /*[in]*/ VARIANT_BOOL Enable ) = 0;
      virtual HRESULT __stdcall raw_SetThermoSelect (
        /*[in]*/ enum gcTHERMOSELECT Setting,
        /*[out,retval]*/ enum gcTHERMOSELECT * SettingSelected ) = 0;
      virtual HRESULT __stdcall raw_ThermoSelect (
        /*[out,retval]*/ enum gcTHERMOSELECT * SettingSelected ) = 0;
};

struct __declspec(uuid("5f7dbe67-b3d8-424a-907d-6a81cd6ab66f"))
_IGamryPstatEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT OnPstatUnavailable ( );
    HRESULT OnPstatClosed ( );
};

struct __declspec(uuid("0b70e778-3610-46ac-9804-14e730a6bbbd"))
IGamryPC5Pstat : IGamryPstat
{};

struct __declspec(uuid("670b7cce-3b46-4048-be0a-572437777c91"))
IGamryPC6Pstat : IGamryPstat
{};

struct __declspec(uuid("4e013a33-5dfa-403c-9abf-a39ce5d4fcf5"))
IGamryAe : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT Init (
        struct IGamryPstat * PSTAT );
    VARIANT_BOOL RangeMode (
        long Channel );
    VARIANT_BOOL SetRangeMode (
        long Channel,
        VARIANT_BOOL RangeMode );
    long Filter ( );
    long SetFilter (
        const _variant_t & Filter );
    long SetRange (
        long Channel,
        const _variant_t & Range );
    long Range (
        long Channel );
    float SetOffset (
        long Channel,
        float Offset );
    float Offset (
        long Channel );
    float FreqLimitUpper ( );
    float FreqLimitLower ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Init (
        /*[in]*/ struct IGamryPstat * PSTAT ) = 0;
      virtual HRESULT __stdcall raw_RangeMode (
        /*[in]*/ long Channel,
        /*[out,retval]*/ VARIANT_BOOL * RangeMode ) = 0;
      virtual HRESULT __stdcall raw_SetRangeMode (
        /*[in]*/ long Channel,
        /*[in]*/ VARIANT_BOOL RangeMode,
        /*[out,retval]*/ VARIANT_BOOL * RangeModeSet ) = 0;
      virtual HRESULT __stdcall raw_Filter (
        /*[out,retval]*/ long * Filter ) = 0;
      virtual HRESULT __stdcall raw_SetFilter (
        /*[in]*/ VARIANT Filter,
        /*[out,retval]*/ long * FilterSet ) = 0;
      virtual HRESULT __stdcall raw_SetRange (
        /*[in]*/ long Channel,
        /*[in]*/ VARIANT Range,
        /*[out,retval]*/ long * RangeSet ) = 0;
      virtual HRESULT __stdcall raw_Range (
        /*[in]*/ long Channel,
        /*[out,retval]*/ long * Range ) = 0;
      virtual HRESULT __stdcall raw_SetOffset (
        /*[in]*/ long Channel,
        /*[in]*/ float Offset,
        /*[out,retval]*/ float * OffsetSet ) = 0;
      virtual HRESULT __stdcall raw_Offset (
        /*[in]*/ long Channel,
        /*[out,retval]*/ float * Offset ) = 0;
      virtual HRESULT __stdcall raw_FreqLimitUpper (
        /*[out,retval]*/ float * FreqLimitUpper ) = 0;
      virtual HRESULT __stdcall raw_FreqLimitLower (
        /*[out,retval]*/ float * FreqLimitLower ) = 0;
};

struct __declspec(uuid("f7095f44-69cb-4079-a58e-fa0805ef1e4f"))
IGamryDtaq : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT Stop ( );
    HRESULT Run (
        VARIANT_BOOL AutoRun );
    HRESULT Cook (
        long * NumPoints,
        SAFEARRAY * * Data );
    HRESULT ManualPoint ( );
    HRESULT Pause ( );
    HRESULT Continue ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Stop ( ) = 0;
      virtual HRESULT __stdcall raw_Run (
        /*[in]*/ VARIANT_BOOL AutoRun ) = 0;
      virtual HRESULT __stdcall raw_Cook (
        /*[in,out]*/ long * NumPoints,
        /*[out]*/ SAFEARRAY * * Data ) = 0;
      virtual HRESULT __stdcall raw_ManualPoint ( ) = 0;
      virtual HRESULT __stdcall raw_Pause ( ) = 0;
      virtual HRESULT __stdcall raw_Continue ( ) = 0;
};

struct __declspec(uuid("b06696d9-67f3-4bbc-a2fa-41080e742568"))
_IGamryDtaqEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT OnDataAvailable ( );
    HRESULT OnDataDone ( );
};

struct __declspec(uuid("689cd0f4-4d2e-4bea-9fb1-0bbcbf6e1d41"))
IGamryDtaqUniv : IGamryDtaq
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT Init (
        struct IGamryPstat * PSTAT );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Init (
        /*[in]*/ struct IGamryPstat * PSTAT ) = 0;
};

struct __declspec(uuid("ef7c1bff-02bc-48da-af06-f56518bfb417"))
IGamryDtaqIv : IGamryDtaq
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT Init (
        struct IGamryPstat * PSTAT );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Init (
        /*[in]*/ struct IGamryPstat * PSTAT ) = 0;
};

struct __declspec(uuid("c6162665-5603-424b-b876-0f820e6f2b81"))
IGamryDtaqEis : IGamryDtaq
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT Init (
        struct IGamryPstat * PSTAT,
        float Frequency,
        float Amplitude,
        float Precision );
    HRESULT SetCycleMin (
        long CycleMin );
    HRESULT SetCycleMax (
        long CycleMax );
    HRESULT SetFilterOverride (
        VARIANT_BOOL FilterOverride );
    float Vreal ( );
    float Vimag ( );
    float Vsig ( );
    float Vdc ( );
    float Ireal ( );
    float Iimag ( );
    float Isig ( );
    float Idc ( );
    float Zreal ( );
    float Zimag ( );
    float Zsig ( );
    float Zfreq ( );
    HRESULT SetCycleLim (
        long Min,
        long Max );
    float Imod ( );
    float Iphz ( );
    float Vmod ( );
    float Vphz ( );
    float Zmod ( );
    float Zphz ( );
    short Result ( );
    VARIANT_BOOL OverIac ( );
    VARIANT_BOOL OverIdc ( );
    VARIANT_BOOL OverVac ( );
    VARIANT_BOOL OverVdc ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Init (
        /*[in]*/ struct IGamryPstat * PSTAT,
        /*[in]*/ float Frequency,
        /*[in]*/ float Amplitude,
        /*[in]*/ float Precision ) = 0;
      virtual HRESULT __stdcall raw_SetCycleMin (
        /*[in]*/ long CycleMin ) = 0;
      virtual HRESULT __stdcall raw_SetCycleMax (
        /*[in]*/ long CycleMax ) = 0;
      virtual HRESULT __stdcall raw_SetFilterOverride (
        /*[in]*/ VARIANT_BOOL FilterOverride ) = 0;
      virtual HRESULT __stdcall raw_Vreal (
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall raw_Vimag (
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall raw_Vsig (
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall raw_Vdc (
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall raw_Ireal (
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall raw_Iimag (
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall raw_Isig (
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall raw_Idc (
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall raw_Zreal (
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall raw_Zimag (
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall raw_Zsig (
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall raw_Zfreq (
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall raw_SetCycleLim (
        /*[in]*/ long Min,
        /*[in]*/ long Max ) = 0;
      virtual HRESULT __stdcall raw_Imod (
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall raw_Iphz (
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall raw_Vmod (
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall raw_Vphz (
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall raw_Zmod (
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall raw_Zphz (
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall raw_Result (
        /*[out,retval]*/ short * Result ) = 0;
      virtual HRESULT __stdcall raw_OverIac (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_OverIdc (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_OverVac (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_OverVdc (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
};

struct __declspec(uuid("cfc8d703-550c-40b7-bd12-9cc5f0962116"))
IGamryDtaqEisAe : IGamryDtaq
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT Init (
        struct IGamryPstat * PSTAT,
        float Frequency,
        float Amplitude,
        float Precision,
        long OnChannels );
    HRESULT SetCycleMin (
        long CycleMin );
    HRESULT SetCycleMax (
        long CycleMax );
    HRESULT SetFilterOverride (
        VARIANT_BOOL FilterOverride );
    float Vreal (
        long Channel );
    float Vimag (
        long Channel );
    float Vsig (
        long Channel );
    float Vdc (
        long Channel );
    float Ireal (
        long Channel );
    float Iimag (
        long Channel );
    float Isig (
        long Channel );
    float Idc (
        long Channel );
    float Zreal (
        long Channel );
    float Zimag (
        long Channel );
    float Zsig (
        long Channel );
    float Zfreq ( );
    HRESULT SetCycleLim (
        long Min,
        long Max );
    float Imod (
        long Channel );
    float Iphz (
        long Channel );
    float Vmod (
        long Channel );
    float Vphz (
        long Channel );
    float Zmod (
        long Channel );
    float Zphz (
        long Channel );
    short Result (
        long Channel );
    VARIANT_BOOL OverIac (
        long Channel );
    VARIANT_BOOL OverIdc (
        long Channel );
    VARIANT_BOOL OverVac (
        long Channel );
    VARIANT_BOOL OverVdc (
        long Channel );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Init (
        /*[in]*/ struct IGamryPstat * PSTAT,
        /*[in]*/ float Frequency,
        /*[in]*/ float Amplitude,
        /*[in]*/ float Precision,
        /*[in]*/ long OnChannels ) = 0;
      virtual HRESULT __stdcall raw_SetCycleMin (
        /*[in]*/ long CycleMin ) = 0;
      virtual HRESULT __stdcall raw_SetCycleMax (
        /*[in]*/ long CycleMax ) = 0;
      virtual HRESULT __stdcall raw_SetFilterOverride (
        /*[in]*/ VARIANT_BOOL FilterOverride ) = 0;
      virtual HRESULT __stdcall raw_Vreal (
        /*[in]*/ long Channel,
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall raw_Vimag (
        /*[in]*/ long Channel,
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall raw_Vsig (
        /*[in]*/ long Channel,
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall raw_Vdc (
        /*[in]*/ long Channel,
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall raw_Ireal (
        /*[in]*/ long Channel,
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall raw_Iimag (
        /*[in]*/ long Channel,
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall raw_Isig (
        /*[in]*/ long Channel,
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall raw_Idc (
        /*[in]*/ long Channel,
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall raw_Zreal (
        /*[in]*/ long Channel,
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall raw_Zimag (
        /*[in]*/ long Channel,
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall raw_Zsig (
        /*[in]*/ long Channel,
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall raw_Zfreq (
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall raw_SetCycleLim (
        /*[in]*/ long Min,
        /*[in]*/ long Max ) = 0;
      virtual HRESULT __stdcall raw_Imod (
        /*[in]*/ long Channel,
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall raw_Iphz (
        /*[in]*/ long Channel,
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall raw_Vmod (
        /*[in]*/ long Channel,
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall raw_Vphz (
        /*[in]*/ long Channel,
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall raw_Zmod (
        /*[in]*/ long Channel,
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall raw_Zphz (
        /*[in]*/ long Channel,
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall raw_Result (
        /*[in]*/ long Channel,
        /*[out,retval]*/ short * Result ) = 0;
      virtual HRESULT __stdcall raw_OverIac (
        /*[in]*/ long Channel,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_OverIdc (
        /*[in]*/ long Channel,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_OverVac (
        /*[in]*/ long Channel,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_OverVdc (
        /*[in]*/ long Channel,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
};

struct __declspec(uuid("32a87391-8e52-4528-aa4b-a501b63054e5"))
IGamryDtaqCpiv : IGamryDtaq
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT Init (
        struct IGamryPstat * PSTAT );
    HRESULT SetThreshIMin (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetThreshIMax (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetThreshVMin (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetThreshVMax (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetThreshTMin (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetThreshTMax (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopIMin (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopIMax (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopDIMin (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopDIMax (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopADIMin (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopADIMax (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopAtDelayIMin (
        long Value );
    HRESULT SetStopAtDelayIMax (
        long Value );
    HRESULT SetStopAtDelayDIMin (
        long Value );
    HRESULT SetStopAtDelayDIMax (
        long Value );
    HRESULT SetStopAtDelayADIMin (
        long Value );
    HRESULT SetStopAtDelayADIMax (
        long Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Init (
        /*[in]*/ struct IGamryPstat * PSTAT ) = 0;
      virtual HRESULT __stdcall raw_SetThreshIMin (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetThreshIMax (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetThreshVMin (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetThreshVMax (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetThreshTMin (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetThreshTMax (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopIMin (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopIMax (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopDIMin (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopDIMax (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopADIMin (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopADIMax (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayIMin (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayIMax (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayDIMin (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayDIMax (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayADIMin (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayADIMax (
        /*[in]*/ long Value ) = 0;
};

struct __declspec(uuid("9623c29c-2e90-40b8-8223-4cb7f351c09d"))
IGamryDtaqCpivAe : IGamryDtaq
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT Init (
        struct IGamryPstat * PSTAT );
    HRESULT SetThreshIMin (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetThreshIMax (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetThreshVMin (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetThreshVMax (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetThreshTMin (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetThreshTMax (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopIMin (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopIMax (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopDIMin (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopDIMax (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopADIMin (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopADIMax (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopAtDelayIMin (
        long Value );
    HRESULT SetStopAtDelayIMax (
        long Value );
    HRESULT SetStopAtDelayDIMin (
        long Value );
    HRESULT SetStopAtDelayDIMax (
        long Value );
    HRESULT SetStopAtDelayADIMin (
        long Value );
    HRESULT SetStopAtDelayADIMax (
        long Value );
    HRESULT AeSetThreshIMin (
        long Channel,
        VARIANT_BOOL Enable,
        float Value );
    HRESULT AeSetThreshIMax (
        long Channel,
        VARIANT_BOOL Enable,
        float Value );
    HRESULT AeSetThreshVMin (
        long Channel,
        VARIANT_BOOL Enable,
        float Value );
    HRESULT AeSetThreshVMax (
        long Channel,
        VARIANT_BOOL Enable,
        float Value );
    HRESULT AeSetThreshTMin (
        long Channel,
        VARIANT_BOOL Enable,
        float Value );
    HRESULT AeSetThreshTMax (
        long Channel,
        VARIANT_BOOL Enable,
        float Value );
    HRESULT AeSetStopVMin (
        long Channel,
        VARIANT_BOOL Enable,
        float Value );
    HRESULT AeSetStopVMax (
        long Channel,
        VARIANT_BOOL Enable,
        float Value );
    HRESULT AeSetStopDVMin (
        long Channel,
        VARIANT_BOOL Enable,
        float Value );
    HRESULT AeSetStopDVMax (
        long Channel,
        VARIANT_BOOL Enable,
        float Value );
    HRESULT AeSetStopADVMin (
        long Channel,
        VARIANT_BOOL Enable,
        float Value );
    HRESULT AeSetStopADVMax (
        long Channel,
        VARIANT_BOOL Enable,
        float Value );
    HRESULT AeSetStopAtDelayVMin (
        long Channel,
        long Value );
    HRESULT AeSetStopAtDelayVMax (
        long Channel,
        long Value );
    HRESULT AeSetStopAtDelayDVMin (
        long Channel,
        long Value );
    HRESULT AeSetStopAtDelayDVMax (
        long Channel,
        long Value );
    HRESULT AeSetStopAtDelayADVMin (
        long Channel,
        long Value );
    HRESULT AeSetStopAtDelayADVMax (
        long Channel,
        long Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Init (
        /*[in]*/ struct IGamryPstat * PSTAT ) = 0;
      virtual HRESULT __stdcall raw_SetThreshIMin (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetThreshIMax (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetThreshVMin (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetThreshVMax (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetThreshTMin (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetThreshTMax (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopIMin (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopIMax (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopDIMin (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopDIMax (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopADIMin (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopADIMax (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayIMin (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayIMax (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayDIMin (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayDIMax (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayADIMin (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayADIMax (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_AeSetThreshIMin (
        /*[in]*/ long Channel,
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_AeSetThreshIMax (
        /*[in]*/ long Channel,
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_AeSetThreshVMin (
        /*[in]*/ long Channel,
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_AeSetThreshVMax (
        /*[in]*/ long Channel,
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_AeSetThreshTMin (
        /*[in]*/ long Channel,
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_AeSetThreshTMax (
        /*[in]*/ long Channel,
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_AeSetStopVMin (
        /*[in]*/ long Channel,
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_AeSetStopVMax (
        /*[in]*/ long Channel,
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_AeSetStopDVMin (
        /*[in]*/ long Channel,
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_AeSetStopDVMax (
        /*[in]*/ long Channel,
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_AeSetStopADVMin (
        /*[in]*/ long Channel,
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_AeSetStopADVMax (
        /*[in]*/ long Channel,
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_AeSetStopAtDelayVMin (
        /*[in]*/ long Channel,
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_AeSetStopAtDelayVMax (
        /*[in]*/ long Channel,
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_AeSetStopAtDelayDVMin (
        /*[in]*/ long Channel,
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_AeSetStopAtDelayDVMax (
        /*[in]*/ long Channel,
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_AeSetStopAtDelayADVMin (
        /*[in]*/ long Channel,
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_AeSetStopAtDelayADVMax (
        /*[in]*/ long Channel,
        /*[in]*/ long Value ) = 0;
};

struct __declspec(uuid("fab4f573-60aa-40e2-8143-e447fdca97bc"))
IGamrySignalUniv : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT Init (
        struct IGamryPstat * PSTAT,
        float Vo,
        long Cycles,
        float SampleRate,
        long SamplesPerCycle,
        long Sections,
        SAFEARRAY * * SignalArray,
        SAFEARRAY * * SectionsArray,
        SAFEARRAY * * StepsArray,
        SAFEARRAY * * RLEArray,
        enum gcCTRLMODE CtrlMode );
    HRESULT Tweak (
        float Vo,
        long Cycles,
        float SampleRate,
        long SamplesPerCycle,
        long Sections,
        SAFEARRAY * * SignalArray,
        SAFEARRAY * * SectionsArray,
        SAFEARRAY * * StepsArray,
        SAFEARRAY * * RLEArray );
    HRESULT InitEx (
        struct IGamryPstat * PSTAT,
        float Vo,
        long Cycles,
        float SampleRate,
        long SamplesPerCycle,
        long Sections,
        SAFEARRAY * * SignalArray,
        SAFEARRAY * * SectionsArray,
        SAFEARRAY * * StepsArray,
        SAFEARRAY * * RLEArray,
        SAFEARRAY * * SectionCyclesArray,
        enum gcCTRLMODE CtrlMode );
    HRESULT TweakEx (
        float Vo,
        long Cycles,
        float SampleRate,
        long SamplesPerCycle,
        long Sections,
        SAFEARRAY * * SignalArray,
        SAFEARRAY * * SectionsArray,
        SAFEARRAY * * StepsArray,
        SAFEARRAY * * RLEArray,
        SAFEARRAY * * SectionCyclesArray );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Init (
        /*[in]*/ struct IGamryPstat * PSTAT,
        /*[in]*/ float Vo,
        /*[in]*/ long Cycles,
        /*[in]*/ float SampleRate,
        /*[in]*/ long SamplesPerCycle,
        /*[in]*/ long Sections,
        /*[in]*/ SAFEARRAY * * SignalArray,
        /*[in]*/ SAFEARRAY * * SectionsArray,
        /*[in]*/ SAFEARRAY * * StepsArray,
        /*[in]*/ SAFEARRAY * * RLEArray,
        /*[in]*/ enum gcCTRLMODE CtrlMode ) = 0;
      virtual HRESULT __stdcall raw_Tweak (
        /*[in]*/ float Vo,
        /*[in]*/ long Cycles,
        /*[in]*/ float SampleRate,
        /*[in]*/ long SamplesPerCycle,
        /*[in]*/ long Sections,
        /*[in]*/ SAFEARRAY * * SignalArray,
        /*[in]*/ SAFEARRAY * * SectionsArray,
        /*[in]*/ SAFEARRAY * * StepsArray,
        /*[in]*/ SAFEARRAY * * RLEArray ) = 0;
      virtual HRESULT __stdcall raw_InitEx (
        /*[in]*/ struct IGamryPstat * PSTAT,
        /*[in]*/ float Vo,
        /*[in]*/ long Cycles,
        /*[in]*/ float SampleRate,
        /*[in]*/ long SamplesPerCycle,
        /*[in]*/ long Sections,
        /*[in]*/ SAFEARRAY * * SignalArray,
        /*[in]*/ SAFEARRAY * * SectionsArray,
        /*[in]*/ SAFEARRAY * * StepsArray,
        /*[in]*/ SAFEARRAY * * RLEArray,
        /*[in]*/ SAFEARRAY * * SectionCyclesArray,
        /*[in]*/ enum gcCTRLMODE CtrlMode ) = 0;
      virtual HRESULT __stdcall raw_TweakEx (
        /*[in]*/ float Vo,
        /*[in]*/ long Cycles,
        /*[in]*/ float SampleRate,
        /*[in]*/ long SamplesPerCycle,
        /*[in]*/ long Sections,
        /*[in]*/ SAFEARRAY * * SignalArray,
        /*[in]*/ SAFEARRAY * * SectionsArray,
        /*[in]*/ SAFEARRAY * * StepsArray,
        /*[in]*/ SAFEARRAY * * RLEArray,
        /*[in]*/ SAFEARRAY * * SectionCyclesArray ) = 0;
};

enum __declspec(uuid("e3e703bc-d7a1-4e2f-8798-abf755edae3f"))
gcSIGTWEAKSTYLE
{
    SigTweakStyleReset = 0,
    SigTweakStyleContinue = 1,
    SigTweakStyleScale = 2
};

struct __declspec(uuid("b720e20a-7e1e-4563-b9d0-39136be748f2"))
IGamrySignalArray : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT Init (
        struct IGamryPstat * PSTAT,
        long Cycles,
        float SampleRate,
        long SamplesPerCycle,
        SAFEARRAY * * SignalArray,
        enum gcCTRLMODE CtrlMode );
    HRESULT Tweak (
        long Cycles,
        float SampleRate,
        long SamplesPerCycle,
        SAFEARRAY * * SignalArray,
        enum gcSIGTWEAKSTYLE Style );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Init (
        /*[in]*/ struct IGamryPstat * PSTAT,
        /*[in]*/ long Cycles,
        /*[in]*/ float SampleRate,
        /*[in]*/ long SamplesPerCycle,
        /*[in]*/ SAFEARRAY * * SignalArray,
        /*[in]*/ enum gcCTRLMODE CtrlMode ) = 0;
      virtual HRESULT __stdcall raw_Tweak (
        /*[in]*/ long Cycles,
        /*[in]*/ float SampleRate,
        /*[in]*/ long SamplesPerCycle,
        /*[in]*/ SAFEARRAY * * SignalArray,
        /*[in]*/ enum gcSIGTWEAKSTYLE Style ) = 0;
};

enum __declspec(uuid("1bdca794-65c6-4caa-9ff3-6e9ff897e6b4"))
gcBIASMODE
{
    BiasNone = 0,
    BiasInput = 1
};

struct __declspec(uuid("30df174b-5b20-4433-a98b-9a195d4a98c6"))
IGamrySignalArray2 : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT Init (
        struct IGamryPstat * PSTAT,
        float Bias,
        long Cycles,
        float SampleRate,
        long LevelsPerCycle,
        SAFEARRAY * * SignalArray,
        SAFEARRAY * * RepeatArray,
        enum gcBIASMODE BiasMode,
        enum gcCTRLMODE CtrlMode );
    HRESULT Tweak (
        float Bias,
        long Cycles,
        float SampleRate,
        long LevelsPerCycle,
        SAFEARRAY * * SignalArray,
        SAFEARRAY * * RepeatArray,
        enum gcBIASMODE BiasMode,
        enum gcSIGTWEAKSTYLE Style );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Init (
        /*[in]*/ struct IGamryPstat * PSTAT,
        /*[in]*/ float Bias,
        /*[in]*/ long Cycles,
        /*[in]*/ float SampleRate,
        /*[in]*/ long LevelsPerCycle,
        /*[in]*/ SAFEARRAY * * SignalArray,
        /*[in]*/ SAFEARRAY * * RepeatArray,
        /*[in]*/ enum gcBIASMODE BiasMode,
        /*[in]*/ enum gcCTRLMODE CtrlMode ) = 0;
      virtual HRESULT __stdcall raw_Tweak (
        /*[in]*/ float Bias,
        /*[in]*/ long Cycles,
        /*[in]*/ float SampleRate,
        /*[in]*/ long LevelsPerCycle,
        /*[in]*/ SAFEARRAY * * SignalArray,
        /*[in]*/ SAFEARRAY * * RepeatArray,
        /*[in]*/ enum gcBIASMODE BiasMode,
        /*[in]*/ enum gcSIGTWEAKSTYLE Style ) = 0;
};

struct __declspec(uuid("41f18fb2-95f8-4638-b357-3103d56e1d3f"))
IGamryDtaqCiiv : IGamryDtaq
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT Init (
        struct IGamryPstat * PSTAT );
    HRESULT SetThreshIMin (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetThreshIMax (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetThreshVMin (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetThreshVMax (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetThreshTMin (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetThreshTMax (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopVMin (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopVMax (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopDVMin (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopDVMax (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopADVMin (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopADVMax (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopAtDelayVMin (
        long Value );
    HRESULT SetStopAtDelayVMax (
        long Value );
    HRESULT SetStopAtDelayDVMin (
        long Value );
    HRESULT SetStopAtDelayDVMax (
        long Value );
    HRESULT SetStopAtDelayADVMin (
        long Value );
    HRESULT SetStopAtDelayADVMax (
        long Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Init (
        /*[in]*/ struct IGamryPstat * PSTAT ) = 0;
      virtual HRESULT __stdcall raw_SetThreshIMin (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetThreshIMax (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetThreshVMin (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetThreshVMax (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetThreshTMin (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetThreshTMax (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopVMin (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopVMax (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopDVMin (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopDVMax (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopADVMin (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopADVMax (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayVMin (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayVMax (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayDVMin (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayDVMax (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayADVMin (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayADVMax (
        /*[in]*/ long Value ) = 0;
};

struct __declspec(uuid("0e842696-2ad1-4f7b-8981-7fc06c2fdbe6"))
IGamryDtaqCiivAe : IGamryDtaq
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT Init (
        struct IGamryPstat * PSTAT );
    HRESULT SetThreshIMin (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetThreshIMax (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetThreshVMin (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetThreshVMax (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetThreshTMin (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetThreshTMax (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopVMin (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopVMax (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopDVMin (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopDVMax (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopADVMin (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopADVMax (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopAtDelayVMin (
        long Value );
    HRESULT SetStopAtDelayVMax (
        long Value );
    HRESULT SetStopAtDelayDVMin (
        long Value );
    HRESULT SetStopAtDelayDVMax (
        long Value );
    HRESULT SetStopAtDelayADVMin (
        long Value );
    HRESULT SetStopAtDelayADVMax (
        long Value );
    HRESULT AeSetThreshIMin (
        long Channel,
        VARIANT_BOOL Enable,
        float Value );
    HRESULT AeSetThreshIMax (
        long Channel,
        VARIANT_BOOL Enable,
        float Value );
    HRESULT AeSetThreshVMin (
        long Channel,
        VARIANT_BOOL Enable,
        float Value );
    HRESULT AeSetThreshVMax (
        long Channel,
        VARIANT_BOOL Enable,
        float Value );
    HRESULT AeSetThreshTMin (
        long Channel,
        VARIANT_BOOL Enable,
        float Value );
    HRESULT AeSetThreshTMax (
        long Channel,
        VARIANT_BOOL Enable,
        float Value );
    HRESULT AeSetStopVMin (
        long Channel,
        VARIANT_BOOL Enable,
        float Value );
    HRESULT AeSetStopVMax (
        long Channel,
        VARIANT_BOOL Enable,
        float Value );
    HRESULT AeSetStopDVMin (
        long Channel,
        VARIANT_BOOL Enable,
        float Value );
    HRESULT AeSetStopDVMax (
        long Channel,
        VARIANT_BOOL Enable,
        float Value );
    HRESULT AeSetStopADVMin (
        long Channel,
        VARIANT_BOOL Enable,
        float Value );
    HRESULT AeSetStopADVMax (
        long Channel,
        VARIANT_BOOL Enable,
        float Value );
    HRESULT AeSetStopAtDelayVMin (
        long Channel,
        long Value );
    HRESULT AeSetStopAtDelayVMax (
        long Channel,
        long Value );
    HRESULT AeSetStopAtDelayDVMin (
        long Channel,
        long Value );
    HRESULT AeSetStopAtDelayDVMax (
        long Channel,
        long Value );
    HRESULT AeSetStopAtDelayADVMin (
        long Channel,
        long Value );
    HRESULT AeSetStopAtDelayADVMax (
        long Channel,
        long Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Init (
        /*[in]*/ struct IGamryPstat * PSTAT ) = 0;
      virtual HRESULT __stdcall raw_SetThreshIMin (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetThreshIMax (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetThreshVMin (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetThreshVMax (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetThreshTMin (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetThreshTMax (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopVMin (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopVMax (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopDVMin (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopDVMax (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopADVMin (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopADVMax (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayVMin (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayVMax (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayDVMin (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayDVMax (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayADVMin (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayADVMax (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_AeSetThreshIMin (
        /*[in]*/ long Channel,
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_AeSetThreshIMax (
        /*[in]*/ long Channel,
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_AeSetThreshVMin (
        /*[in]*/ long Channel,
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_AeSetThreshVMax (
        /*[in]*/ long Channel,
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_AeSetThreshTMin (
        /*[in]*/ long Channel,
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_AeSetThreshTMax (
        /*[in]*/ long Channel,
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_AeSetStopVMin (
        /*[in]*/ long Channel,
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_AeSetStopVMax (
        /*[in]*/ long Channel,
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_AeSetStopDVMin (
        /*[in]*/ long Channel,
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_AeSetStopDVMax (
        /*[in]*/ long Channel,
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_AeSetStopADVMin (
        /*[in]*/ long Channel,
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_AeSetStopADVMax (
        /*[in]*/ long Channel,
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_AeSetStopAtDelayVMin (
        /*[in]*/ long Channel,
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_AeSetStopAtDelayVMax (
        /*[in]*/ long Channel,
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_AeSetStopAtDelayDVMin (
        /*[in]*/ long Channel,
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_AeSetStopAtDelayDVMax (
        /*[in]*/ long Channel,
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_AeSetStopAtDelayADVMin (
        /*[in]*/ long Channel,
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_AeSetStopAtDelayADVMax (
        /*[in]*/ long Channel,
        /*[in]*/ long Value ) = 0;
};

struct __declspec(uuid("96fc1359-e472-4b70-b519-0b46fad3c0f0"))
IGamryDtaqChrono : IGamryDtaq
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT Init (
        struct IGamryPstat * PSTAT,
        enum gcDTAQCHRONO_TYPE Type );
    HRESULT SetThreshIMin (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetThreshIMax (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetThreshVMin (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetThreshVMax (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetThreshTMin (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetThreshTMax (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopXMin (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopXMax (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopAtDelayXMin (
        long Value );
    HRESULT SetStopAtDelayXMax (
        long Value );
    HRESULT SetDecimation (
        VARIANT_BOOL Enable,
        long PreStepPts,
        long UndecStepPts );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Init (
        /*[in]*/ struct IGamryPstat * PSTAT,
        /*[in]*/ enum gcDTAQCHRONO_TYPE Type ) = 0;
      virtual HRESULT __stdcall raw_SetThreshIMin (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetThreshIMax (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetThreshVMin (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetThreshVMax (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetThreshTMin (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetThreshTMax (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopXMin (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopXMax (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayXMin (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayXMax (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetDecimation (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ long PreStepPts,
        /*[in]*/ long UndecStepPts ) = 0;
};

struct __declspec(uuid("a8ae4c12-95e5-45a7-be50-d72e7043e57e"))
IGamryDtaqIvt : IGamryDtaq
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT Init (
        struct IGamryPstat * PSTAT );
    HRESULT SetThreshIMin (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetThreshIMax (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetThreshVMin (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetThreshVMax (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetThreshAMin (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetThreshAMax (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopIMin (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopIMax (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopVMin (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopVMax (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopAMin (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopAMax (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopAtDelayIMin (
        long Value );
    HRESULT SetStopAtDelayIMax (
        long Value );
    HRESULT SetStopAtDelayVMin (
        long Value );
    HRESULT SetStopAtDelayVMax (
        long Value );
    HRESULT SetStopAtDelayAMin (
        long Value );
    HRESULT SetStopAtDelayAMax (
        long Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Init (
        /*[in]*/ struct IGamryPstat * PSTAT ) = 0;
      virtual HRESULT __stdcall raw_SetThreshIMin (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetThreshIMax (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetThreshVMin (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetThreshVMax (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetThreshAMin (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetThreshAMax (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopIMin (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopIMax (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopVMin (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopVMax (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAMin (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAMax (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayIMin (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayIMax (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayVMin (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayVMax (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayAMin (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayAMax (
        /*[in]*/ long Value ) = 0;
};

struct __declspec(uuid("cff4e15b-dbb7-430e-9cb1-7f47527b2e13"))
IGamryDtaqIvtAe : IGamryDtaq
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT Init (
        struct IGamryPstat * PSTAT );
    HRESULT SetThreshIMin (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetThreshIMax (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetThreshVMin (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetThreshVMax (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetThreshAMin (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetThreshAMax (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopIMin (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopIMax (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopVMin (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopVMax (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopAMin (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopAMax (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopAtDelayIMin (
        long Value );
    HRESULT SetStopAtDelayIMax (
        long Value );
    HRESULT SetStopAtDelayVMin (
        long Value );
    HRESULT SetStopAtDelayVMax (
        long Value );
    HRESULT SetStopAtDelayAMin (
        long Value );
    HRESULT SetStopAtDelayAMax (
        long Value );
    HRESULT AeSetThreshIMin (
        long Channel,
        VARIANT_BOOL Enable,
        float Value );
    HRESULT AeSetThreshIMax (
        long Channel,
        VARIANT_BOOL Enable,
        float Value );
    HRESULT AeSetThreshVMin (
        long Channel,
        VARIANT_BOOL Enable,
        float Value );
    HRESULT AeSetThreshVMax (
        long Channel,
        VARIANT_BOOL Enable,
        float Value );
    HRESULT AeSetThreshTMin (
        long Channel,
        VARIANT_BOOL Enable,
        float Value );
    HRESULT AeSetThreshTMax (
        long Channel,
        VARIANT_BOOL Enable,
        float Value );
    HRESULT AeSetStopVMin (
        long Channel,
        VARIANT_BOOL Enable,
        float Value );
    HRESULT AeSetStopVMax (
        long Channel,
        VARIANT_BOOL Enable,
        float Value );
    HRESULT AeSetStopDVMin (
        long Channel,
        VARIANT_BOOL Enable,
        float Value );
    HRESULT AeSetStopDVMax (
        long Channel,
        VARIANT_BOOL Enable,
        float Value );
    HRESULT AeSetStopADVMin (
        long Channel,
        VARIANT_BOOL Enable,
        float Value );
    HRESULT AeSetStopADVMax (
        long Channel,
        VARIANT_BOOL Enable,
        float Value );
    HRESULT AeSetStopAtDelayVMin (
        long Channel,
        long Value );
    HRESULT AeSetStopAtDelayVMax (
        long Channel,
        long Value );
    HRESULT AeSetStopAtDelayDVMin (
        long Channel,
        long Value );
    HRESULT AeSetStopAtDelayDVMax (
        long Channel,
        long Value );
    HRESULT AeSetStopAtDelayADVMin (
        long Channel,
        long Value );
    HRESULT AeSetStopAtDelayADVMax (
        long Channel,
        long Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Init (
        /*[in]*/ struct IGamryPstat * PSTAT ) = 0;
      virtual HRESULT __stdcall raw_SetThreshIMin (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetThreshIMax (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetThreshVMin (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetThreshVMax (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetThreshAMin (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetThreshAMax (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopIMin (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopIMax (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopVMin (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopVMax (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAMin (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAMax (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayIMin (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayIMax (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayVMin (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayVMax (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayAMin (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayAMax (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_AeSetThreshIMin (
        /*[in]*/ long Channel,
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_AeSetThreshIMax (
        /*[in]*/ long Channel,
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_AeSetThreshVMin (
        /*[in]*/ long Channel,
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_AeSetThreshVMax (
        /*[in]*/ long Channel,
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_AeSetThreshTMin (
        /*[in]*/ long Channel,
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_AeSetThreshTMax (
        /*[in]*/ long Channel,
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_AeSetStopVMin (
        /*[in]*/ long Channel,
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_AeSetStopVMax (
        /*[in]*/ long Channel,
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_AeSetStopDVMin (
        /*[in]*/ long Channel,
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_AeSetStopDVMax (
        /*[in]*/ long Channel,
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_AeSetStopADVMin (
        /*[in]*/ long Channel,
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_AeSetStopADVMax (
        /*[in]*/ long Channel,
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_AeSetStopAtDelayVMin (
        /*[in]*/ long Channel,
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_AeSetStopAtDelayVMax (
        /*[in]*/ long Channel,
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_AeSetStopAtDelayDVMin (
        /*[in]*/ long Channel,
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_AeSetStopAtDelayDVMax (
        /*[in]*/ long Channel,
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_AeSetStopAtDelayADVMin (
        /*[in]*/ long Channel,
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_AeSetStopAtDelayADVMax (
        /*[in]*/ long Channel,
        /*[in]*/ long Value ) = 0;
};

struct __declspec(uuid("a8afe9ac-851d-42fe-8698-9d23462d3d22"))
IGamryDtaqOcv : IGamryDtaq
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT Init (
        struct IGamryPstat * PSTAT );
    HRESULT SetStopADVMin (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopADVMax (
        VARIANT_BOOL Enable,
        float Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Init (
        /*[in]*/ struct IGamryPstat * PSTAT ) = 0;
      virtual HRESULT __stdcall raw_SetStopADVMin (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopADVMax (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
};

struct __declspec(uuid("a6972b7e-35d3-40da-9892-a51e2771e970"))
IGamryDtaqOcvAe : IGamryDtaq
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT Init (
        struct IGamryPstat * PSTAT );
    HRESULT SetStopADVMin (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopADVMax (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT AeSetStopADVMin (
        long Channel,
        VARIANT_BOOL Enable,
        float Value );
    HRESULT AeSetStopADVMax (
        long Channel,
        VARIANT_BOOL Enable,
        float Value );
    HRESULT AeSetStopAtDelayADVMin (
        long Channel,
        long Value );
    HRESULT AeSetStopAtDelayADVMax (
        long Channel,
        long Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Init (
        /*[in]*/ struct IGamryPstat * PSTAT ) = 0;
      virtual HRESULT __stdcall raw_SetStopADVMin (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopADVMax (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_AeSetStopADVMin (
        /*[in]*/ long Channel,
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_AeSetStopADVMax (
        /*[in]*/ long Channel,
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_AeSetStopAtDelayADVMin (
        /*[in]*/ long Channel,
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_AeSetStopAtDelayADVMax (
        /*[in]*/ long Channel,
        /*[in]*/ long Value ) = 0;
};

struct __declspec(uuid("b5b07c83-e274-4f2a-a827-d95e9952e51b"))
IGamryDtaqPv : IGamryDtaq
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT Init (
        struct IGamryPstat * PSTAT );
    HRESULT SetThreshIMin (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetThreshIMax (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetThreshVMin (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetThreshVMax (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetThreshTMin (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetThreshTMax (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopIMin (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopIMax (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopVMin (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopVMax (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopAtDelayIMin (
        long Value );
    HRESULT SetStopAtDelayIMax (
        long Value );
    HRESULT SetStopAtDelayVMin (
        long Value );
    HRESULT SetStopAtDelayVMax (
        long Value );
    HRESULT SetReverseDifference (
        VARIANT_BOOL Reverse );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Init (
        /*[in]*/ struct IGamryPstat * PSTAT ) = 0;
      virtual HRESULT __stdcall raw_SetThreshIMin (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetThreshIMax (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetThreshVMin (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetThreshVMax (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetThreshTMin (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetThreshTMax (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopIMin (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopIMax (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopVMin (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopVMax (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayIMin (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayIMax (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayVMin (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayVMax (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetReverseDifference (
        /*[in]*/ VARIANT_BOOL Reverse ) = 0;
};

struct __declspec(uuid("aa68f37f-9cb4-4eb1-b23e-ee964ac9cf8d"))
IGamryDtaqRcv : IGamryDtaq
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT Init (
        struct IGamryPstat * PSTAT );
    HRESULT SetThreshIMin (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetThreshIMax (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetThreshVMin (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetThreshVMax (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetThreshTMin (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetThreshTMax (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopIMin (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopIMax (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopAtDelayIMin (
        long Value );
    HRESULT SetStopAtDelayIMax (
        long Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Init (
        /*[in]*/ struct IGamryPstat * PSTAT ) = 0;
      virtual HRESULT __stdcall raw_SetThreshIMin (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetThreshIMax (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetThreshVMin (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetThreshVMax (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetThreshTMin (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetThreshTMax (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopIMin (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopIMax (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayIMin (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayIMax (
        /*[in]*/ long Value ) = 0;
};

struct __declspec(uuid("f41b101a-4cef-4d7f-b39a-85af386d3262"))
IGamryDtaqRcvAe : IGamryDtaq
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT Init (
        struct IGamryPstat * PSTAT );
    HRESULT SetThreshIMin (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetThreshIMax (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetThreshVMin (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetThreshVMax (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetThreshTMin (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetThreshTMax (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopIMin (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopIMax (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopAtDelayIMin (
        long Value );
    HRESULT SetStopAtDelayIMax (
        long Value );
    HRESULT AeSetThreshIMin (
        long Channel,
        VARIANT_BOOL Enable,
        float Value );
    HRESULT AeSetThreshIMax (
        long Channel,
        VARIANT_BOOL Enable,
        float Value );
    HRESULT AeSetThreshVMin (
        long Channel,
        VARIANT_BOOL Enable,
        float Value );
    HRESULT AeSetThreshVMax (
        long Channel,
        VARIANT_BOOL Enable,
        float Value );
    HRESULT AeSetThreshTMin (
        long Channel,
        VARIANT_BOOL Enable,
        float Value );
    HRESULT AeSetThreshTMax (
        long Channel,
        VARIANT_BOOL Enable,
        float Value );
    HRESULT AeSetStopVMin (
        long Channel,
        VARIANT_BOOL Enable,
        float Value );
    HRESULT AeSetStopVMax (
        long Channel,
        VARIANT_BOOL Enable,
        float Value );
    HRESULT AeSetStopDVMin (
        long Channel,
        VARIANT_BOOL Enable,
        float Value );
    HRESULT AeSetStopDVMax (
        long Channel,
        VARIANT_BOOL Enable,
        float Value );
    HRESULT AeSetStopADVMin (
        long Channel,
        VARIANT_BOOL Enable,
        float Value );
    HRESULT AeSetStopADVMax (
        long Channel,
        VARIANT_BOOL Enable,
        float Value );
    HRESULT AeSetStopAtDelayVMin (
        long Channel,
        long Value );
    HRESULT AeSetStopAtDelayVMax (
        long Channel,
        long Value );
    HRESULT AeSetStopAtDelayDVMin (
        long Channel,
        long Value );
    HRESULT AeSetStopAtDelayDVMax (
        long Channel,
        long Value );
    HRESULT AeSetStopAtDelayADVMin (
        long Channel,
        long Value );
    HRESULT AeSetStopAtDelayADVMax (
        long Channel,
        long Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Init (
        /*[in]*/ struct IGamryPstat * PSTAT ) = 0;
      virtual HRESULT __stdcall raw_SetThreshIMin (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetThreshIMax (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetThreshVMin (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetThreshVMax (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetThreshTMin (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetThreshTMax (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopIMin (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopIMax (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayIMin (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayIMax (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_AeSetThreshIMin (
        /*[in]*/ long Channel,
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_AeSetThreshIMax (
        /*[in]*/ long Channel,
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_AeSetThreshVMin (
        /*[in]*/ long Channel,
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_AeSetThreshVMax (
        /*[in]*/ long Channel,
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_AeSetThreshTMin (
        /*[in]*/ long Channel,
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_AeSetThreshTMax (
        /*[in]*/ long Channel,
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_AeSetStopVMin (
        /*[in]*/ long Channel,
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_AeSetStopVMax (
        /*[in]*/ long Channel,
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_AeSetStopDVMin (
        /*[in]*/ long Channel,
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_AeSetStopDVMax (
        /*[in]*/ long Channel,
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_AeSetStopADVMin (
        /*[in]*/ long Channel,
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_AeSetStopADVMax (
        /*[in]*/ long Channel,
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_AeSetStopAtDelayVMin (
        /*[in]*/ long Channel,
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_AeSetStopAtDelayVMax (
        /*[in]*/ long Channel,
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_AeSetStopAtDelayDVMin (
        /*[in]*/ long Channel,
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_AeSetStopAtDelayDVMax (
        /*[in]*/ long Channel,
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_AeSetStopAtDelayADVMin (
        /*[in]*/ long Channel,
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_AeSetStopAtDelayADVMax (
        /*[in]*/ long Channel,
        /*[in]*/ long Value ) = 0;
};

struct __declspec(uuid("5fc64222-df54-4132-9f17-49b77c94cf93"))
IGamryDtaqSqwv : IGamryDtaq
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT Init (
        struct IGamryPstat * PSTAT );
    HRESULT SetThreshIMin (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetThreshIMax (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetThreshVMin (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetThreshVMax (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetThreshTMin (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetThreshTMax (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopIMin (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopIMax (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopVMin (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopVMax (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopAtDelayIMin (
        long Value );
    HRESULT SetStopAtDelayIMax (
        long Value );
    HRESULT SetStopAtDelayVMin (
        long Value );
    HRESULT SetStopAtDelayVMax (
        long Value );
    HRESULT SetReverseDifference (
        VARIANT_BOOL Reverse );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Init (
        /*[in]*/ struct IGamryPstat * PSTAT ) = 0;
      virtual HRESULT __stdcall raw_SetThreshIMin (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetThreshIMax (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetThreshVMin (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetThreshVMax (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetThreshTMin (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetThreshTMax (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopIMin (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopIMax (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopVMin (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopVMax (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayIMin (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayIMax (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayVMin (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayVMax (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetReverseDifference (
        /*[in]*/ VARIANT_BOOL Reverse ) = 0;
};

struct __declspec(uuid("9c06be51-0b68-4e51-9518-49f8a2a35755"))
IGamryDtaqPwr : IGamryDtaq
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT Init (
        struct IGamryPstat * PSTAT );
    HRESULT SetStopVMin (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopAVMin (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopDVMin (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopADVMin (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopVMax (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopAVMax (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopDVMax (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopADVMax (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopIMin (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopAIMin (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopDIMin (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopADIMin (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopIMax (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopAIMax (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopDIMax (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopADIMax (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopAMin (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopAAMin (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopDAMin (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopADAMin (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopAMax (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopAAMax (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopDAMax (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopADAMax (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopPMin (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopAPMin (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopDPMin (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopADPMin (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopPMax (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopAPMax (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopDPMax (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopADPMax (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopQMin (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopAQMin (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopQMax (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopAQMax (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopEMin (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopAEMin (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopEMax (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopAEMax (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopTempMax (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopDTempMax (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopADTempMax (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopAtDelayVMin (
        long Value );
    HRESULT SetStopAtDelayAVMin (
        long Value );
    HRESULT SetStopAtDelayDVMin (
        long Value );
    HRESULT SetStopAtDelayADVMin (
        long Value );
    HRESULT SetStopAtDelayVMax (
        long Value );
    HRESULT SetStopAtDelayAVMax (
        long Value );
    HRESULT SetStopAtDelayDVMax (
        long Value );
    HRESULT SetStopAtDelayADVMax (
        long Value );
    HRESULT SetStopAtDelayIMin (
        long Value );
    HRESULT SetStopAtDelayAIMin (
        long Value );
    HRESULT SetStopAtDelayDIMin (
        long Value );
    HRESULT SetStopAtDelayADIMin (
        long Value );
    HRESULT SetStopAtDelayIMax (
        long Value );
    HRESULT SetStopAtDelayAIMax (
        long Value );
    HRESULT SetStopAtDelayDIMax (
        long Value );
    HRESULT SetStopAtDelayADIMax (
        long Value );
    HRESULT SetStopAtDelayAMin (
        long Value );
    HRESULT SetStopAtDelayAAMin (
        long Value );
    HRESULT SetStopAtDelayDAMin (
        long Value );
    HRESULT SetStopAtDelayADAMin (
        long Value );
    HRESULT SetStopAtDelayAMax (
        long Value );
    HRESULT SetStopAtDelayAAMax (
        long Value );
    HRESULT SetStopAtDelayDAMax (
        long Value );
    HRESULT SetStopAtDelayADAMax (
        long Value );
    HRESULT SetStopAtDelayPMin (
        long Value );
    HRESULT SetStopAtDelayAPMin (
        long Value );
    HRESULT SetStopAtDelayDPMin (
        long Value );
    HRESULT SetStopAtDelayADPMin (
        long Value );
    HRESULT SetStopAtDelayPMax (
        long Value );
    HRESULT SetStopAtDelayAPMax (
        long Value );
    HRESULT SetStopAtDelayDPMax (
        long Value );
    HRESULT SetStopAtDelayADPMax (
        long Value );
    HRESULT SetStopAtDelayQMin (
        long Value );
    HRESULT SetStopAtDelayAQMin (
        long Value );
    HRESULT SetStopAtDelayQMax (
        long Value );
    HRESULT SetStopAtDelayAQMax (
        long Value );
    HRESULT SetStopAtDelayEMin (
        long Value );
    HRESULT SetStopAtDelayAEMin (
        long Value );
    HRESULT SetStopAtDelayEMax (
        long Value );
    HRESULT SetStopAtDelayAEMax (
        long Value );
    HRESULT SetStopAtDelayTempMax (
        long Value );
    HRESULT SetStopAtDelayDTempMax (
        long Value );
    HRESULT SetStopAtDelayADTempMax (
        long Value );
    HRESULT SetThreshVMin (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetThreshVMax (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetThreshIMin (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetThreshIMax (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetThreshTMin (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetThreshTMax (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetThreshAMin (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetThreshAMax (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetThreshPMin (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetThreshPMax (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetThreshEMin (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetThreshEMax (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetThreshTempMin (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetThreshTempMax (
        VARIANT_BOOL Enable,
        float Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Init (
        /*[in]*/ struct IGamryPstat * PSTAT ) = 0;
      virtual HRESULT __stdcall raw_SetStopVMin (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAVMin (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopDVMin (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopADVMin (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopVMax (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAVMax (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopDVMax (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopADVMax (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopIMin (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAIMin (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopDIMin (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopADIMin (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopIMax (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAIMax (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopDIMax (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopADIMax (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAMin (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAAMin (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopDAMin (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopADAMin (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAMax (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAAMax (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopDAMax (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopADAMax (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopPMin (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAPMin (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopDPMin (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopADPMin (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopPMax (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAPMax (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopDPMax (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopADPMax (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopQMin (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAQMin (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopQMax (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAQMax (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopEMin (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAEMin (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopEMax (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAEMax (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopTempMax (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopDTempMax (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopADTempMax (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayVMin (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayAVMin (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayDVMin (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayADVMin (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayVMax (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayAVMax (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayDVMax (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayADVMax (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayIMin (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayAIMin (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayDIMin (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayADIMin (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayIMax (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayAIMax (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayDIMax (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayADIMax (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayAMin (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayAAMin (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayDAMin (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayADAMin (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayAMax (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayAAMax (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayDAMax (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayADAMax (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayPMin (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayAPMin (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayDPMin (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayADPMin (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayPMax (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayAPMax (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayDPMax (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayADPMax (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayQMin (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayAQMin (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayQMax (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayAQMax (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayEMin (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayAEMin (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayEMax (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayAEMax (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayTempMax (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayDTempMax (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayADTempMax (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetThreshVMin (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetThreshVMax (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetThreshIMin (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetThreshIMax (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetThreshTMin (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetThreshTMax (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetThreshAMin (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetThreshAMax (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetThreshPMin (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetThreshPMax (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetThreshEMin (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetThreshEMax (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetThreshTempMin (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetThreshTempMax (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
};

struct __declspec(uuid("db71d3d1-6de6-432c-946d-8c46594618b3"))
IGamryDtaqPwrAe : IGamryDtaq
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT Init (
        struct IGamryPstat * PSTAT );
    HRESULT SetStopVMin (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopAVMin (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopDVMin (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopADVMin (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopVMax (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopAVMax (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopDVMax (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopADVMax (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopIMin (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopAIMin (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopDIMin (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopADIMin (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopIMax (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopAIMax (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopDIMax (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopADIMax (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopAMin (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopAAMin (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopDAMin (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopADAMin (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopAMax (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopAAMax (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopDAMax (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopADAMax (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopPMin (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopAPMin (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopDPMin (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopADPMin (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopPMax (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopAPMax (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopDPMax (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopADPMax (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopQMin (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopAQMin (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopQMax (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopAQMax (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopEMin (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopAEMin (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopEMax (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopAEMax (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopTempMax (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopDTempMax (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopADTempMax (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetStopAtDelayVMin (
        long Value );
    HRESULT SetStopAtDelayAVMin (
        long Value );
    HRESULT SetStopAtDelayDVMin (
        long Value );
    HRESULT SetStopAtDelayADVMin (
        long Value );
    HRESULT SetStopAtDelayVMax (
        long Value );
    HRESULT SetStopAtDelayAVMax (
        long Value );
    HRESULT SetStopAtDelayDVMax (
        long Value );
    HRESULT SetStopAtDelayADVMax (
        long Value );
    HRESULT SetStopAtDelayIMin (
        long Value );
    HRESULT SetStopAtDelayAIMin (
        long Value );
    HRESULT SetStopAtDelayDIMin (
        long Value );
    HRESULT SetStopAtDelayADIMin (
        long Value );
    HRESULT SetStopAtDelayIMax (
        long Value );
    HRESULT SetStopAtDelayAIMax (
        long Value );
    HRESULT SetStopAtDelayDIMax (
        long Value );
    HRESULT SetStopAtDelayADIMax (
        long Value );
    HRESULT SetStopAtDelayAMin (
        long Value );
    HRESULT SetStopAtDelayAAMin (
        long Value );
    HRESULT SetStopAtDelayDAMin (
        long Value );
    HRESULT SetStopAtDelayADAMin (
        long Value );
    HRESULT SetStopAtDelayAMax (
        long Value );
    HRESULT SetStopAtDelayAAMax (
        long Value );
    HRESULT SetStopAtDelayDAMax (
        long Value );
    HRESULT SetStopAtDelayADAMax (
        long Value );
    HRESULT SetStopAtDelayPMin (
        long Value );
    HRESULT SetStopAtDelayAPMin (
        long Value );
    HRESULT SetStopAtDelayDPMin (
        long Value );
    HRESULT SetStopAtDelayADPMin (
        long Value );
    HRESULT SetStopAtDelayPMax (
        long Value );
    HRESULT SetStopAtDelayAPMax (
        long Value );
    HRESULT SetStopAtDelayDPMax (
        long Value );
    HRESULT SetStopAtDelayADPMax (
        long Value );
    HRESULT SetStopAtDelayQMin (
        long Value );
    HRESULT SetStopAtDelayAQMin (
        long Value );
    HRESULT SetStopAtDelayQMax (
        long Value );
    HRESULT SetStopAtDelayAQMax (
        long Value );
    HRESULT SetStopAtDelayEMin (
        long Value );
    HRESULT SetStopAtDelayAEMin (
        long Value );
    HRESULT SetStopAtDelayEMax (
        long Value );
    HRESULT SetStopAtDelayAEMax (
        long Value );
    HRESULT SetStopAtDelayTempMax (
        long Value );
    HRESULT SetStopAtDelayDTempMax (
        long Value );
    HRESULT SetStopAtDelayADTempMax (
        long Value );
    HRESULT SetThreshVMin (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetThreshVMax (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetThreshIMin (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetThreshIMax (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetThreshTMin (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetThreshTMax (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetThreshAMin (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetThreshAMax (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetThreshPMin (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetThreshPMax (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetThreshEMin (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetThreshEMax (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetThreshTempMin (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT SetThreshTempMax (
        VARIANT_BOOL Enable,
        float Value );
    HRESULT AeSetThreshIMin (
        long Channel,
        VARIANT_BOOL Enable,
        float Value );
    HRESULT AeSetThreshIMax (
        long Channel,
        VARIANT_BOOL Enable,
        float Value );
    HRESULT AeSetThreshVMin (
        long Channel,
        VARIANT_BOOL Enable,
        float Value );
    HRESULT AeSetThreshVMax (
        long Channel,
        VARIANT_BOOL Enable,
        float Value );
    HRESULT AeSetThreshTMin (
        long Channel,
        VARIANT_BOOL Enable,
        float Value );
    HRESULT AeSetThreshTMax (
        long Channel,
        VARIANT_BOOL Enable,
        float Value );
    HRESULT AeSetStopVMin (
        long Channel,
        VARIANT_BOOL Enable,
        float Value );
    HRESULT AeSetStopVMax (
        long Channel,
        VARIANT_BOOL Enable,
        float Value );
    HRESULT AeSetStopDVMin (
        long Channel,
        VARIANT_BOOL Enable,
        float Value );
    HRESULT AeSetStopDVMax (
        long Channel,
        VARIANT_BOOL Enable,
        float Value );
    HRESULT AeSetStopADVMin (
        long Channel,
        VARIANT_BOOL Enable,
        float Value );
    HRESULT AeSetStopADVMax (
        long Channel,
        VARIANT_BOOL Enable,
        float Value );
    HRESULT AeSetStopAtDelayVMin (
        long Channel,
        long Value );
    HRESULT AeSetStopAtDelayVMax (
        long Channel,
        long Value );
    HRESULT AeSetStopAtDelayDVMin (
        long Channel,
        long Value );
    HRESULT AeSetStopAtDelayDVMax (
        long Channel,
        long Value );
    HRESULT AeSetStopAtDelayADVMin (
        long Channel,
        long Value );
    HRESULT AeSetStopAtDelayADVMax (
        long Channel,
        long Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Init (
        /*[in]*/ struct IGamryPstat * PSTAT ) = 0;
      virtual HRESULT __stdcall raw_SetStopVMin (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAVMin (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopDVMin (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopADVMin (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopVMax (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAVMax (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopDVMax (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopADVMax (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopIMin (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAIMin (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopDIMin (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopADIMin (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopIMax (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAIMax (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopDIMax (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopADIMax (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAMin (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAAMin (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopDAMin (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopADAMin (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAMax (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAAMax (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopDAMax (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopADAMax (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopPMin (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAPMin (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopDPMin (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopADPMin (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopPMax (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAPMax (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopDPMax (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopADPMax (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopQMin (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAQMin (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopQMax (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAQMax (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopEMin (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAEMin (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopEMax (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAEMax (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopTempMax (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopDTempMax (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopADTempMax (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayVMin (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayAVMin (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayDVMin (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayADVMin (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayVMax (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayAVMax (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayDVMax (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayADVMax (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayIMin (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayAIMin (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayDIMin (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayADIMin (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayIMax (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayAIMax (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayDIMax (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayADIMax (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayAMin (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayAAMin (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayDAMin (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayADAMin (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayAMax (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayAAMax (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayDAMax (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayADAMax (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayPMin (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayAPMin (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayDPMin (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayADPMin (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayPMax (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayAPMax (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayDPMax (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayADPMax (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayQMin (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayAQMin (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayQMax (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayAQMax (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayEMin (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayAEMin (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayEMax (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayAEMax (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayTempMax (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayDTempMax (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetStopAtDelayADTempMax (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SetThreshVMin (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetThreshVMax (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetThreshIMin (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetThreshIMax (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetThreshTMin (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetThreshTMax (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetThreshAMin (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetThreshAMax (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetThreshPMin (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetThreshPMax (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetThreshEMin (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetThreshEMax (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetThreshTempMin (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_SetThreshTempMax (
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_AeSetThreshIMin (
        /*[in]*/ long Channel,
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_AeSetThreshIMax (
        /*[in]*/ long Channel,
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_AeSetThreshVMin (
        /*[in]*/ long Channel,
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_AeSetThreshVMax (
        /*[in]*/ long Channel,
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_AeSetThreshTMin (
        /*[in]*/ long Channel,
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_AeSetThreshTMax (
        /*[in]*/ long Channel,
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_AeSetStopVMin (
        /*[in]*/ long Channel,
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_AeSetStopVMax (
        /*[in]*/ long Channel,
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_AeSetStopDVMin (
        /*[in]*/ long Channel,
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_AeSetStopDVMax (
        /*[in]*/ long Channel,
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_AeSetStopADVMin (
        /*[in]*/ long Channel,
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_AeSetStopADVMax (
        /*[in]*/ long Channel,
        /*[in]*/ VARIANT_BOOL Enable,
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall raw_AeSetStopAtDelayVMin (
        /*[in]*/ long Channel,
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_AeSetStopAtDelayVMax (
        /*[in]*/ long Channel,
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_AeSetStopAtDelayDVMin (
        /*[in]*/ long Channel,
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_AeSetStopAtDelayDVMax (
        /*[in]*/ long Channel,
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_AeSetStopAtDelayADVMin (
        /*[in]*/ long Channel,
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_AeSetStopAtDelayADVMax (
        /*[in]*/ long Channel,
        /*[in]*/ long Value ) = 0;
};

struct __declspec(uuid("2cf63b4b-6446-41c2-84f4-dcb844c208d5"))
IGamryDtaqEsa2 : IGamryDtaq
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT Init (
        struct IGamryPstat * PSTAT,
        float FreqSample,
        float FreqOut,
        VARIANT_BOOL AcqFilterEnable,
        enum gcESA2FILTERTYPE FilterType );
    float FilterDelay ( );
    HRESULT SetVfInterpolateEnable (
        int Count );
    HRESULT SetImInterpolateEnable (
        int Count );
    HRESULT SetLookbackLength (
        int Length );
    HRESULT SetHistoryDecay (
        float Decay );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Init (
        /*[in]*/ struct IGamryPstat * PSTAT,
        /*[in]*/ float FreqSample,
        /*[in]*/ float FreqOut,
        /*[in]*/ VARIANT_BOOL AcqFilterEnable,
        /*[in]*/ enum gcESA2FILTERTYPE FilterType ) = 0;
      virtual HRESULT __stdcall raw_FilterDelay (
        /*[out,retval]*/ float * Delay ) = 0;
      virtual HRESULT __stdcall raw_SetVfInterpolateEnable (
        /*[in]*/ int Count ) = 0;
      virtual HRESULT __stdcall raw_SetImInterpolateEnable (
        /*[in]*/ int Count ) = 0;
      virtual HRESULT __stdcall raw_SetLookbackLength (
        /*[in]*/ int Length ) = 0;
      virtual HRESULT __stdcall raw_SetHistoryDecay (
        /*[in]*/ float Decay ) = 0;
};

struct __declspec(uuid("1f7e3fb3-742c-4459-a2b1-8c934d638353"))
IGamryDtaqEfm : IGamryDtaq
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT Init (
        struct IGamryPstat * PSTAT,
        float BaseFrequency,
        long Harmonic1,
        long Harmonic2,
        float Amplitude,
        long SampPerCycle,
        long NumCycles );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Init (
        /*[in]*/ struct IGamryPstat * PSTAT,
        /*[in]*/ float BaseFrequency,
        /*[in]*/ long Harmonic1,
        /*[in]*/ long Harmonic2,
        /*[in]*/ float Amplitude,
        /*[in]*/ long SampPerCycle,
        /*[in]*/ long NumCycles ) = 0;
};

struct __declspec(uuid("dab47c04-df55-4391-9574-9d181985dfd2"))
IGamrySignalConst : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT Init (
        struct IGamryPstat * PSTAT,
        float Voltage,
        float TotalTime,
        float SampleRate,
        enum gcCTRLMODE CtrlMode );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Init (
        /*[in]*/ struct IGamryPstat * PSTAT,
        /*[in]*/ float Voltage,
        /*[in]*/ float TotalTime,
        /*[in]*/ float SampleRate,
        /*[in]*/ enum gcCTRLMODE CtrlMode ) = 0;
};

struct __declspec(uuid("0e7ae82c-0436-4167-9ede-effb8f0a2950"))
IGamrySignalPwrConst : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT Init (
        struct IGamryPstat * PSTAT,
        float Value,
        float LimitValue,
        float Gain,
        float MinDif,
        float MaxStep,
        float TotalTime,
        float SamplePeriod,
        float PerturbationRate,
        float PerturbationPulseWidth,
        float TimerRes,
        enum gcPWRSIGNALMODE Mode,
        VARIANT_BOOL WorkingPositive );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Init (
        /*[in]*/ struct IGamryPstat * PSTAT,
        /*[in]*/ float Value,
        /*[in]*/ float LimitValue,
        /*[in]*/ float Gain,
        /*[in]*/ float MinDif,
        /*[in]*/ float MaxStep,
        /*[in]*/ float TotalTime,
        /*[in]*/ float SamplePeriod,
        /*[in]*/ float PerturbationRate,
        /*[in]*/ float PerturbationPulseWidth,
        /*[in]*/ float TimerRes,
        /*[in]*/ enum gcPWRSIGNALMODE Mode,
        /*[in]*/ VARIANT_BOOL WorkingPositive ) = 0;
};

struct __declspec(uuid("24e0d554-a2a8-4741-bc27-e58bb3af1e20"))
IGamrySignalStep : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT Init (
        struct IGamryPstat * PSTAT,
        float Vinit,
        float Tinit,
        float Vfinal,
        float Tfinal,
        float SampleRate,
        enum gcCTRLMODE CtrlMode );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Init (
        /*[in]*/ struct IGamryPstat * PSTAT,
        /*[in]*/ float Vinit,
        /*[in]*/ float Tinit,
        /*[in]*/ float Vfinal,
        /*[in]*/ float Tfinal,
        /*[in]*/ float SampleRate,
        /*[in]*/ enum gcCTRLMODE CtrlMode ) = 0;
};

struct __declspec(uuid("1791f4d6-a0df-4246-aff1-afb428074fa9"))
IGamrySignalPwrStep : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT Init (
        struct IGamryPstat * PSTAT,
        SAFEARRAY * * ValueArray,
        SAFEARRAY * * LimitValueArray,
        float Gain,
        float MinDif,
        float MaxStep,
        SAFEARRAY * * TimeArray,
        float SamplePeriod,
        float PerturbationRate,
        float PerturbationPulseWidth,
        float TimerRes,
        SAFEARRAY * * ModeArray,
        VARIANT_BOOL WorkingPositive );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Init (
        /*[in]*/ struct IGamryPstat * PSTAT,
        /*[in]*/ SAFEARRAY * * ValueArray,
        /*[in]*/ SAFEARRAY * * LimitValueArray,
        /*[in]*/ float Gain,
        /*[in]*/ float MinDif,
        /*[in]*/ float MaxStep,
        /*[in]*/ SAFEARRAY * * TimeArray,
        /*[in]*/ float SamplePeriod,
        /*[in]*/ float PerturbationRate,
        /*[in]*/ float PerturbationPulseWidth,
        /*[in]*/ float TimerRes,
        /*[in]*/ SAFEARRAY * * ModeArray,
        /*[in]*/ VARIANT_BOOL WorkingPositive ) = 0;
};

struct __declspec(uuid("4a47f9c5-39cd-4bb6-adc9-0d8961a15e54"))
IGamrySignalRamp : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT Init (
        struct IGamryPstat * PSTAT,
        float Vinit,
        float Vfinal,
        float ScanRate,
        float SampleRate,
        enum gcCTRLMODE CtrlMode );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Init (
        /*[in]*/ struct IGamryPstat * PSTAT,
        /*[in]*/ float Vinit,
        /*[in]*/ float Vfinal,
        /*[in]*/ float ScanRate,
        /*[in]*/ float SampleRate,
        /*[in]*/ enum gcCTRLMODE CtrlMode ) = 0;
};

struct __declspec(uuid("5c0fdd79-713a-49d1-be41-0bd90b98482f"))
IGamrySignalPwrRamp : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT Init (
        struct IGamryPstat * PSTAT,
        float ValueInit,
        float ValueFinal,
        float ScanRate,
        float LimitValue,
        float Gain,
        float MinDif,
        float MaxStep,
        float SamplePeriod,
        float PerturbationRate,
        float PerturbationPulseWidth,
        float TimerRes,
        enum gcPWRSIGNALMODE Mode,
        VARIANT_BOOL WorkingPositive );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Init (
        /*[in]*/ struct IGamryPstat * PSTAT,
        /*[in]*/ float ValueInit,
        /*[in]*/ float ValueFinal,
        /*[in]*/ float ScanRate,
        /*[in]*/ float LimitValue,
        /*[in]*/ float Gain,
        /*[in]*/ float MinDif,
        /*[in]*/ float MaxStep,
        /*[in]*/ float SamplePeriod,
        /*[in]*/ float PerturbationRate,
        /*[in]*/ float PerturbationPulseWidth,
        /*[in]*/ float TimerRes,
        /*[in]*/ enum gcPWRSIGNALMODE Mode,
        /*[in]*/ VARIANT_BOOL WorkingPositive ) = 0;
};

struct __declspec(uuid("16b5330d-0bad-4c34-ada4-d942a64d6583"))
IGamrySignalDstep : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT Init (
        struct IGamryPstat * PSTAT,
        float Vinit,
        float Tinit,
        float Vstep1,
        float Tstep1,
        float Vstep2,
        float Tstep2,
        float SampleRate,
        enum gcCTRLMODE CtrlMode );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Init (
        /*[in]*/ struct IGamryPstat * PSTAT,
        /*[in]*/ float Vinit,
        /*[in]*/ float Tinit,
        /*[in]*/ float Vstep1,
        /*[in]*/ float Tstep1,
        /*[in]*/ float Vstep2,
        /*[in]*/ float Tstep2,
        /*[in]*/ float SampleRate,
        /*[in]*/ enum gcCTRLMODE CtrlMode ) = 0;
};

struct __declspec(uuid("70cf56eb-7bc3-465f-80bb-0dc402c740ee"))
IGamrySignalMstep : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT Init (
        struct IGamryPstat * PSTAT,
        float Vinit,
        float Vstep,
        float Tinit,
        float Tstep,
        long Nstep,
        float SampleRate,
        enum gcCTRLMODE CtrlMode );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Init (
        /*[in]*/ struct IGamryPstat * PSTAT,
        /*[in]*/ float Vinit,
        /*[in]*/ float Vstep,
        /*[in]*/ float Tinit,
        /*[in]*/ float Tstep,
        /*[in]*/ long Nstep,
        /*[in]*/ float SampleRate,
        /*[in]*/ enum gcCTRLMODE CtrlMode ) = 0;
};

struct __declspec(uuid("22c2cd75-5cb2-4736-a9e2-df3e12dc4388"))
IGamrySignalPv : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT Init (
        struct IGamryPstat * PSTAT,
        float Vinit,
        float Vpv,
        float Vpulse,
        VARIANT_BOOL EnableOverrideA,
        float VOverrideA,
        VARIANT_BOOL EnableOverrideB,
        float VOverrideB,
        long MaxCycles,
        float TimerRes,
        float PulseTime,
        float CycleTime,
        float IntPeriod,
        VARIANT_BOOL DropKnockSignalEnable,
        float DropKnockSignalDuration,
        VARIANT_BOOL DropKnockSignalPolarity,
        enum gcCTRLMODE CtrlMode );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Init (
        /*[in]*/ struct IGamryPstat * PSTAT,
        /*[in]*/ float Vinit,
        /*[in]*/ float Vpv,
        /*[in]*/ float Vpulse,
        /*[in]*/ VARIANT_BOOL EnableOverrideA,
        /*[in]*/ float VOverrideA,
        /*[in]*/ VARIANT_BOOL EnableOverrideB,
        /*[in]*/ float VOverrideB,
        /*[in]*/ long MaxCycles,
        /*[in]*/ float TimerRes,
        /*[in]*/ float PulseTime,
        /*[in]*/ float CycleTime,
        /*[in]*/ float IntPeriod,
        /*[in]*/ VARIANT_BOOL DropKnockSignalEnable,
        /*[in]*/ float DropKnockSignalDuration,
        /*[in]*/ VARIANT_BOOL DropKnockSignalPolarity,
        /*[in]*/ enum gcCTRLMODE CtrlMode ) = 0;
};

struct __declspec(uuid("68dfb1f2-43cb-41c8-b5e6-ae73554bfa7d"))
IGamrySignalRupdn : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT Init (
        struct IGamryPstat * PSTAT,
        float Vinit,
        float Vapex1,
        float Vapex2,
        float Vfinal,
        float ScanInit,
        float ScanApex,
        float ScanFinal,
        float HoldTime0,
        float HoldTime1,
        float HoldTime2,
        float SampleRate,
        long Cycles,
        enum gcCTRLMODE CtrlMode );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Init (
        /*[in]*/ struct IGamryPstat * PSTAT,
        /*[in]*/ float Vinit,
        /*[in]*/ float Vapex1,
        /*[in]*/ float Vapex2,
        /*[in]*/ float Vfinal,
        /*[in]*/ float ScanInit,
        /*[in]*/ float ScanApex,
        /*[in]*/ float ScanFinal,
        /*[in]*/ float HoldTime0,
        /*[in]*/ float HoldTime1,
        /*[in]*/ float HoldTime2,
        /*[in]*/ float SampleRate,
        /*[in]*/ long Cycles,
        /*[in]*/ enum gcCTRLMODE CtrlMode ) = 0;
};

struct __declspec(uuid("11051d1f-02bf-4b64-9d01-b5332ce2246f"))
IGamrySignalUpdn : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT Init (
        struct IGamryPstat * PSTAT,
        float Vinit,
        float Vapex,
        float Vfinal,
        float ScanRateFwd,
        float ScanRateRev,
        float SampleRate,
        enum gcCTRLMODE CtrlMode );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Init (
        /*[in]*/ struct IGamryPstat * PSTAT,
        /*[in]*/ float Vinit,
        /*[in]*/ float Vapex,
        /*[in]*/ float Vfinal,
        /*[in]*/ float ScanRateFwd,
        /*[in]*/ float ScanRateRev,
        /*[in]*/ float SampleRate,
        /*[in]*/ enum gcCTRLMODE CtrlMode ) = 0;
};

struct __declspec(uuid("c6d6c5e1-1871-491d-a019-1a61ec7bb363"))
IGamrySignalSqwv : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT Init (
        struct IGamryPstat * PSTAT,
        float Vinit,
        float Vfinal,
        float Vstep,
        float Vpulse,
        float Tstep,
        enum gcCTRLMODE CtrlMode );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Init (
        /*[in]*/ struct IGamryPstat * PSTAT,
        /*[in]*/ float Vinit,
        /*[in]*/ float Vfinal,
        /*[in]*/ float Vstep,
        /*[in]*/ float Vpulse,
        /*[in]*/ float Tstep,
        /*[in]*/ enum gcCTRLMODE CtrlMode ) = 0;
};

struct __declspec(uuid("47790267-164b-4bf1-8353-1f5416d02a89"))
IGamryReadZ : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT Init (
        struct IGamryPstat * PSTAT );
    HRESULT Measure (
        float Frequency,
        float Amplitude );
    HRESULT Cook (
        long * NumPoints,
        SAFEARRAY * * Data );
    HRESULT SetSpeed (
        enum gcREADZSPEED Speed );
    HRESULT SetCycleLim (
        long Min,
        long Max );
    HRESULT SetZmod (
        float Zmod );
    float Vreal ( );
    float Vimag ( );
    float Vsig ( );
    float Vdc ( );
    float Ireal ( );
    float Iimag ( );
    float Isig ( );
    float Idc ( );
    float Zreal ( );
    float Zimag ( );
    float Zsig ( );
    float Zfreq ( );
    float Imod ( );
    float Iphz ( );
    float Vmod ( );
    float Vphz ( );
    float Zmod ( );
    float Zphz ( );
    float Gain ( );
    float VNoise ( );
    float INoise ( );
    float IENoise ( );
    long IERange ( );
    HRESULT SetGain (
        float Gain );
    HRESULT SetVNoise (
        float VNoise );
    HRESULT SetINoise (
        float INoise );
    HRESULT SetIENoise (
        float IENoise );
    HRESULT SetIdc (
        float Idc );
    _bstr_t StatusMessage ( );
    HRESULT Stop ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Init (
        /*[in]*/ struct IGamryPstat * PSTAT ) = 0;
      virtual HRESULT __stdcall raw_Measure (
        /*[in]*/ float Frequency,
        /*[in]*/ float Amplitude ) = 0;
      virtual HRESULT __stdcall raw_Cook (
        /*[in,out]*/ long * NumPoints,
        /*[out]*/ SAFEARRAY * * Data ) = 0;
      virtual HRESULT __stdcall raw_SetSpeed (
        /*[in]*/ enum gcREADZSPEED Speed ) = 0;
      virtual HRESULT __stdcall raw_SetCycleLim (
        /*[in]*/ long Min,
        /*[in]*/ long Max ) = 0;
      virtual HRESULT __stdcall raw_SetZmod (
        /*[in]*/ float Zmod ) = 0;
      virtual HRESULT __stdcall raw_Vreal (
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall raw_Vimag (
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall raw_Vsig (
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall raw_Vdc (
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall raw_Ireal (
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall raw_Iimag (
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall raw_Isig (
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall raw_Idc (
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall raw_Zreal (
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall raw_Zimag (
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall raw_Zsig (
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall raw_Zfreq (
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall raw_Imod (
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall raw_Iphz (
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall raw_Vmod (
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall raw_Vphz (
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall raw_Zmod (
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall raw_Zphz (
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall raw_Gain (
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall raw_VNoise (
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall raw_INoise (
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall raw_IENoise (
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall raw_IERange (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall raw_SetGain (
        /*[in]*/ float Gain ) = 0;
      virtual HRESULT __stdcall raw_SetVNoise (
        /*[in]*/ float VNoise ) = 0;
      virtual HRESULT __stdcall raw_SetINoise (
        /*[in]*/ float INoise ) = 0;
      virtual HRESULT __stdcall raw_SetIENoise (
        /*[in]*/ float IENoise ) = 0;
      virtual HRESULT __stdcall raw_SetIdc (
        /*[in]*/ float Idc ) = 0;
      virtual HRESULT __stdcall raw_StatusMessage (
        /*[out,retval]*/ BSTR * Message ) = 0;
      virtual HRESULT __stdcall raw_Stop ( ) = 0;
};

struct __declspec(uuid("001b39ca-5b0a-42c2-9bff-eae53283ba08"))
IGamryReadZAe : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT Init (
        struct IGamryPC5Pstat * PSTAT );
    HRESULT Measure (
        float Frequency,
        float Amplitude,
        long OnChannels );
    HRESULT Cook (
        long * NumPoints,
        SAFEARRAY * * Data );
    HRESULT SetSpeed (
        enum gcREADZSPEED Speed );
    HRESULT SetCycleLim (
        long Min,
        long Max );
    HRESULT SetZmod (
        long Channel,
        float Zmod );
    float Vreal (
        long Channel );
    float Vimag (
        long Channel );
    float Vsig (
        long Channel );
    float Vdc (
        long Channel );
    float Ireal (
        long Channel );
    float Iimag (
        long Channel );
    float Isig (
        long Channel );
    float Idc (
        long Channel );
    float Zreal (
        long Channel );
    float Zimag (
        long Channel );
    float Zsig (
        long Channel );
    float Zfreq ( );
    float Imod (
        long Channel );
    float Iphz (
        long Channel );
    float Vmod (
        long Channel );
    float Vphz (
        long Channel );
    float Zmod (
        long Channel );
    float Zphz (
        long Channel );
    float Gain ( );
    float VNoise ( );
    float INoise ( );
    float IENoise ( );
    long IERange ( );
    HRESULT SetGain (
        float Gain );
    HRESULT SetVNoise (
        float VNoise );
    HRESULT SetINoise (
        float INoise );
    HRESULT SetIENoise (
        float IENoise );
    HRESULT SetIdc (
        long Channel,
        float Idc );
    _bstr_t StatusMessage ( );
    HRESULT Stop ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Init (
        /*[in]*/ struct IGamryPC5Pstat * PSTAT ) = 0;
      virtual HRESULT __stdcall raw_Measure (
        /*[in]*/ float Frequency,
        /*[in]*/ float Amplitude,
        /*[in]*/ long OnChannels ) = 0;
      virtual HRESULT __stdcall raw_Cook (
        /*[in,out]*/ long * NumPoints,
        /*[out]*/ SAFEARRAY * * Data ) = 0;
      virtual HRESULT __stdcall raw_SetSpeed (
        /*[in]*/ enum gcREADZSPEED Speed ) = 0;
      virtual HRESULT __stdcall raw_SetCycleLim (
        /*[in]*/ long Min,
        /*[in]*/ long Max ) = 0;
      virtual HRESULT __stdcall raw_SetZmod (
        /*[in]*/ long Channel,
        /*[in]*/ float Zmod ) = 0;
      virtual HRESULT __stdcall raw_Vreal (
        /*[in]*/ long Channel,
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall raw_Vimag (
        /*[in]*/ long Channel,
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall raw_Vsig (
        /*[in]*/ long Channel,
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall raw_Vdc (
        /*[in]*/ long Channel,
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall raw_Ireal (
        /*[in]*/ long Channel,
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall raw_Iimag (
        /*[in]*/ long Channel,
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall raw_Isig (
        /*[in]*/ long Channel,
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall raw_Idc (
        /*[in]*/ long Channel,
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall raw_Zreal (
        /*[in]*/ long Channel,
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall raw_Zimag (
        /*[in]*/ long Channel,
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall raw_Zsig (
        /*[in]*/ long Channel,
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall raw_Zfreq (
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall raw_Imod (
        /*[in]*/ long Channel,
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall raw_Iphz (
        /*[in]*/ long Channel,
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall raw_Vmod (
        /*[in]*/ long Channel,
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall raw_Vphz (
        /*[in]*/ long Channel,
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall raw_Zmod (
        /*[in]*/ long Channel,
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall raw_Zphz (
        /*[in]*/ long Channel,
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall raw_Gain (
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall raw_VNoise (
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall raw_INoise (
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall raw_IENoise (
        /*[out,retval]*/ float * Value ) = 0;
      virtual HRESULT __stdcall raw_IERange (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall raw_SetGain (
        /*[in]*/ float Gain ) = 0;
      virtual HRESULT __stdcall raw_SetVNoise (
        /*[in]*/ float VNoise ) = 0;
      virtual HRESULT __stdcall raw_SetINoise (
        /*[in]*/ float INoise ) = 0;
      virtual HRESULT __stdcall raw_SetIENoise (
        /*[in]*/ float IENoise ) = 0;
      virtual HRESULT __stdcall raw_SetIdc (
        /*[in]*/ long Channel,
        /*[in]*/ float Idc ) = 0;
      virtual HRESULT __stdcall raw_StatusMessage (
        /*[out,retval]*/ BSTR * Message ) = 0;
      virtual HRESULT __stdcall raw_Stop ( ) = 0;
};

struct __declspec(uuid("f4fb0845-1054-490a-ad28-152f858156d8"))
IGamryFC350Load : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT Init (
        struct IGamryPstat * PSTAT );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Init (
        /*[in]*/ struct IGamryPstat * PSTAT ) = 0;
};

struct __declspec(uuid("e157287c-93f5-4b5f-a4cc-8d5f51e9b79c"))
IGamryDiagnostic : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT Init (
        struct IGamryPstat * PSTAT );
    HRESULT PokeDword (
        long Address,
        long Value );
    long PeekDword (
        long Address );
    HRESULT PokeWord (
        long Address,
        short Value );
    short PeekWord (
        long Address );
    HRESULT PokeByte (
        long Address,
        unsigned char Value );
    unsigned char PeekByte (
        long Address );
    HRESULT TestModeSampling (
        long NumberOfSamples,
        long SampleInterval,
        long SignalInterval,
        long Control,
        float Start,
        float Stop,
        long NumberOfCycles,
        long StartStop,
        SAFEARRAY * * lplpI_ADCSafeArray,
        SAFEARRAY * * lplpE_ADCSafeArray,
        SAFEARRAY * * lplpA_ADCSafeArray,
        SAFEARRAY * * lplpSignalSafeArray,
        SAFEARRAY * * lplpTimeCountSafeArray );
    HRESULT ReadSystemIdentity (
        long Subsystem,
        unsigned short * ModelNo,
        int * Family,
        unsigned char * RevisionNumber,
        unsigned char * AssemblyNumber,
        unsigned short * SecurityCode,
        BSTR * SerialNo,
        BSTR * Version,
        BSTR * ModelName );
    HRESULT WriteSystemIdentity (
        long Subsystem,
        unsigned short ModelNo,
        int Family,
        unsigned char RevisionNumber,
        unsigned char AssemblyNumber,
        unsigned short SecurityCode,
        BSTR * SerialNo,
        BSTR * Version,
        BSTR * ModelName );
    HRESULT FirmwareUpdate (
        LPSTR File,
        int UpdateType,
        long IsTestFramework );
    HRESULT InitializeNvmCalib ( );
    HRESULT ReadFirmwareVersion (
        long Subsystem,
        BSTR * Version );
    HRESULT ReadInstrumentLabel (
        BSTR * InstrumentLabel );
    HRESULT WriteInstrumentLabel (
        BSTR * InstrumentLabel );
    HRESULT InitByHandle (
        long Handle );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Init (
        /*[in]*/ struct IGamryPstat * PSTAT ) = 0;
      virtual HRESULT __stdcall raw_PokeDword (
        /*[in]*/ long Address,
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_PeekDword (
        /*[in]*/ long Address,
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall raw_PokeWord (
        /*[in]*/ long Address,
        /*[in]*/ short Value ) = 0;
      virtual HRESULT __stdcall raw_PeekWord (
        /*[in]*/ long Address,
        /*[out,retval]*/ short * Value ) = 0;
      virtual HRESULT __stdcall raw_PokeByte (
        /*[in]*/ long Address,
        /*[in]*/ unsigned char Value ) = 0;
      virtual HRESULT __stdcall raw_PeekByte (
        /*[in]*/ long Address,
        /*[out,retval]*/ unsigned char * Value ) = 0;
      virtual HRESULT __stdcall raw_TestModeSampling (
        /*[in]*/ long NumberOfSamples,
        /*[in]*/ long SampleInterval,
        /*[in]*/ long SignalInterval,
        /*[in]*/ long Control,
        /*[in]*/ float Start,
        /*[in]*/ float Stop,
        /*[in]*/ long NumberOfCycles,
        /*[in]*/ long StartStop,
        /*[out]*/ SAFEARRAY * * lplpI_ADCSafeArray,
        /*[out]*/ SAFEARRAY * * lplpE_ADCSafeArray,
        /*[out]*/ SAFEARRAY * * lplpA_ADCSafeArray,
        /*[out]*/ SAFEARRAY * * lplpSignalSafeArray,
        /*[out]*/ SAFEARRAY * * lplpTimeCountSafeArray ) = 0;
      virtual HRESULT __stdcall raw_ReadSystemIdentity (
        /*[in]*/ long Subsystem,
        /*[out]*/ unsigned short * ModelNo,
        /*[out]*/ int * Family,
        /*[out]*/ unsigned char * RevisionNumber,
        /*[out]*/ unsigned char * AssemblyNumber,
        /*[out]*/ unsigned short * SecurityCode,
        /*[out]*/ BSTR * SerialNo,
        /*[out]*/ BSTR * Version,
        /*[out]*/ BSTR * ModelName ) = 0;
      virtual HRESULT __stdcall raw_WriteSystemIdentity (
        /*[in]*/ long Subsystem,
        /*[in]*/ unsigned short ModelNo,
        /*[in]*/ int Family,
        /*[in]*/ unsigned char RevisionNumber,
        /*[in]*/ unsigned char AssemblyNumber,
        /*[in]*/ unsigned short SecurityCode,
        /*[in]*/ BSTR * SerialNo,
        /*[in]*/ BSTR * Version,
        /*[in]*/ BSTR * ModelName ) = 0;
      virtual HRESULT __stdcall raw_FirmwareUpdate (
        /*[in]*/ LPSTR File,
        /*[in]*/ int UpdateType,
        /*[in]*/ long IsTestFramework ) = 0;
      virtual HRESULT __stdcall raw_InitializeNvmCalib ( ) = 0;
      virtual HRESULT __stdcall raw_ReadFirmwareVersion (
        /*[in]*/ long Subsystem,
        /*[out]*/ BSTR * Version ) = 0;
      virtual HRESULT __stdcall raw_ReadInstrumentLabel (
        /*[out]*/ BSTR * InstrumentLabel ) = 0;
      virtual HRESULT __stdcall raw_WriteInstrumentLabel (
        /*[in,out]*/ BSTR * InstrumentLabel ) = 0;
      virtual HRESULT __stdcall raw_InitByHandle (
        /*[in]*/ long Handle ) = 0;
};

struct __declspec(uuid("f49d6530-1ce0-4efb-8640-93e7af0e8f23"))
GamryDeviceList;
    // [ default ] interface IGamryDeviceList
    // [ default, source ] dispinterface _IGamryDeviceListEvents

struct __declspec(uuid("808d6538-22cd-4fe7-a3b1-6bdf42cff8db"))
GamryPstat;
    // [ default ] interface IGamryPstat
    // [ default, source ] dispinterface _IGamryPstatEvents

struct __declspec(uuid("f063a468-9f93-44ae-83f3-b50f92772b7a"))
GamryPC5Pstat;
    // [ default ] interface IGamryPC5Pstat
    // [ default, source ] dispinterface _IGamryPstatEvents

struct __declspec(uuid("63f9e320-cf27-4a72-83f2-de7f92c5d63b"))
GamryPC6Pstat;
    // [ default ] interface IGamryPC6Pstat
    // [ default, source ] dispinterface _IGamryPstatEvents

struct __declspec(uuid("ecf19eea-bfa6-4d74-b0fa-a70ff34300a1"))
GamryAe;
    // [ default ] interface IGamryAe

struct __declspec(uuid("766f0a9b-25e0-4a27-b457-80a75db488e8"))
GamryDtaqUniv;
    // [ default ] interface IGamryDtaqUniv
    // [ default, source ] dispinterface _IGamryDtaqEvents

struct __declspec(uuid("de6fb991-9840-41d1-926e-269d8b2139e1"))
GamryDtaqIv;
    // [ default ] interface IGamryDtaqIv
    // [ default, source ] dispinterface _IGamryDtaqEvents

struct __declspec(uuid("decdcecf-9474-4a49-b2a5-c5fb3732b8f4"))
GamryDtaqCpiv;
    // [ default ] interface IGamryDtaqCpiv
    // [ default, source ] dispinterface _IGamryDtaqEvents

struct __declspec(uuid("e80ff588-f863-4f80-bafe-d744efbb6e47"))
GamryDtaqCpivAe;
    // [ default ] interface IGamryDtaqCpivAe
    // [ default, source ] dispinterface _IGamryDtaqEvents

struct __declspec(uuid("c1ccb68e-818f-44c6-b54b-c340bd1421ce"))
GamrySignalUniv;
    // [ default ] interface IGamrySignalUniv
    // interface IGamrySignal

struct __declspec(uuid("52422657-4fff-47e9-8511-48b3550c2efe"))
GamrySignalArray;
    // [ default ] interface IGamrySignalArray
    // interface IGamrySignal

struct __declspec(uuid("83883f2b-ea73-4bbb-9c6b-83eae96f8675"))
GamrySignalArray2;
    // [ default ] interface IGamrySignalArray2
    // interface IGamrySignal

struct __declspec(uuid("197835f7-7337-4715-a445-fc513168debd"))
GamryDtaqEis;
    // [ default ] interface IGamryDtaqEis
    // [ default, source ] dispinterface _IGamryDtaqEvents

struct __declspec(uuid("1a21a51b-bc77-45e1-a85c-6082827ad9c4"))
GamryDtaqEisAe;
    // [ default ] interface IGamryDtaqEisAe
    // [ default, source ] dispinterface _IGamryDtaqEvents

struct __declspec(uuid("b83ab565-e9fb-4e11-9a10-41670717a6d2"))
GamryDtaqCiiv;
    // [ default ] interface IGamryDtaqCiiv
    // [ default, source ] dispinterface _IGamryDtaqEvents

struct __declspec(uuid("a50b02d7-6397-49a7-9429-788ead7779b8"))
GamryDtaqCiivAe;
    // [ default ] interface IGamryDtaqCiivAe
    // [ default, source ] dispinterface _IGamryDtaqEvents

struct __declspec(uuid("002bd5cb-d69a-4844-8f03-9a0f4683c9d8"))
GamryDtaqChrono;
    // [ default ] interface IGamryDtaqChrono
    // [ default, source ] dispinterface _IGamryDtaqEvents

struct __declspec(uuid("b87bdfa8-d9df-4934-81ab-f18c330f092a"))
GamryDtaqIvt;
    // [ default ] interface IGamryDtaqIvt
    // [ default, source ] dispinterface _IGamryDtaqEvents

struct __declspec(uuid("456cba96-d100-495b-a49c-626c98b4373f"))
GamryDtaqIvtAe;
    // [ default ] interface IGamryDtaqIvtAe
    // [ default, source ] dispinterface _IGamryDtaqEvents

struct __declspec(uuid("4658608e-d5a2-435d-9f4f-55435d891a72"))
GamryDtaqOcv;
    // [ default ] interface IGamryDtaqOcv
    // [ default, source ] dispinterface _IGamryDtaqEvents

struct __declspec(uuid("2035f033-d07c-489e-a9f2-f31d7c23fbb6"))
GamryDtaqOcvAe;
    // [ default ] interface IGamryDtaqOcvAe
    // [ default, source ] dispinterface _IGamryDtaqEvents

struct __declspec(uuid("6361c3cf-c9cc-46c8-b358-95caa966f44b"))
GamryDtaqPv;
    // [ default ] interface IGamryDtaqPv
    // [ default, source ] dispinterface _IGamryDtaqEvents

struct __declspec(uuid("86ec9960-be79-4458-b1d1-08e2b3d47d23"))
GamryDtaqRcv;
    // [ default ] interface IGamryDtaqRcv
    // [ default, source ] dispinterface _IGamryDtaqEvents

struct __declspec(uuid("21abf8b2-5181-466d-8167-dcb4461e5cd9"))
GamryDtaqRcvAe;
    // [ default ] interface IGamryDtaqRcvAe
    // [ default, source ] dispinterface _IGamryDtaqEvents

struct __declspec(uuid("0fc3573d-7f95-4a2b-a99b-bed99b255f82"))
GamryDtaqSqwv;
    // [ default ] interface IGamryDtaqSqwv
    // [ default, source ] dispinterface _IGamryDtaqEvents

struct __declspec(uuid("27f74f2b-ecca-4bc9-89c3-68852b83cec6"))
GamryDtaqPwr;
    // [ default ] interface IGamryDtaqPwr
    // [ default, source ] dispinterface _IGamryDtaqEvents

struct __declspec(uuid("6b5207ec-21cd-442d-9375-b2a198fac2d6"))
GamryDtaqPwrAe;
    // [ default ] interface IGamryDtaqPwrAe
    // [ default, source ] dispinterface _IGamryDtaqEvents

struct __declspec(uuid("526de1f7-bcf3-4b66-b8c3-1167e2aaad46"))
GamrySignalConst;
    // [ default ] interface IGamrySignalConst
    // interface IGamrySignal

struct __declspec(uuid("42007503-4432-4012-a9c6-7b4a84cb80b0"))
GamrySignalPwrConst;
    // [ default ] interface IGamrySignalPwrConst
    // interface IGamrySignal

struct __declspec(uuid("399892cb-b5c2-4f07-81eb-8ea4ab4ab0bc"))
GamrySignalStep;
    // [ default ] interface IGamrySignalStep
    // interface IGamrySignal

struct __declspec(uuid("4a8226ac-20f6-420e-ad75-1395bd2162f9"))
GamrySignalPwrStep;
    // [ default ] interface IGamrySignalPwrStep
    // interface IGamrySignal

struct __declspec(uuid("837e2910-c553-4084-b358-1defb2efaa9e"))
GamrySignalRamp;
    // [ default ] interface IGamrySignalRamp
    // interface IGamrySignal

struct __declspec(uuid("b0e70e33-4631-4f7f-bf26-45177fdd5df1"))
GamrySignalPwrRamp;
    // [ default ] interface IGamrySignalPwrRamp
    // interface IGamrySignal

struct __declspec(uuid("ec19bc37-07a5-4d0a-8537-4f7296dd24ea"))
GamrySignalDstep;
    // [ default ] interface IGamrySignalDstep
    // interface IGamrySignal

struct __declspec(uuid("35170010-7434-4f8e-850f-fd164b9dac19"))
GamrySignalMstep;
    // [ default ] interface IGamrySignalMstep
    // interface IGamrySignal

struct __declspec(uuid("f1db4f89-57ab-4127-8ebf-a068e21a7c28"))
GamrySignalPv;
    // [ default ] interface IGamrySignalPv
    // interface IGamrySignal

struct __declspec(uuid("fbfd0ad2-2486-4dd6-b62a-75de1f70da2a"))
GamrySignalRupdn;
    // [ default ] interface IGamrySignalRupdn
    // interface IGamrySignal

struct __declspec(uuid("2988fead-f3d1-4d8e-9473-575f231b178e"))
GamrySignalUpdn;
    // [ default ] interface IGamrySignalUpdn
    // interface IGamrySignal

struct __declspec(uuid("c8f98c0d-f121-4bb6-9c4e-4128b9c03e25"))
GamrySignalSqwv;
    // [ default ] interface IGamrySignalSqwv
    // interface IGamrySignal

struct __declspec(uuid("0a9f9158-61b8-40b4-854b-dd328089f7e3"))
_IGamryReadZEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT OnDataAvailable ( );
    HRESULT OnDataDone (
        enum gcREADZSTATUS Status );
};

struct __declspec(uuid("9a80906d-f3f5-4628-b89e-7739978022b9"))
GamryReadZ;
    // [ default ] interface IGamryReadZ
    // [ default, source ] dispinterface _IGamryReadZEvents

struct __declspec(uuid("0c2c35c7-ac0f-4f4d-8b05-decf658a4390"))
GamryReadZAe;
    // [ default ] interface IGamryReadZAe
    // [ default, source ] dispinterface _IGamryReadZEvents

struct __declspec(uuid("8e54e15d-1f54-4c2d-b44a-27d6315b3976"))
GamryFC350Load;
    // [ default ] interface IGamryFC350Load

struct __declspec(uuid("60eda202-d403-4814-af3d-800b8254d44b"))
GamryDtaqEsa2;
    // [ default ] interface IGamryDtaqEsa2
    // [ default, source ] dispinterface _IGamryDtaqEvents

struct __declspec(uuid("fa4815dc-158e-4e04-8ac8-84f12faf5756"))
GamryDtaqEfm;
    // [ default ] interface IGamryDtaqEfm
    // [ default, source ] dispinterface _IGamryDtaqEvents

struct __declspec(uuid("97c53304-13c4-4aa7-bc54-149c8c7b9c8c"))
GamryMux;
    // [ default ] interface IGamryMux

struct __declspec(uuid("57a98dfd-c863-42bc-9fe0-4b44c9526a12"))
GamryDiagnostic;
    // [ default ] interface IGamryDiagnostic

struct __declspec(uuid("420d7188-d7e3-4dec-a1fe-6a3c582e2aa9"))
GamryQcm;
    // [ default ] interface IGamryQcm
    // [ default, source ] dispinterface _IGamryQcmEvents

//
// Wrapper method implementations
//

#include "e:\prgs\project-a\project-a-elec-e8002\gamry-600-reference\src\build-gamryexperimentcontrolandvisualizationclasstestui-desktop_qt_5_8_0_msvc2015_64bit-debug\debug\GamryCom.tli"

#pragma pack(pop)
